{
	"openapi": "3.0.0",
	"components": {
		"examples": {},
		"headers": {},
		"parameters": {},
		"requestBodies": {},
		"responses": {},
		"schemas": {
			"TodoStatus": {
				"type": "string",
				"enum": [
					"pending",
					"in_progress",
					"completed"
				],
				"description": "TODO item status"
			},
			"TodoItem": {
				"description": "TODO item",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique TODO ID"
					},
					"content": {
						"type": "string",
						"description": "TODO content/description"
					},
					"status": {
						"$ref": "#/components/schemas/TodoStatus",
						"description": "TODO status"
					}
				},
				"required": [
					"id",
					"content",
					"status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"TodoListResponse": {
				"description": "TODO list response",
				"properties": {
					"taskId": {
						"type": "string",
						"description": "Task ID"
					},
					"todos": {
						"items": {
							"$ref": "#/components/schemas/TodoItem"
						},
						"type": "array",
						"description": "TODO items"
					},
					"count": {
						"type": "number",
						"format": "double",
						"description": "Total count"
					},
					"stats": {
						"properties": {
							"pending": {
								"type": "number",
								"format": "double"
							},
							"inProgress": {
								"type": "number",
								"format": "double"
							},
							"completed": {
								"type": "number",
								"format": "double"
							},
							"total": {
								"type": "number",
								"format": "double"
							}
						},
						"required": [
							"pending",
							"inProgress",
							"completed",
							"total"
						],
						"type": "object",
						"description": "Statistics"
					}
				},
				"required": [
					"taskId",
					"todos",
					"count",
					"stats"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ApiErrorResponse": {
				"description": "API Error response",
				"properties": {
					"error": {
						"type": "string",
						"description": "Error type/category"
					},
					"message": {
						"type": "string",
						"description": "Human-readable error message"
					},
					"code": {
						"type": "string",
						"description": "Machine-readable error code"
					},
					"statusCode": {
						"type": "number",
						"format": "double",
						"description": "HTTP status code"
					}
				},
				"required": [
					"error"
				],
				"type": "object",
				"additionalProperties": false,
				"example": {
					"error": "Not Found",
					"message": "Profile 'my-profile' not found",
					"code": "PROFILE_NOT_FOUND"
				}
			},
			"CreateTodoResponse": {
				"description": "Create TODO response",
				"properties": {
					"success": {
						"type": "boolean",
						"enum": [
							true
						],
						"nullable": false
					},
					"message": {
						"type": "string"
					},
					"todo": {
						"$ref": "#/components/schemas/TodoItem",
						"description": "Created TODO item"
					}
				},
				"required": [
					"success",
					"message",
					"todo"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CreateTodoRequest": {
				"description": "Create TODO request",
				"properties": {
					"content": {
						"type": "string",
						"description": "TODO content/description"
					},
					"status": {
						"$ref": "#/components/schemas/TodoStatus",
						"description": "Initial status (default: pending)"
					},
					"position": {
						"type": "number",
						"format": "double",
						"description": "Position to insert at (0-based index, default: append to end)"
					}
				},
				"required": [
					"content"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UpdateTodoResponse": {
				"description": "Update TODO response",
				"properties": {
					"success": {
						"type": "boolean",
						"enum": [
							true
						],
						"nullable": false
					},
					"message": {
						"type": "string"
					},
					"todo": {
						"$ref": "#/components/schemas/TodoItem",
						"description": "Updated TODO item"
					}
				},
				"required": [
					"success",
					"message",
					"todo"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UpdateTodoRequest": {
				"description": "Update TODO request",
				"properties": {
					"content": {
						"type": "string",
						"description": "Updated content"
					},
					"status": {
						"$ref": "#/components/schemas/TodoStatus",
						"description": "Updated status"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"BulkUpdateTodosResponse": {
				"description": "Bulk update TODOs response",
				"properties": {
					"success": {
						"type": "boolean",
						"enum": [
							true
						],
						"nullable": false
					},
					"message": {
						"type": "string"
					},
					"todos": {
						"items": {
							"$ref": "#/components/schemas/TodoItem"
						},
						"type": "array",
						"description": "Updated TODO list"
					}
				},
				"required": [
					"success",
					"message",
					"todos"
				],
				"type": "object",
				"additionalProperties": false
			},
			"BulkUpdateTodosRequest": {
				"description": "Bulk update TODOs request",
				"properties": {
					"todos": {
						"items": {
							"$ref": "#/components/schemas/TodoItem"
						},
						"type": "array",
						"description": "Array of TODO items"
					}
				},
				"required": [
					"todos"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ImportTodosResponse": {
				"description": "Import TODOs response",
				"properties": {
					"success": {
						"type": "boolean",
						"enum": [
							true
						],
						"nullable": false
					},
					"message": {
						"type": "string"
					},
					"todos": {
						"items": {
							"$ref": "#/components/schemas/TodoItem"
						},
						"type": "array",
						"description": "Imported TODO items"
					}
				},
				"required": [
					"success",
					"message",
					"todos"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ImportTodosRequest": {
				"description": "Import TODOs from markdown request",
				"properties": {
					"markdown": {
						"type": "string",
						"description": "Markdown checklist format"
					}
				},
				"required": [
					"markdown"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ExecuteCommandResponse": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"taskId": {
						"type": "string"
					},
					"message": {
						"type": "string"
					}
				},
				"required": [
					"success",
					"taskId",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ExecuteCommandRequest": {
				"properties": {
					"command": {
						"type": "string"
					},
					"cwd": {
						"type": "string"
					}
				},
				"required": [
					"command"
				],
				"type": "object",
				"additionalProperties": false
			},
			"TerminalInfoResponse": {
				"properties": {
					"outputLineLimit": {
						"type": "number",
						"format": "double"
					},
					"outputCharacterLimit": {
						"type": "number",
						"format": "double"
					},
					"shellIntegrationTimeout": {
						"type": "number",
						"format": "double"
					},
					"shellIntegrationDisabled": {
						"type": "boolean"
					},
					"commandDelay": {
						"type": "number",
						"format": "double"
					},
					"compressProgressBar": {
						"type": "boolean"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"CreateTaskResponse": {
				"properties": {
					"taskId": {
						"type": "string"
					},
					"status": {
						"type": "string"
					}
				},
				"required": [
					"taskId",
					"status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CreateTaskRequest": {
				"properties": {
					"text": {
						"type": "string"
					},
					"images": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"mode": {
						"type": "string"
					}
				},
				"required": [
					"text"
				],
				"type": "object",
				"additionalProperties": false
			},
			"TaskListResponse": {
				"properties": {
					"data": {
						"items": {},
						"type": "array"
					},
					"pagination": {
						"properties": {
							"hasPrev": {
								"type": "boolean"
							},
							"hasNext": {
								"type": "boolean"
							},
							"totalPages": {
								"type": "number",
								"format": "double"
							},
							"total": {
								"type": "number",
								"format": "double"
							},
							"limit": {
								"type": "number",
								"format": "double"
							},
							"page": {
								"type": "number",
								"format": "double"
							}
						},
						"required": [
							"hasPrev",
							"hasNext",
							"totalPages",
							"total",
							"limit",
							"page"
						],
						"type": "object"
					},
					"links": {
						"properties": {
							"last": {
								"type": "string"
							},
							"first": {
								"type": "string"
							},
							"prev": {
								"type": "string",
								"nullable": true
							},
							"next": {
								"type": "string",
								"nullable": true
							},
							"self": {
								"type": "string"
							}
						},
						"required": [
							"last",
							"first",
							"prev",
							"next",
							"self"
						],
						"type": "object"
					}
				},
				"required": [
					"data",
					"pagination",
					"links"
				],
				"type": "object",
				"additionalProperties": false
			},
			"TaskDetailsResponse": {
				"properties": {
					"historyItem": {},
					"messages": {
						"items": {},
						"type": "array"
					},
					"uiMessages": {
						"items": {},
						"type": "array"
					}
				},
				"required": [
					"historyItem",
					"messages"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SwitchTaskResponse": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"taskId": {
						"type": "string"
					},
					"previousTaskId": {
						"type": "string",
						"nullable": true
					},
					"status": {
						"type": "string"
					},
					"message": {
						"type": "string"
					},
					"alreadyCurrent": {
						"type": "boolean"
					}
				},
				"required": [
					"success",
					"taskId",
					"previousTaskId",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ResumeTaskResponse": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"taskId": {
						"type": "string"
					},
					"status": {
						"type": "string"
					}
				},
				"required": [
					"success",
					"taskId",
					"status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"RespondToTaskResponse": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"taskId": {
						"type": "string"
					},
					"response": {
						"type": "string"
					}
				},
				"required": [
					"success",
					"taskId",
					"response"
				],
				"type": "object",
				"additionalProperties": false
			},
			"RespondToTaskRequest": {
				"properties": {
					"response": {
						"type": "string"
					},
					"images": {
						"items": {
							"type": "string"
						},
						"type": "array"
					}
				},
				"required": [
					"response"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CancelTaskResponse": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"taskId": {
						"type": "string"
					}
				},
				"required": [
					"success",
					"taskId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ToggleFavoriteResponse": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"taskId": {
						"type": "string"
					}
				},
				"required": [
					"success",
					"taskId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ExportTaskResponse": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CondenseTaskResponse": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"taskId": {
						"type": "string"
					}
				},
				"required": [
					"success",
					"taskId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"QueueMessage": {
				"properties": {
					"id": {
						"type": "string"
					},
					"text": {
						"type": "string"
					},
					"images": {
						"items": {
							"type": "string"
						},
						"type": "array"
					}
				},
				"required": [
					"id",
					"text"
				],
				"type": "object",
				"additionalProperties": false
			},
			"MessageQueueResponse": {
				"properties": {
					"taskId": {
						"type": "string"
					},
					"messages": {
						"items": {
							"$ref": "#/components/schemas/QueueMessage"
						},
						"type": "array"
					},
					"count": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"taskId",
					"messages",
					"count"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AddToQueueResponse": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"taskId": {
						"type": "string"
					},
					"message": {
						"$ref": "#/components/schemas/QueueMessage"
					}
				},
				"required": [
					"success",
					"taskId",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AddToQueueRequest": {
				"properties": {
					"text": {
						"type": "string"
					},
					"images": {
						"items": {
							"type": "string"
						},
						"type": "array"
					}
				},
				"required": [
					"text"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UpdateQueueMessageResponse": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"taskId": {
						"type": "string"
					},
					"messageId": {
						"type": "string"
					}
				},
				"required": [
					"success",
					"taskId",
					"messageId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UpdateQueueMessageRequest": {
				"properties": {
					"text": {
						"type": "string"
					},
					"images": {
						"items": {
							"type": "string"
						},
						"type": "array"
					}
				},
				"required": [
					"text"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ClearQueueResponse": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"taskId": {
						"type": "string"
					},
					"cleared": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"success",
					"taskId",
					"cleared"
				],
				"type": "object",
				"additionalProperties": false
			},
			"BatchDeleteResponse": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"deleted": {
						"type": "number",
						"format": "double"
					},
					"failed": {
						"type": "number",
						"format": "double"
					},
					"total": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"success",
					"deleted",
					"failed",
					"total"
				],
				"type": "object",
				"additionalProperties": false
			},
			"BatchDeleteRequest": {
				"properties": {
					"taskIds": {
						"items": {
							"type": "string"
						},
						"type": "array"
					}
				},
				"required": [
					"taskIds"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Checkpoint": {
				"properties": {
					"hash": {
						"type": "string"
					},
					"timestamp": {
						"type": "number",
						"format": "double"
					},
					"from": {
						"type": "string"
					},
					"to": {
						"type": "string"
					},
					"suppressMessage": {
						"type": "boolean"
					}
				},
				"required": [
					"hash",
					"timestamp"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CheckpointListResponse": {
				"properties": {
					"taskId": {
						"type": "string"
					},
					"checkpoints": {
						"items": {
							"$ref": "#/components/schemas/Checkpoint"
						},
						"type": "array"
					},
					"count": {
						"type": "number",
						"format": "double"
					},
					"currentCheckpoint": {
						"type": "string"
					}
				},
				"required": [
					"taskId",
					"checkpoints",
					"count"
				],
				"type": "object",
				"additionalProperties": false
			},
			"RestoreCheckpointResponse": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"taskId": {
						"type": "string"
					},
					"restoredToHash": {
						"type": "string"
					},
					"message": {
						"type": "string"
					}
				},
				"required": [
					"success",
					"taskId",
					"restoredToHash",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"RestoreCheckpointRequest": {
				"properties": {
					"hash": {
						"type": "string"
					}
				},
				"required": [
					"hash"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CheckpointDiffResponse": {
				"properties": {
					"taskId": {
						"type": "string"
					},
					"fromHash": {
						"type": "string"
					},
					"toHash": {
						"type": "string"
					},
					"changes": {
						"items": {
							"properties": {
								"after": {
									"type": "string"
								},
								"before": {
									"type": "string"
								},
								"path": {
									"type": "string"
								}
							},
							"required": [
								"after",
								"before",
								"path"
							],
							"type": "object"
						},
						"type": "array"
					}
				},
				"required": [
					"taskId",
					"fromHash",
					"changes"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ApplicationState": {
				"description": "Complete application state",
				"properties": {},
				"type": "object",
				"additionalProperties": {}
			},
			"ConfigurationResponse": {
				"description": "Configuration subset response",
				"properties": {
					"mode": {
						"type": "string"
					},
					"apiConfiguration": {},
					"currentApiConfigName": {
						"type": "string"
					},
					"customInstructions": {
						"type": "string"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"ConfigurationUpdateResponse": {
				"description": "Configuration update response",
				"properties": {
					"success": {
						"type": "boolean",
						"enum": [
							true
						],
						"nullable": false
					}
				},
				"required": [
					"success"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ConfigurationUpdateRequest": {
				"description": "Configuration update request",
				"properties": {
					"mode": {
						"type": "string"
					},
					"apiConfiguration": {},
					"customInstructions": {
						"type": "string"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"ModeInfo": {
				"description": "Mode information",
				"properties": {
					"slug": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"roleDefinition": {
						"type": "string"
					},
					"groups": {
						"items": {
							"type": "string"
						},
						"type": "array"
					}
				},
				"required": [
					"slug",
					"name"
				],
				"type": "object",
				"additionalProperties": {}
			},
			"ExtensionSettings": {
				"description": "All extension settings",
				"properties": {},
				"type": "object",
				"additionalProperties": {}
			},
			"SettingsUpdateResponse": {
				"description": "Settings update response",
				"properties": {
					"success": {
						"type": "boolean",
						"enum": [
							true
						],
						"nullable": false
					},
					"message": {
						"type": "string"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SettingsUpdateRequest": {
				"description": "Settings update request",
				"properties": {},
				"type": "object",
				"additionalProperties": {}
			},
			"AutoApprovalSettings": {
				"description": "Auto-approval configuration",
				"properties": {
					"enabled": {
						"type": "boolean"
					},
					"readOnly": {
						"type": "boolean"
					},
					"readOnlyOutsideWorkspace": {
						"type": "boolean"
					},
					"write": {
						"type": "boolean"
					},
					"writeOutsideWorkspace": {
						"type": "boolean"
					},
					"writeProtected": {
						"type": "boolean"
					},
					"execute": {
						"type": "boolean"
					},
					"browser": {
						"type": "boolean"
					},
					"mcp": {
						"type": "boolean"
					},
					"modeSwitch": {
						"type": "boolean"
					},
					"subtasks": {
						"type": "boolean"
					},
					"followupQuestions": {
						"type": "boolean"
					},
					"updateTodoList": {
						"type": "boolean"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"TerminalSettings": {
				"description": "Terminal settings",
				"properties": {
					"outputLineLimit": {
						"type": "number",
						"format": "double"
					},
					"outputCharacterLimit": {
						"type": "number",
						"format": "double"
					},
					"shellIntegrationTimeout": {
						"type": "number",
						"format": "double"
					},
					"shellIntegrationDisabled": {
						"type": "boolean"
					},
					"commandDelay": {
						"type": "number",
						"format": "double"
					},
					"compressProgressBar": {
						"type": "boolean"
					},
					"powershellCounter": {
						"type": "boolean"
					},
					"zshClearEolMark": {
						"type": "boolean"
					},
					"zshOhMy": {
						"type": "boolean"
					},
					"zshP10k": {
						"type": "boolean"
					},
					"zdotdir": {
						"type": "string"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"BrowserSettings": {
				"description": "Browser settings",
				"properties": {
					"enabled": {
						"type": "boolean"
					},
					"viewportSize": {
						"type": "string"
					},
					"screenshotQuality": {
						"type": "number",
						"format": "double"
					},
					"remoteBrowserEnabled": {
						"type": "boolean"
					},
					"remoteBrowserHost": {
						"type": "string"
					},
					"cachedChromeHostUrl": {
						"type": "string"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"SupportPromptType": {
				"type": "string",
				"enum": [
					"ENHANCE",
					"CONDENSE",
					"EXPLAIN",
					"FIX",
					"IMPROVE",
					"ADD_TO_CONTEXT",
					"TERMINAL_ADD_TO_CONTEXT",
					"TERMINAL_FIX",
					"TERMINAL_EXPLAIN",
					"TERMINAL_GENERATE",
					"NEW_TASK",
					"COMMIT_MESSAGE"
				]
			},
			"PromptTypeInfo": {
				"properties": {
					"type": {
						"$ref": "#/components/schemas/SupportPromptType"
					},
					"description": {
						"type": "string"
					},
					"parameters": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"category": {
						"type": "string",
						"enum": [
							"enhancement",
							"code-action",
							"terminal",
							"git",
							"task"
						]
					}
				},
				"required": [
					"type",
					"description",
					"parameters",
					"category"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PromptTypesResponse": {
				"properties": {
					"types": {
						"items": {
							"$ref": "#/components/schemas/PromptTypeInfo"
						},
						"type": "array"
					},
					"count": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"types",
					"count"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PromptTemplate": {
				"properties": {
					"template": {
						"type": "string"
					},
					"isCustom": {
						"type": "boolean"
					}
				},
				"required": [
					"template",
					"isCustom"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Record_string.PromptTemplate_": {
				"properties": {},
				"additionalProperties": {
					"$ref": "#/components/schemas/PromptTemplate"
				},
				"type": "object",
				"description": "Construct a type with a set of properties K of type T"
			},
			"PromptsListResponse": {
				"properties": {
					"prompts": {
						"$ref": "#/components/schemas/Record_string.PromptTemplate_"
					},
					"count": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"prompts",
					"count"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PromptDetailsResponse": {
				"properties": {
					"type": {
						"$ref": "#/components/schemas/SupportPromptType"
					},
					"template": {
						"type": "string"
					},
					"defaultTemplate": {
						"type": "string"
					},
					"isCustom": {
						"type": "boolean"
					},
					"metadata": {
						"$ref": "#/components/schemas/PromptTypeInfo"
					}
				},
				"required": [
					"type",
					"template",
					"defaultTemplate",
					"isCustom"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UpdatePromptResponse": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"type": {
						"$ref": "#/components/schemas/SupportPromptType"
					},
					"template": {
						"type": "string"
					}
				},
				"required": [
					"success",
					"type",
					"template"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UpdatePromptRequest": {
				"properties": {
					"template": {
						"type": "string"
					}
				},
				"required": [
					"template"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ResetPromptResponse": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"type": {
						"$ref": "#/components/schemas/SupportPromptType"
					},
					"template": {
						"type": "string"
					},
					"message": {
						"type": "string"
					}
				},
				"required": [
					"success",
					"type",
					"template",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ResetAllPromptsResponse": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"count": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"success",
					"message",
					"count"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ExecutePromptResponse": {
				"properties": {
					"type": {
						"$ref": "#/components/schemas/SupportPromptType"
					},
					"formattedPrompt": {
						"type": "string"
					},
					"result": {
						"type": "string"
					},
					"executed": {
						"type": "boolean"
					}
				},
				"required": [
					"type",
					"formattedPrompt",
					"executed"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Record_string.string_": {
				"properties": {},
				"additionalProperties": {
					"type": "string"
				},
				"type": "object",
				"description": "Construct a type with a set of properties K of type T"
			},
			"ExecutePromptRequest": {
				"properties": {
					"type": {
						"type": "string"
					},
					"params": {
						"$ref": "#/components/schemas/Record_string.string_"
					},
					"execute": {
						"type": "boolean"
					}
				},
				"required": [
					"type",
					"params"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ProfileListItem": {
				"description": "Profile list item (lightweight summary)",
				"properties": {
					"name": {
						"type": "string",
						"description": "Profile name/identifier"
					},
					"id": {
						"type": "string",
						"description": "Unique profile ID"
					},
					"apiProvider": {
						"type": "string",
						"description": "AI provider (e.g., 'anthropic', 'openai', 'openrouter')"
					},
					"modelId": {
						"type": "string",
						"description": "Model ID (cleaned, without provider prefix)"
					}
				},
				"required": [
					"name",
					"id"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ProfileDetails": {
				"description": "Full profile details",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique profile ID"
					},
					"apiProvider": {
						"type": "string",
						"description": "AI provider name (e.g., 'anthropic', 'openai', 'openrouter')"
					},
					"apiModelId": {
						"type": "string",
						"description": "Model ID"
					},
					"apiKey": {
						"type": "string",
						"description": "API key (will be redacted in responses)"
					},
					"openAiBaseUrl": {
						"type": "string",
						"description": "API base URL (for custom endpoints)"
					},
					"openAiHeaders": {
						"$ref": "#/components/schemas/Record_string.string_",
						"description": "Custom headers"
					},
					"rateLimitSeconds": {
						"type": "number",
						"format": "double",
						"description": "Rate limit in seconds"
					},
					"consecutiveMistakeLimit": {
						"type": "number",
						"format": "double",
						"description": "Maximum consecutive mistakes before stopping"
					},
					"diffEnabled": {
						"type": "boolean",
						"description": "Enable diff-based editing"
					},
					"fuzzyMatchThreshold": {
						"type": "number",
						"format": "double",
						"description": "Fuzzy match threshold for diffs"
					},
					"todoListEnabled": {
						"type": "boolean",
						"description": "Enable todo list feature"
					},
					"name": {
						"type": "string",
						"description": "Profile name"
					}
				},
				"required": [
					"name"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CreateProfileResponse": {
				"description": "Profile creation response",
				"properties": {
					"success": {
						"type": "boolean",
						"enum": [
							true
						],
						"nullable": false
					},
					"message": {
						"type": "string"
					},
					"id": {
						"type": "string",
						"description": "Generated profile ID"
					},
					"name": {
						"type": "string",
						"description": "Profile name"
					}
				},
				"required": [
					"success",
					"message",
					"id",
					"name"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ProviderSettings": {
				"description": "AI Provider configuration\nSimplified version for API use (full type is in",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique profile ID"
					},
					"apiProvider": {
						"type": "string",
						"description": "AI provider name (e.g., 'anthropic', 'openai', 'openrouter')"
					},
					"apiModelId": {
						"type": "string",
						"description": "Model ID"
					},
					"apiKey": {
						"type": "string",
						"description": "API key (will be redacted in responses)"
					},
					"openAiBaseUrl": {
						"type": "string",
						"description": "API base URL (for custom endpoints)"
					},
					"openAiHeaders": {
						"$ref": "#/components/schemas/Record_string.string_",
						"description": "Custom headers"
					},
					"rateLimitSeconds": {
						"type": "number",
						"format": "double",
						"description": "Rate limit in seconds"
					},
					"consecutiveMistakeLimit": {
						"type": "number",
						"format": "double",
						"description": "Maximum consecutive mistakes before stopping"
					},
					"diffEnabled": {
						"type": "boolean",
						"description": "Enable diff-based editing"
					},
					"fuzzyMatchThreshold": {
						"type": "number",
						"format": "double",
						"description": "Fuzzy match threshold for diffs"
					},
					"todoListEnabled": {
						"type": "boolean",
						"description": "Enable todo list feature"
					}
				},
				"type": "object",
				"additionalProperties": {}
			},
			"CreateProfileRequest": {
				"description": "Profile creation request",
				"properties": {
					"name": {
						"type": "string",
						"description": "Unique profile name"
					},
					"config": {
						"$ref": "#/components/schemas/ProviderSettings",
						"description": "Profile configuration"
					}
				},
				"required": [
					"name",
					"config"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UpdateProfileResponse": {
				"description": "Profile update response",
				"properties": {
					"success": {
						"type": "boolean",
						"enum": [
							true
						],
						"nullable": false
					},
					"message": {
						"type": "string"
					},
					"id": {
						"type": "string",
						"description": "Profile ID"
					},
					"name": {
						"type": "string",
						"description": "Profile name"
					}
				},
				"required": [
					"success",
					"message",
					"id",
					"name"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UpdateProfileRequest": {
				"description": "Profile update request",
				"properties": {
					"config": {
						"$ref": "#/components/schemas/ProviderSettings",
						"description": "Updated profile configuration"
					}
				},
				"required": [
					"config"
				],
				"type": "object",
				"additionalProperties": false
			},
			"DeleteProfileResponse": {
				"description": "Profile deletion response",
				"properties": {
					"success": {
						"type": "boolean",
						"enum": [
							true
						],
						"nullable": false
					},
					"message": {
						"type": "string"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ActivateProfileResponse": {
				"description": "Profile activation response",
				"properties": {
					"success": {
						"type": "boolean",
						"enum": [
							true
						],
						"nullable": false
					},
					"message": {
						"type": "string"
					},
					"profile": {
						"$ref": "#/components/schemas/ProfileDetails",
						"description": "Activated profile details (with secrets redacted)"
					}
				},
				"required": [
					"success",
					"message",
					"profile"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ModeProfileResponse": {
				"description": "Mode profile details response",
				"properties": {
					"mode": {
						"type": "string",
						"description": "Mode slug"
					},
					"profileId": {
						"type": "string",
						"description": "Assigned profile ID"
					},
					"profileName": {
						"type": "string",
						"description": "Assigned profile name"
					},
					"profile": {
						"$ref": "#/components/schemas/ProfileDetails",
						"description": "Full profile details (with secrets redacted)"
					}
				},
				"required": [
					"mode",
					"profileId",
					"profileName",
					"profile"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SetModeProfileResponse": {
				"description": "Mode profile assignment response",
				"properties": {
					"success": {
						"type": "boolean",
						"enum": [
							true
						],
						"nullable": false
					},
					"message": {
						"type": "string"
					},
					"mode": {
						"type": "string",
						"description": "Mode slug"
					},
					"profileId": {
						"type": "string",
						"description": "Assigned profile ID"
					}
				},
				"required": [
					"success",
					"message",
					"mode",
					"profileId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SetModeProfileRequest": {
				"description": "Mode profile assignment request",
				"properties": {
					"profileId": {
						"type": "string",
						"description": "Profile ID to assign"
					},
					"profileName": {
						"type": "string",
						"description": "Profile name to assign (alternative to profileId)"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"MemoryEntry": {
				"description": "Memory entry metadata",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique memory ID (e.g., mem_abc123)"
					},
					"path": {
						"type": "string",
						"description": "File path relative to rules directory"
					},
					"title": {
						"type": "string",
						"description": "Human-readable title"
					},
					"content": {
						"type": "string",
						"description": "Markdown content"
					},
					"scope": {
						"type": "string",
						"enum": [
							"global",
							"local"
						],
						"description": "Storage scope"
					},
					"category": {
						"type": "string",
						"description": "Optional category"
					},
					"tags": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "Optional tags"
					},
					"enabled": {
						"type": "boolean",
						"description": "Enabled status"
					},
					"createdAt": {
						"type": "string",
						"description": "Creation timestamp"
					},
					"updatedAt": {
						"type": "string",
						"description": "Last update timestamp"
					},
					"size": {
						"type": "number",
						"format": "double",
						"description": "File size in bytes"
					},
					"metadata": {
						"properties": {
							"autoGenerated": {
								"type": "boolean"
							},
							"taskId": {
								"type": "string"
							},
							"source": {
								"type": "string"
							}
						},
						"type": "object",
						"description": "Metadata"
					}
				},
				"required": [
					"id",
					"path",
					"title",
					"content",
					"scope",
					"enabled",
					"createdAt",
					"updatedAt"
				],
				"type": "object",
				"additionalProperties": false
			},
			"MemoryListResponse": {
				"description": "Memory list response",
				"properties": {
					"entries": {
						"items": {
							"$ref": "#/components/schemas/MemoryEntry"
						},
						"type": "array",
						"description": "Memory entries"
					},
					"count": {
						"type": "number",
						"format": "double",
						"description": "Total count"
					},
					"scope": {
						"type": "string",
						"enum": [
							"global",
							"local",
							"all"
						],
						"description": "Scope filter applied"
					}
				},
				"required": [
					"entries",
					"count"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Record_string.number_": {
				"properties": {},
				"additionalProperties": {
					"type": "number",
					"format": "double"
				},
				"type": "object",
				"description": "Construct a type with a set of properties K of type T"
			},
			"MemoryStatsResponse": {
				"description": "Memory statistics response",
				"properties": {
					"total": {
						"type": "number",
						"format": "double",
						"description": "Total memory entries"
					},
					"enabled": {
						"type": "number",
						"format": "double",
						"description": "Enabled entries"
					},
					"disabled": {
						"type": "number",
						"format": "double",
						"description": "Disabled entries"
					},
					"global": {
						"type": "number",
						"format": "double",
						"description": "Global entries"
					},
					"local": {
						"type": "number",
						"format": "double",
						"description": "Local entries"
					},
					"totalSize": {
						"type": "number",
						"format": "double",
						"description": "Total size in bytes"
					},
					"categories": {
						"$ref": "#/components/schemas/Record_string.number_",
						"description": "Categories breakdown"
					}
				},
				"required": [
					"total",
					"enabled",
					"disabled",
					"global",
					"local",
					"totalSize",
					"categories"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CreateMemoryResponse": {
				"description": "Create memory response",
				"properties": {
					"success": {
						"type": "boolean",
						"enum": [
							true
						],
						"nullable": false
					},
					"message": {
						"type": "string"
					},
					"entry": {
						"$ref": "#/components/schemas/MemoryEntry",
						"description": "Created memory entry"
					}
				},
				"required": [
					"success",
					"message",
					"entry"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CreateMemoryRequest": {
				"description": "Create memory request",
				"properties": {
					"filename": {
						"type": "string",
						"description": "File name (e.g., \"api-patterns.md\")"
					},
					"content": {
						"type": "string",
						"description": "Markdown content"
					},
					"scope": {
						"type": "string",
						"enum": [
							"global",
							"local"
						],
						"description": "Storage scope"
					},
					"category": {
						"type": "string",
						"description": "Optional category"
					},
					"tags": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "Optional tags"
					},
					"metadata": {
						"properties": {
							"autoGenerated": {
								"type": "boolean"
							},
							"taskId": {
								"type": "string"
							},
							"source": {
								"type": "string"
							}
						},
						"type": "object",
						"description": "Optional metadata"
					}
				},
				"required": [
					"filename",
					"content",
					"scope"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UpdateMemoryResponse": {
				"description": "Update memory response",
				"properties": {
					"success": {
						"type": "boolean",
						"enum": [
							true
						],
						"nullable": false
					},
					"message": {
						"type": "string"
					},
					"entry": {
						"$ref": "#/components/schemas/MemoryEntry",
						"description": "Updated memory entry"
					}
				},
				"required": [
					"success",
					"message",
					"entry"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UpdateMemoryRequest": {
				"description": "Update memory request",
				"properties": {
					"content": {
						"type": "string",
						"description": "Updated content"
					},
					"enabled": {
						"type": "boolean",
						"description": "Updated enabled status"
					},
					"tags": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "Updated tags"
					},
					"category": {
						"type": "string",
						"description": "Updated category"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"ToggleMemoryResponse": {
				"description": "Toggle memory response",
				"properties": {
					"success": {
						"type": "boolean",
						"enum": [
							true
						],
						"nullable": false
					},
					"message": {
						"type": "string"
					},
					"enabled": {
						"type": "boolean"
					}
				},
				"required": [
					"success",
					"message",
					"enabled"
				],
				"type": "object",
				"additionalProperties": false
			},
			"MemorySearchResult": {
				"description": "Memory search result",
				"properties": {
					"entry": {
						"$ref": "#/components/schemas/MemoryEntry",
						"description": "Memory entry"
					},
					"score": {
						"type": "number",
						"format": "double",
						"description": "Relevance score (0-1)"
					},
					"matches": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "Matched snippets"
					}
				},
				"required": [
					"entry",
					"score"
				],
				"type": "object",
				"additionalProperties": false
			},
			"MemorySearchResponse": {
				"description": "Memory search response",
				"properties": {
					"results": {
						"items": {
							"$ref": "#/components/schemas/MemorySearchResult"
						},
						"type": "array",
						"description": "Search results"
					},
					"count": {
						"type": "number",
						"format": "double",
						"description": "Total results"
					},
					"query": {
						"type": "string",
						"description": "Search query"
					}
				},
				"required": [
					"results",
					"count",
					"query"
				],
				"type": "object",
				"additionalProperties": false
			},
			"MemorySuggestion": {
				"description": "AI suggestion for memory creation",
				"properties": {
					"type": {
						"type": "string",
						"enum": [
							"repetition",
							"success",
							"error_fix",
							"best_practice"
						],
						"description": "Suggestion type"
					},
					"title": {
						"type": "string",
						"description": "Suggested title"
					},
					"reason": {
						"type": "string",
						"description": "Reason for suggestion"
					},
					"proposedContent": {
						"type": "string",
						"description": "Proposed content"
					},
					"confidence": {
						"type": "number",
						"format": "double",
						"description": "Confidence score (0-1)"
					}
				},
				"required": [
					"type",
					"title",
					"reason",
					"proposedContent",
					"confidence"
				],
				"type": "object",
				"additionalProperties": false
			},
			"MemorySuggestionsResponse": {
				"description": "Memory suggestions response",
				"properties": {
					"suggestions": {
						"items": {
							"$ref": "#/components/schemas/MemorySuggestion"
						},
						"type": "array",
						"description": "Suggestions"
					},
					"count": {
						"type": "number",
						"format": "double",
						"description": "Total suggestions"
					}
				},
				"required": [
					"suggestions",
					"count"
				],
				"type": "object",
				"additionalProperties": false
			},
			"McpServerListResponse": {
				"properties": {
					"servers": {
						"items": {},
						"type": "array"
					},
					"total": {
						"type": "number",
						"format": "double"
					},
					"message": {
						"type": "string"
					}
				},
				"required": [
					"servers",
					"total"
				],
				"type": "object",
				"additionalProperties": false
			},
			"McpMarketplaceResponse": {
				"properties": {
					"catalog": {
						"properties": {
							"items": {
								"items": {},
								"type": "array"
							}
						},
						"required": [
							"items"
						],
						"type": "object"
					}
				},
				"required": [
					"catalog"
				],
				"type": "object",
				"additionalProperties": false
			},
			"InstallMcpResponse": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"mcpId": {
						"type": "string"
					},
					"message": {
						"type": "string"
					}
				},
				"required": [
					"success",
					"mcpId",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"InstallMcpRequest": {
				"properties": {
					"mcpId": {
						"type": "string"
					}
				},
				"required": [
					"mcpId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"LogEntry": {
				"description": "A single log entry with timestamp",
				"properties": {
					"timestamp": {
						"type": "string"
					},
					"message": {
						"type": "string"
					}
				},
				"required": [
					"timestamp",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"LogsResponse": {
				"description": "Response containing log entries",
				"properties": {
					"logs": {
						"items": {
							"$ref": "#/components/schemas/LogEntry"
						},
						"type": "array"
					},
					"totalInBuffer": {
						"type": "number",
						"format": "double"
					},
					"maxBufferSize": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"logs",
					"totalInBuffer",
					"maxBufferSize"
				],
				"type": "object",
				"additionalProperties": false
			},
			"HealthCheckResponse": {
				"description": "Health check response",
				"properties": {
					"status": {
						"type": "string",
						"enum": [
							"ok",
							"error"
						],
						"description": "Server health status"
					},
					"version": {
						"type": "string",
						"description": "API version"
					},
					"uptime": {
						"type": "number",
						"format": "double",
						"description": "Server uptime in seconds"
					},
					"activeConnections": {
						"type": "number",
						"format": "double",
						"description": "Number of active WebSocket connections"
					},
					"port": {
						"type": "number",
						"format": "double",
						"description": "Server port"
					}
				},
				"required": [
					"status",
					"version",
					"uptime",
					"activeConnections",
					"port"
				],
				"type": "object",
				"additionalProperties": false
			},
			"FileEntry": {
				"properties": {
					"path": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"type": {
						"type": "string",
						"enum": [
							"file",
							"directory"
						]
					},
					"size": {
						"type": "number",
						"format": "double"
					},
					"created": {
						"type": "string"
					},
					"modified": {
						"type": "string"
					},
					"children": {
						"items": {
							"$ref": "#/components/schemas/FileEntry"
						},
						"type": "array"
					}
				},
				"required": [
					"path",
					"name",
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ListFilesResponse": {
				"properties": {
					"files": {
						"items": {
							"$ref": "#/components/schemas/FileEntry"
						},
						"type": "array"
					},
					"total": {
						"type": "number",
						"format": "double"
					},
					"workspace": {
						"type": "string"
					},
					"truncated": {
						"type": "boolean"
					},
					"limitReached": {
						"type": "boolean"
					}
				},
				"required": [
					"files",
					"total",
					"workspace",
					"truncated",
					"limitReached"
				],
				"type": "object",
				"additionalProperties": false
			},
			"FileContent": {
				"properties": {
					"path": {
						"type": "string"
					},
					"content": {
						"type": "string"
					},
					"size": {
						"type": "number",
						"format": "double"
					},
					"error": {
						"type": "string"
					},
					"success": {
						"type": "boolean"
					}
				},
				"required": [
					"path",
					"success"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ReadFilesResponse": {
				"properties": {
					"files": {
						"items": {
							"$ref": "#/components/schemas/FileContent"
						},
						"type": "array"
					},
					"workspace": {
						"type": "string"
					}
				},
				"required": [
					"files",
					"workspace"
				],
				"type": "object",
				"additionalProperties": false
			},
			"WorkspaceInfoResponse": {
				"properties": {
					"path": {
						"type": "string"
					},
					"exists": {
						"type": "boolean"
					},
					"mode": {
						"type": "string"
					},
					"customInstructions": {
						"type": "string"
					}
				},
				"required": [
					"exists"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Record_string.any_": {
				"properties": {},
				"additionalProperties": {},
				"type": "object",
				"description": "Construct a type with a set of properties K of type T"
			},
			"OpenAPISpec": {
				"description": "OpenAPI Specification (subset for typing)",
				"properties": {
					"openapi": {
						"type": "string"
					},
					"info": {
						"properties": {
							"description": {
								"type": "string"
							},
							"version": {
								"type": "string"
							},
							"title": {
								"type": "string"
							}
						},
						"additionalProperties": {},
						"required": [
							"description",
							"version",
							"title"
						],
						"type": "object"
					},
					"paths": {
						"$ref": "#/components/schemas/Record_string.any_"
					},
					"components": {
						"$ref": "#/components/schemas/Record_string.any_"
					}
				},
				"required": [
					"openapi",
					"info",
					"paths"
				],
				"type": "object",
				"additionalProperties": {}
			},
			"CommandListItem": {
				"properties": {
					"name": {
						"type": "string"
					},
					"source": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"argumentHint": {
						"type": "string"
					},
					"filePath": {
						"type": "string"
					},
					"content": {
						"type": "string"
					}
				},
				"required": [
					"name",
					"source",
					"filePath"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CommandsListResponse": {
				"properties": {
					"commands": {
						"items": {
							"$ref": "#/components/schemas/CommandListItem"
						},
						"type": "array"
					},
					"total": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"commands",
					"total"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CommandNamesResponse": {
				"properties": {
					"names": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"total": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"names",
					"total"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CommandDetails": {
				"properties": {
					"name": {
						"type": "string"
					},
					"source": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"argumentHint": {
						"type": "string"
					},
					"filePath": {
						"type": "string"
					},
					"content": {
						"type": "string"
					}
				},
				"required": [
					"name",
					"source",
					"filePath",
					"content"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CreateCommandResponse": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"command": {
						"$ref": "#/components/schemas/CommandDetails"
					}
				},
				"required": [
					"success",
					"command"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CreateCommandRequest": {
				"properties": {
					"name": {
						"type": "string"
					},
					"content": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"argumentHint": {
						"type": "string"
					}
				},
				"required": [
					"name",
					"content"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UpdateCommandResponse": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"command": {
						"$ref": "#/components/schemas/CommandDetails"
					}
				},
				"required": [
					"success",
					"command"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UpdateCommandRequest": {
				"properties": {
					"content": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"argumentHint": {
						"type": "string"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"DeleteCommandResponse": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ExecuteSlashCommandResponse": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"taskId": {
						"type": "string"
					},
					"commandName": {
						"type": "string"
					},
					"commandSource": {
						"type": "string"
					}
				},
				"required": [
					"success",
					"taskId",
					"commandName",
					"commandSource"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ExecuteSlashCommandRequest": {
				"properties": {
					"args": {
						"type": "string"
					},
					"mode": {
						"type": "string"
					},
					"images": {
						"items": {
							"type": "string"
						},
						"type": "array"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"ValidateCommandResponse": {
				"properties": {
					"valid": {
						"type": "boolean"
					},
					"frontmatter": {
						"$ref": "#/components/schemas/Record_string.any_"
					},
					"contentPreview": {
						"type": "string"
					},
					"contentLength": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"valid",
					"frontmatter",
					"contentPreview",
					"contentLength"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ValidateCommandRequest": {
				"properties": {
					"content": {
						"type": "string"
					}
				},
				"required": [
					"content"
				],
				"type": "object",
				"additionalProperties": false
			},
			"IndexStatusResponse": {
				"properties": {
					"status": {
						"type": "string"
					},
					"message": {
						"type": "string"
					}
				},
				"required": [
					"status"
				],
				"type": "object",
				"additionalProperties": {}
			},
			"IndexOperationResponse": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"IndexConfigResponse": {
				"properties": {
					"config": {},
					"models": {}
				},
				"required": [
					"config",
					"models"
				],
				"type": "object",
				"additionalProperties": false
			}
		},
		"securitySchemes": {
			"bearer": {
				"type": "http",
				"scheme": "bearer",
				"bearerFormat": "JWT"
			}
		}
	},
	"info": {
		"title": "Hoody Code API",
		"version": "1.0.0",
		"description": "REST API for Hoody Code VSCode Extension - Remote control and integration interface",
		"license": {
			"name": "Apache-2.0"
		},
		"contact": {
			"name": "Hoody Code",
			"url": "https://hoody.com"
		}
	},
	"paths": {
		"/todos/{taskId}": {
			"get": {
				"operationId": "GetTodoList",
				"responses": {
					"200": {
						"description": "TODO list retrieved",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TodoListResponse"
								}
							}
						}
					},
					"404": {
						"description": "Task not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiErrorResponse"
								}
							}
						}
					}
				},
				"description": "Get TODO list for a task",
				"summary": "Get TODO list",
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": [
					{
						"description": "Task ID",
						"in": "path",
						"name": "taskId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"post": {
				"operationId": "CreateTodo",
				"responses": {
					"201": {
						"description": "TODO created",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CreateTodoResponse"
								}
							}
						}
					},
					"404": {
						"description": "Task not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiErrorResponse"
								}
							}
						}
					}
				},
				"description": "Create a new TODO item",
				"summary": "Create TODO",
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": [
					{
						"description": "Task ID",
						"in": "path",
						"name": "taskId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateTodoRequest"
							}
						}
					}
				}
			}
		},
		"/todos/{taskId}/{todoId}": {
			"patch": {
				"operationId": "UpdateTodo",
				"responses": {
					"200": {
						"description": "TODO updated",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UpdateTodoResponse"
								}
							}
						}
					},
					"404": {
						"description": "Task or TODO not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiErrorResponse"
								}
							}
						}
					}
				},
				"description": "Update a TODO item",
				"summary": "Update TODO",
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": [
					{
						"description": "Task ID",
						"in": "path",
						"name": "taskId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "TODO ID",
						"in": "path",
						"name": "todoId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpdateTodoRequest"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "DeleteTodo",
				"responses": {
					"204": {
						"description": "TODO deleted"
					},
					"404": {
						"description": "Task or TODO not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiErrorResponse"
								}
							}
						}
					}
				},
				"description": "Delete a TODO item",
				"summary": "Delete TODO",
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": [
					{
						"description": "Task ID",
						"in": "path",
						"name": "taskId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "TODO ID",
						"in": "path",
						"name": "todoId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/todos/{taskId}/bulk": {
			"post": {
				"operationId": "BulkUpdateTodos",
				"responses": {
					"200": {
						"description": "TODO list replaced",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BulkUpdateTodosResponse"
								}
							}
						}
					},
					"404": {
						"description": "Task not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiErrorResponse"
								}
							}
						}
					}
				},
				"description": "Replace entire TODO list",
				"summary": "Replace TODO list",
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": [
					{
						"description": "Task ID",
						"in": "path",
						"name": "taskId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/BulkUpdateTodosRequest"
							}
						}
					}
				}
			}
		},
		"/todos/{taskId}/import": {
			"post": {
				"operationId": "ImportTodos",
				"responses": {
					"200": {
						"description": "TODOs imported",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ImportTodosResponse"
								}
							}
						}
					},
					"400": {
						"description": "Invalid markdown format",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Task not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiErrorResponse"
								}
							}
						}
					}
				},
				"description": "Import TODOs from markdown checklist",
				"summary": "Import from markdown",
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": [
					{
						"description": "Task ID",
						"in": "path",
						"name": "taskId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ImportTodosRequest"
							}
						}
					}
				}
			}
		},
		"/todos/{taskId}/export": {
			"get": {
				"operationId": "ExportTodos",
				"responses": {
					"200": {
						"description": "TODOs exported",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"count": {
											"type": "number",
											"format": "double"
										},
										"markdown": {
											"type": "string"
										}
									},
									"required": [
										"count",
										"markdown"
									],
									"type": "object"
								}
							}
						}
					},
					"404": {
						"description": "Task not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiErrorResponse"
								}
							}
						}
					}
				},
				"description": "Export TODO list as markdown checklist",
				"summary": "Export to markdown",
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": [
					{
						"description": "Task ID",
						"in": "path",
						"name": "taskId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/terminal/execute": {
			"post": {
				"operationId": "ExecuteCommand",
				"responses": {
					"200": {
						"description": "Command execution initiated",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ExecuteCommandResponse"
								}
							}
						}
					}
				},
				"description": "Execute a terminal command",
				"summary": "Execute terminal command",
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ExecuteCommandRequest"
							}
						}
					}
				}
			}
		},
		"/terminal/info": {
			"get": {
				"operationId": "GetTerminalInfo",
				"responses": {
					"200": {
						"description": "Terminal info retrieved",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TerminalInfoResponse"
								}
							}
						}
					}
				},
				"description": "Get terminal configuration information",
				"summary": "Get terminal configuration",
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": []
			}
		},
		"/tasks": {
			"post": {
				"operationId": "CreateTask",
				"responses": {
					"201": {
						"description": "Task created",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CreateTaskResponse"
								}
							}
						}
					}
				},
				"description": "Create a new task",
				"summary": "Create task",
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateTaskRequest"
							}
						}
					}
				}
			},
			"get": {
				"operationId": "ListTasks",
				"responses": {
					"200": {
						"description": "Tasks listed",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TaskListResponse"
								}
							}
						}
					}
				},
				"description": "List all tasks from history with filtering, sorting, and pagination",
				"summary": "List tasks",
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": [
					{
						"description": "Page number (default: 1)",
						"in": "query",
						"name": "page",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "Items per page (default: 50, max: 500)",
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "Sort order (newest, oldest, cost, tokens)",
						"in": "query",
						"name": "sort",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Filter by workspace (current, all, or specific path)",
						"in": "query",
						"name": "workspace",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Filter favorites only (true/false)",
						"in": "query",
						"name": "favorites",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Filter by mode",
						"in": "query",
						"name": "mode",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Filter from date (ISO 8601)",
						"in": "query",
						"name": "dateFrom",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Filter to date (ISO 8601)",
						"in": "query",
						"name": "dateTo",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Search in task text",
						"in": "query",
						"name": "search",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Include last message (raw and parsed) for each task (default: false)",
						"in": "query",
						"name": "includeLastMessage",
						"required": false,
						"schema": {
							"type": "boolean"
						}
					}
				]
			}
		},
		"/tasks/{taskId}": {
			"get": {
				"operationId": "GetTask",
				"responses": {
					"200": {
						"description": "Task retrieved",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TaskDetailsResponse"
								}
							}
						}
					}
				},
				"description": "Get task details with conversation history",
				"summary": "Get task by ID",
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": [
					{
						"description": "Task ID",
						"in": "path",
						"name": "taskId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Include parsed UI messages (default: false for backwards compatibility)",
						"in": "query",
						"name": "includeParsed",
						"required": false,
						"schema": {
							"type": "boolean"
						}
					}
				]
			},
			"delete": {
				"operationId": "DeleteTask",
				"responses": {
					"204": {
						"description": "Task deleted"
					}
				},
				"description": "Delete a task permanently",
				"summary": "Delete task",
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": [
					{
						"description": "Task ID",
						"in": "path",
						"name": "taskId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/tasks/{taskId}/switch": {
			"post": {
				"operationId": "SwitchTask",
				"responses": {
					"200": {
						"description": "Task switched",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SwitchTaskResponse"
								}
							}
						}
					}
				},
				"description": "Switch to a task (make it current/active)",
				"summary": "Switch to task",
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": [
					{
						"description": "Task ID",
						"in": "path",
						"name": "taskId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/tasks/{taskId}/resume": {
			"post": {
				"operationId": "ResumeTask",
				"responses": {
					"200": {
						"description": "Task resumed",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ResumeTaskResponse"
								}
							}
						}
					}
				},
				"description": "Resume a paused task",
				"summary": "Resume task",
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": [
					{
						"description": "Task ID",
						"in": "path",
						"name": "taskId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/tasks/{taskId}/respond": {
			"post": {
				"operationId": "RespondToTask",
				"responses": {
					"200": {
						"description": "Response sent",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RespondToTaskResponse"
								}
							}
						}
					}
				},
				"description": "Send a response/message to a task",
				"summary": "Respond to task",
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": [
					{
						"description": "Task ID",
						"in": "path",
						"name": "taskId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/RespondToTaskRequest"
							}
						}
					}
				}
			}
		},
		"/tasks/{taskId}/cancel": {
			"post": {
				"operationId": "CancelTask",
				"responses": {
					"200": {
						"description": "Task cancelled",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CancelTaskResponse"
								}
							}
						}
					}
				},
				"description": "Cancel the currently active task",
				"summary": "Cancel task",
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": [
					{
						"description": "Task ID",
						"in": "path",
						"name": "taskId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/tasks/{taskId}/favorite": {
			"post": {
				"operationId": "ToggleFavorite",
				"responses": {
					"200": {
						"description": "Favorite toggled",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ToggleFavoriteResponse"
								}
							}
						}
					}
				},
				"description": "Toggle task favorite status",
				"summary": "Toggle favorite",
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": [
					{
						"description": "Task ID",
						"in": "path",
						"name": "taskId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/tasks/{taskId}/export": {
			"post": {
				"operationId": "ExportTask",
				"responses": {
					"200": {
						"description": "Task exported",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ExportTaskResponse"
								}
							}
						}
					}
				},
				"description": "Export task to Markdown file",
				"summary": "Export task",
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": [
					{
						"description": "Task ID",
						"in": "path",
						"name": "taskId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/tasks/{taskId}/condense": {
			"post": {
				"operationId": "CondenseTask",
				"responses": {
					"200": {
						"description": "Task condensed",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CondenseTaskResponse"
								}
							}
						}
					}
				},
				"description": "Condense task context (advanced feature)",
				"summary": "Condense task",
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": [
					{
						"description": "Task ID",
						"in": "path",
						"name": "taskId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/tasks/{taskId}/queue": {
			"get": {
				"operationId": "GetMessageQueue",
				"responses": {
					"200": {
						"description": "Queue retrieved",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/MessageQueueResponse"
								}
							}
						}
					}
				},
				"description": "Get task's message queue",
				"summary": "Get message queue",
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": [
					{
						"description": "Task ID",
						"in": "path",
						"name": "taskId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"post": {
				"operationId": "AddToQueue",
				"responses": {
					"201": {
						"description": "Message added to queue",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AddToQueueResponse"
								}
							}
						}
					}
				},
				"description": "Add message to task's queue",
				"summary": "Add to queue",
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": [
					{
						"description": "Task ID",
						"in": "path",
						"name": "taskId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AddToQueueRequest"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "ClearMessageQueue",
				"responses": {
					"200": {
						"description": "Queue cleared",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ClearQueueResponse"
								}
							}
						}
					}
				},
				"description": "Clear all queued messages",
				"summary": "Clear message queue",
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": [
					{
						"description": "Task ID",
						"in": "path",
						"name": "taskId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/tasks/{taskId}/queue/{messageId}": {
			"put": {
				"operationId": "UpdateQueuedMessage",
				"responses": {
					"200": {
						"description": "Message updated",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UpdateQueueMessageResponse"
								}
							}
						}
					}
				},
				"description": "Update a queued message",
				"summary": "Update queued message",
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": [
					{
						"description": "Task ID",
						"in": "path",
						"name": "taskId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Message ID",
						"in": "path",
						"name": "messageId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpdateQueueMessageRequest"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "DeleteQueuedMessage",
				"responses": {
					"204": {
						"description": "Message deleted"
					}
				},
				"description": "Delete a queued message",
				"summary": "Delete queued message",
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": [
					{
						"description": "Task ID",
						"in": "path",
						"name": "taskId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Message ID",
						"in": "path",
						"name": "messageId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/tasks/batch": {
			"delete": {
				"operationId": "BatchDeleteTasks",
				"responses": {
					"200": {
						"description": "Batch delete completed",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BatchDeleteResponse"
								}
							}
						}
					}
				},
				"description": "Delete multiple tasks in batch",
				"summary": "Batch delete tasks",
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/BatchDeleteRequest"
							}
						}
					}
				}
			}
		},
		"/tasks/{taskId}/checkpoints": {
			"get": {
				"operationId": "ListCheckpoints",
				"responses": {
					"200": {
						"description": "Checkpoints listed",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CheckpointListResponse"
								}
							}
						}
					}
				},
				"description": "List all checkpoints for a task",
				"summary": "List checkpoints",
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": [
					{
						"description": "Task ID",
						"in": "path",
						"name": "taskId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/tasks/{taskId}/checkpoints/restore": {
			"post": {
				"operationId": "RestoreCheckpoint",
				"responses": {
					"200": {
						"description": "Checkpoint restored",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RestoreCheckpointResponse"
								}
							}
						}
					}
				},
				"description": "Restore task to a specific checkpoint (rollback)",
				"summary": "Restore checkpoint",
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": [
					{
						"description": "Task ID",
						"in": "path",
						"name": "taskId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/RestoreCheckpointRequest"
							}
						}
					}
				}
			}
		},
		"/tasks/{taskId}/checkpoints/{hash}/diff": {
			"get": {
				"operationId": "GetCheckpointDiff",
				"responses": {
					"200": {
						"description": "Diff retrieved",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CheckpointDiffResponse"
								}
							}
						}
					}
				},
				"description": "Get diff/changes for a checkpoint",
				"summary": "Get checkpoint diff",
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": [
					{
						"description": "Task ID",
						"in": "path",
						"name": "taskId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Checkpoint hash",
						"in": "path",
						"name": "hash",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/state": {
			"get": {
				"operationId": "GetState",
				"responses": {
					"200": {
						"description": "State retrieved successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApplicationState"
								}
							}
						}
					},
					"500": {
						"description": "Internal server error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiErrorResponse"
								}
							}
						}
					}
				},
				"description": "Get complete application state\n\nReturns the entire extension state including tasks, history, settings, and configuration.\nSecrets (like API keys) are automatically redacted for security.",
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": []
			}
		},
		"/state/config": {
			"get": {
				"operationId": "GetConfig",
				"responses": {
					"200": {
						"description": "Configuration retrieved successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ConfigurationResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal server error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiErrorResponse"
								}
							}
						}
					}
				},
				"description": "Get configuration subset\n\nReturns a lighter subset of the state focusing on user-configurable settings.\nThis is more efficient than fetching the complete state when you only need configuration.",
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": []
			},
			"patch": {
				"operationId": "UpdateConfig",
				"responses": {
					"200": {
						"description": "Configuration updated successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ConfigurationUpdateResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad request - Invalid configuration",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal server error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiErrorResponse"
								}
							}
						}
					}
				},
				"description": "Update configuration\n\nAllows partial updates to mode, API configuration, and custom instructions.\nOnly the fields provided in the request will be updated.",
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "Configuration update request",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ConfigurationUpdateRequest",
								"description": "Configuration update request"
							}
						}
					}
				}
			}
		},
		"/state/modes": {
			"get": {
				"operationId": "GetModes",
				"responses": {
					"200": {
						"description": "Modes retrieved successfully",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/ModeInfo"
									},
									"type": "array"
								}
							}
						}
					},
					"500": {
						"description": "Internal server error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiErrorResponse"
								}
							}
						}
					}
				},
				"description": "List available modes\n\nReturns all modes that the user can switch to (e.g., code, architect, ask, debug).\nEach mode has different capabilities and behavior optimized for specific tasks.",
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": []
			}
		},
		"/settings": {
			"get": {
				"operationId": "GetSettings",
				"responses": {
					"200": {
						"description": "Settings retrieved successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ExtensionSettings"
								}
							}
						}
					},
					"500": {
						"description": "Internal server error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiErrorResponse"
								}
							}
						}
					}
				},
				"description": "Get all settings\n\nReturns all extension settings with secrets redacted for security.",
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": []
			},
			"patch": {
				"operationId": "UpdateSettings",
				"responses": {
					"200": {
						"description": "Settings updated successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SettingsUpdateResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad request - Invalid settings object",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal server error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiErrorResponse"
								}
							}
						}
					}
				},
				"description": "Update settings\n\nAllows partial updates to extension settings. Only the fields provided\nin the request will be updated.",
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "Settings update request with key-value pairs",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/SettingsUpdateRequest",
								"description": "Settings update request with key-value pairs"
							}
						}
					}
				}
			}
		},
		"/settings/auto-approval": {
			"get": {
				"operationId": "GetAutoApproval",
				"responses": {
					"200": {
						"description": "Auto-approval settings retrieved successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AutoApprovalSettings"
								}
							}
						}
					},
					"500": {
						"description": "Internal server error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiErrorResponse"
								}
							}
						}
					}
				},
				"description": "Get auto-approval configuration\n\nReturns the current auto-approval settings that control which operations\ncan be executed without explicit user confirmation.",
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": []
			},
			"put": {
				"operationId": "UpdateAutoApproval",
				"responses": {
					"200": {
						"description": "Auto-approval settings updated successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SettingsUpdateResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad request - Invalid auto-approval settings",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal server error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiErrorResponse"
								}
							}
						}
					}
				},
				"description": "Update auto-approval configuration\n\nUpdates which operations can be auto-approved without user confirmation.",
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "Auto-approval settings update",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AutoApprovalSettings",
								"description": "Auto-approval settings update"
							}
						}
					}
				}
			}
		},
		"/settings/terminal": {
			"get": {
				"operationId": "GetTerminalSettings",
				"responses": {
					"200": {
						"description": "Terminal settings retrieved successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TerminalSettings"
								}
							}
						}
					},
					"500": {
						"description": "Internal server error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiErrorResponse"
								}
							}
						}
					}
				},
				"description": "Get terminal settings\n\nReturns configuration for terminal behavior including output limits,\nshell integration, and terminal-specific features.",
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": []
			}
		},
		"/settings/browser": {
			"get": {
				"operationId": "GetBrowserSettings",
				"responses": {
					"200": {
						"description": "Browser settings retrieved successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BrowserSettings"
								}
							}
						}
					},
					"500": {
						"description": "Internal server error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiErrorResponse"
								}
							}
						}
					}
				},
				"description": "Get browser settings\n\nReturns configuration for browser automation features including\nviewport size, screenshot quality, and remote browser settings.",
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": []
			}
		},
		"/prompts/types": {
			"get": {
				"operationId": "GetPromptTypes",
				"responses": {
					"200": {
						"description": "Prompt types retrieved",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PromptTypesResponse"
								}
							}
						}
					}
				},
				"description": "List all available prompt types with metadata",
				"summary": "List prompt types",
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": []
			}
		},
		"/prompts": {
			"get": {
				"operationId": "GetAllPrompts",
				"responses": {
					"200": {
						"description": "Prompts retrieved",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PromptsListResponse"
								}
							}
						}
					}
				},
				"description": "Get all current prompt templates (custom + defaults)",
				"summary": "Get all prompts",
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": []
			},
			"delete": {
				"operationId": "ResetAllPrompts",
				"responses": {
					"200": {
						"description": "All prompts reset to defaults",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ResetAllPromptsResponse"
								}
							}
						}
					}
				},
				"description": "Reset all prompts to defaults",
				"summary": "Reset all prompts",
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": []
			}
		},
		"/prompts/{type}": {
			"get": {
				"operationId": "GetPrompt",
				"responses": {
					"200": {
						"description": "Prompt retrieved",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PromptDetailsResponse"
								}
							}
						}
					}
				},
				"description": "Get a specific prompt template",
				"summary": "Get prompt by type",
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": [
					{
						"description": "Prompt type (e.g., ENHANCE, FIX, EXPLAIN)",
						"in": "path",
						"name": "type",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"put": {
				"operationId": "UpdatePrompt",
				"responses": {
					"200": {
						"description": "Prompt updated",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UpdatePromptResponse"
								}
							}
						}
					}
				},
				"description": "Update a specific prompt template",
				"summary": "Update prompt",
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": [
					{
						"description": "Prompt type",
						"in": "path",
						"name": "type",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpdatePromptRequest"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "ResetPrompt",
				"responses": {
					"200": {
						"description": "Prompt reset to default",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ResetPromptResponse"
								}
							}
						}
					}
				},
				"description": "Reset a specific prompt to default",
				"summary": "Reset prompt to default",
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": [
					{
						"description": "Prompt type",
						"in": "path",
						"name": "type",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/prompts/execute": {
			"post": {
				"operationId": "ExecutePrompt",
				"responses": {
					"200": {
						"description": "Prompt executed or formatted",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ExecutePromptResponse"
								}
							}
						}
					}
				},
				"description": "Execute a prompt template with parameters",
				"summary": "Execute prompt",
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ExecutePromptRequest"
							}
						}
					}
				}
			}
		},
		"/profiles": {
			"get": {
				"operationId": "ListProfiles",
				"responses": {
					"200": {
						"description": "Profiles retrieved successfully",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/ProfileListItem"
									},
									"type": "array"
								}
							}
						}
					},
					"500": {
						"description": "Internal server error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiErrorResponse"
								}
							}
						}
					}
				},
				"description": "List all configured provider profiles",
				"summary": "Get all profiles",
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": []
			},
			"post": {
				"operationId": "CreateProfile",
				"responses": {
					"201": {
						"description": "Profile created successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CreateProfileResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad request - Invalid input or profile already exists",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal server error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiErrorResponse"
								}
							}
						}
					}
				},
				"description": "Create a new profile",
				"summary": "Create profile",
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "Profile creation request with name and configuration",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateProfileRequest",
								"description": "Profile creation request with name and configuration"
							}
						}
					}
				}
			}
		},
		"/profiles/{nameOrId}": {
			"get": {
				"operationId": "GetProfile",
				"responses": {
					"200": {
						"description": "Profile retrieved successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ProfileDetails"
								}
							}
						}
					},
					"400": {
						"description": "Bad request",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Profile not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal server error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiErrorResponse"
								}
							}
						}
					}
				},
				"description": "Get a specific profile by name or ID",
				"summary": "Get profile details",
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": [
					{
						"description": "Profile name or ID",
						"in": "path",
						"name": "nameOrId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/profiles/{name}": {
			"put": {
				"operationId": "UpdateProfile",
				"responses": {
					"200": {
						"description": "Profile updated successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UpdateProfileResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad request",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Profile not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal server error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiErrorResponse"
								}
							}
						}
					}
				},
				"description": "Update an existing profile",
				"summary": "Update profile",
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": [
					{
						"description": "Profile name to update",
						"in": "path",
						"name": "name",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "Profile update request with new configuration",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpdateProfileRequest",
								"description": "Profile update request with new configuration"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "DeleteProfile",
				"responses": {
					"200": {
						"description": "Profile deleted successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/DeleteProfileResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad request - Cannot delete last profile",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Profile not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal server error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiErrorResponse"
								}
							}
						}
					}
				},
				"description": "Delete a profile",
				"summary": "Delete profile",
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": [
					{
						"description": "Profile name to delete",
						"in": "path",
						"name": "name",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/profiles/{nameOrId}/activate": {
			"post": {
				"operationId": "ActivateProfile",
				"responses": {
					"200": {
						"description": "Profile activated successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ActivateProfileResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad request",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Profile not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal server error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiErrorResponse"
								}
							}
						}
					}
				},
				"description": "Activate a profile (make it the current one)",
				"summary": "Activate profile",
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": [
					{
						"description": "Profile name or ID to activate",
						"in": "path",
						"name": "nameOrId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/profiles/modes/{mode}": {
			"get": {
				"operationId": "GetModeProfile",
				"responses": {
					"200": {
						"description": "Mode profile retrieved successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ModeProfileResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad request",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "No profile assigned to mode",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal server error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiErrorResponse"
								}
							}
						}
					}
				},
				"description": "Get the profile assigned to a specific mode",
				"summary": "Get mode's profile",
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": [
					{
						"description": "Mode slug (e.g., 'code', 'architect', 'ask')",
						"in": "path",
						"name": "mode",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"put": {
				"operationId": "SetModeProfile",
				"responses": {
					"200": {
						"description": "Profile assigned to mode successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SetModeProfileResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad request",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Profile or mode not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal server error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiErrorResponse"
								}
							}
						}
					}
				},
				"description": "Assign a profile to a specific mode",
				"summary": "Set mode's profile",
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": [
					{
						"description": "Mode slug to configure",
						"in": "path",
						"name": "mode",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "Profile assignment request (profileId or profileName)",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/SetModeProfileRequest",
								"description": "Profile assignment request (profileId or profileName)"
							}
						}
					}
				}
			}
		},
		"/memory-bank": {
			"get": {
				"operationId": "ListMemories",
				"responses": {
					"200": {
						"description": "Memory entries listed",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/MemoryListResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal server error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiErrorResponse"
								}
							}
						}
					}
				},
				"description": "List all memory entries",
				"summary": "List memory entries",
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": [
					{
						"description": "Filter by scope (global, local, all)",
						"in": "query",
						"name": "scope",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"global",
								"local",
								"all"
							]
						}
					},
					{
						"description": "Filter by enabled status",
						"in": "query",
						"name": "enabled",
						"required": false,
						"schema": {
							"type": "boolean"
						}
					},
					{
						"description": "Filter by category",
						"in": "query",
						"name": "category",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"post": {
				"operationId": "CreateMemory",
				"responses": {
					"201": {
						"description": "Memory entry created",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CreateMemoryResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad request",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "Memory entry already exists",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiErrorResponse"
								}
							}
						}
					}
				},
				"description": "Create new memory entry",
				"summary": "Create memory",
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateMemoryRequest"
							}
						}
					}
				}
			}
		},
		"/memory-bank/stats": {
			"get": {
				"operationId": "GetStats",
				"responses": {
					"200": {
						"description": "Statistics retrieved",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/MemoryStatsResponse"
								}
							}
						}
					}
				},
				"description": "Get memory bank statistics",
				"summary": "Get statistics",
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": []
			}
		},
		"/memory-bank/{id}": {
			"get": {
				"operationId": "GetMemory",
				"responses": {
					"200": {
						"description": "Memory entry retrieved",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/MemoryEntry"
								}
							}
						}
					},
					"404": {
						"description": "Memory entry not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiErrorResponse"
								}
							}
						}
					}
				},
				"description": "Get specific memory entry",
				"summary": "Get memory entry",
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": [
					{
						"description": "Memory ID or path",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"patch": {
				"operationId": "UpdateMemory",
				"responses": {
					"200": {
						"description": "Memory entry updated",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UpdateMemoryResponse"
								}
							}
						}
					},
					"404": {
						"description": "Memory entry not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiErrorResponse"
								}
							}
						}
					}
				},
				"description": "Update memory entry",
				"summary": "Update memory",
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": [
					{
						"description": "Memory ID or path",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpdateMemoryRequest"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "DeleteMemory",
				"responses": {
					"204": {
						"description": "Memory entry deleted"
					},
					"404": {
						"description": "Memory entry not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiErrorResponse"
								}
							}
						}
					}
				},
				"description": "Delete memory entry",
				"summary": "Delete memory",
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": [
					{
						"description": "Memory ID or path",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/memory-bank/{id}/toggle": {
			"post": {
				"operationId": "ToggleMemory",
				"responses": {
					"200": {
						"description": "Memory entry toggled",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ToggleMemoryResponse"
								}
							}
						}
					},
					"404": {
						"description": "Memory entry not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiErrorResponse"
								}
							}
						}
					}
				},
				"description": "Toggle memory entry enabled status",
				"summary": "Toggle memory",
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": [
					{
						"description": "Memory ID or path",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/memory-bank/search": {
			"post": {
				"operationId": "SearchMemories",
				"responses": {
					"200": {
						"description": "Search completed",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/MemorySearchResponse"
								}
							}
						}
					}
				},
				"description": "Search memory entries",
				"summary": "Search memories",
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"scope": {
										"type": "string",
										"enum": [
											"global",
											"local",
											"all"
										]
									},
									"query": {
										"type": "string"
									}
								},
								"required": [
									"query"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/memory-bank/suggest": {
			"post": {
				"operationId": "GetSuggestions",
				"responses": {
					"200": {
						"description": "Suggestions generated",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/MemorySuggestionsResponse"
								}
							}
						}
					}
				},
				"description": "Get AI-powered memory suggestions",
				"summary": "Get suggestions",
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"context": {
										"type": "string"
									},
									"taskId": {
										"type": "string"
									}
								},
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/mcp/servers": {
			"get": {
				"operationId": "ListServers",
				"responses": {
					"200": {
						"description": "Servers retrieved",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/McpServerListResponse"
								}
							}
						}
					}
				},
				"description": "List all MCP servers",
				"summary": "List MCP servers",
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": []
			}
		},
		"/mcp/servers/{serverName}": {
			"get": {
				"operationId": "GetServer",
				"responses": {
					"200": {
						"description": "Server retrieved",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"description": "Get specific MCP server details",
				"summary": "Get MCP server by name",
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": [
					{
						"description": "The name of the MCP server",
						"in": "path",
						"name": "serverName",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/mcp/marketplace": {
			"get": {
				"operationId": "GetMarketplace",
				"responses": {
					"200": {
						"description": "Marketplace catalog retrieved",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/McpMarketplaceResponse"
								}
							}
						}
					}
				},
				"description": "Get MCP marketplace catalog",
				"summary": "Get marketplace catalog",
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": [
					{
						"description": "Force refresh from API (default: false)",
						"in": "query",
						"name": "refresh",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/mcp/marketplace/install": {
			"post": {
				"operationId": "InstallPackage",
				"responses": {
					"200": {
						"description": "Installation initiated",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InstallMcpResponse"
								}
							}
						}
					}
				},
				"description": "Install MCP package from marketplace",
				"summary": "Install MCP package",
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/InstallMcpRequest"
							}
						}
					}
				}
			}
		},
		"/logs": {
			"get": {
				"operationId": "GetLogs",
				"responses": {
					"200": {
						"description": "Recent log entries with timestamps",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LogsResponse"
								}
							}
						}
					}
				},
				"description": "Get recent logs from the output channel",
				"tags": [
					"Logs"
				],
				"security": [],
				"parameters": []
			}
		},
		"/health": {
			"get": {
				"operationId": "HealthCheck",
				"responses": {
					"200": {
						"description": "Server is healthy",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HealthCheckResponse"
								}
							}
						}
					}
				},
				"description": "Health check endpoint",
				"summary": "Check server health",
				"security": [],
				"parameters": []
			}
		},
		"/version": {
			"get": {
				"operationId": "GetVersion",
				"responses": {
					"200": {
						"description": "Version information retrieved",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"apiVersion": {
											"type": "string"
										},
										"name": {
											"type": "string"
										},
										"version": {
											"type": "string"
										}
									},
									"required": [
										"apiVersion",
										"name",
										"version"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Get API version information",
				"summary": "Get version info",
				"security": [],
				"parameters": []
			}
		},
		"/files": {
			"get": {
				"operationId": "ListFiles",
				"responses": {
					"200": {
						"description": "Files listed successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ListFilesResponse"
								}
							}
						}
					}
				},
				"description": "List files and directories within the workspace",
				"summary": "List workspace files",
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": [
					{
						"description": "Directory path relative to workspace root (default: \".\")",
						"in": "query",
						"name": "dirPath",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "If true, lists contents recursively (default: false)",
						"in": "query",
						"name": "recursive",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/files/read": {
			"get": {
				"operationId": "ReadFiles",
				"responses": {
					"200": {
						"description": "Files read successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ReadFilesResponse"
								}
							}
						}
					}
				},
				"description": "Read the content of one or more files",
				"summary": "Read file contents",
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": [
					{
						"description": "Single file path or comma-separated list of file paths",
						"in": "query",
						"name": "filePath",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/workspace": {
			"get": {
				"operationId": "GetWorkspaceInfo",
				"responses": {
					"200": {
						"description": "Workspace info retrieved",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/WorkspaceInfoResponse"
								}
							}
						}
					}
				},
				"description": "Get basic information about the current workspace",
				"summary": "Get workspace info",
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": []
			}
		},
		"/openapi/spec.json": {
			"get": {
				"operationId": "GetOpenAPISpec",
				"responses": {
					"200": {
						"description": "OpenAPI specification retrieved successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/OpenAPISpec"
								}
							}
						}
					}
				},
				"description": "Get OpenAPI specification\n\nReturns the complete OpenAPI 3.0 specification in JSON format.\nThis spec is auto-generated from TypeScript code via tsoa.\nUse this endpoint for API discovery, client SDK generation, or documentation tools.",
				"security": [],
				"parameters": []
			}
		},
		"/commands": {
			"get": {
				"operationId": "ListCommands",
				"responses": {
					"200": {
						"description": "Commands listed successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CommandsListResponse"
								}
							}
						}
					}
				},
				"description": "List all available slash commands from all sources",
				"summary": "List all commands",
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": [
					{
						"description": "Filter by source (built-in | global | project)",
						"in": "query",
						"name": "source",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Include full command content (default: false)",
						"in": "query",
						"name": "includeContent",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"post": {
				"operationId": "CreateCommand",
				"responses": {
					"201": {
						"description": "Command created",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CreateCommandResponse"
								}
							}
						}
					}
				},
				"description": "Create or update a project-level slash command",
				"summary": "Create command",
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateCommandRequest"
							}
						}
					}
				}
			}
		},
		"/commands/names": {
			"get": {
				"operationId": "GetCommandNames",
				"responses": {
					"200": {
						"description": "Command names retrieved",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CommandNamesResponse"
								}
							}
						}
					}
				},
				"description": "Get list of command names for autocomplete",
				"summary": "Get command names",
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": []
			}
		},
		"/commands/{name}": {
			"get": {
				"operationId": "GetCommand",
				"responses": {
					"200": {
						"description": "Command retrieved",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CommandDetails"
								}
							}
						}
					}
				},
				"description": "Get a specific slash command by name",
				"summary": "Get command by name",
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": [
					{
						"description": "Command name",
						"in": "path",
						"name": "name",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"put": {
				"operationId": "UpdateCommand",
				"responses": {
					"200": {
						"description": "Command updated",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UpdateCommandResponse"
								}
							}
						}
					}
				},
				"description": "Update an existing project-level slash command",
				"summary": "Update command",
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": [
					{
						"description": "Command name",
						"in": "path",
						"name": "name",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpdateCommandRequest"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "DeleteCommand",
				"responses": {
					"200": {
						"description": "Command deleted",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/DeleteCommandResponse"
								}
							}
						}
					}
				},
				"description": "Delete a project-level slash command",
				"summary": "Delete command",
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": [
					{
						"description": "Command name",
						"in": "path",
						"name": "name",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/commands/{name}/execute": {
			"post": {
				"operationId": "ExecuteCommand",
				"responses": {
					"201": {
						"description": "Command executed",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ExecuteSlashCommandResponse"
								}
							}
						}
					}
				},
				"description": "Execute a slash command by creating a task",
				"summary": "Execute command",
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": [
					{
						"description": "Command name",
						"in": "path",
						"name": "name",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ExecuteSlashCommandRequest"
							}
						}
					}
				}
			}
		},
		"/commands/{name}/validate": {
			"post": {
				"operationId": "ValidateCommand",
				"responses": {
					"200": {
						"description": "Command validated",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidateCommandResponse"
								}
							}
						}
					}
				},
				"description": "Validate command content without executing",
				"summary": "Validate command",
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": [
					{
						"description": "Command name",
						"in": "path",
						"name": "name",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ValidateCommandRequest"
							}
						}
					}
				}
			}
		},
		"/codeindex/status": {
			"get": {
				"operationId": "GetStatus",
				"responses": {
					"200": {
						"description": "Index status retrieved",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IndexStatusResponse"
								}
							}
						}
					}
				},
				"description": "Get current indexing status",
				"summary": "Get code index status",
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": []
			}
		},
		"/codeindex/start": {
			"post": {
				"operationId": "StartIndexing",
				"responses": {
					"200": {
						"description": "Indexing started",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IndexOperationResponse"
								}
							}
						}
					}
				},
				"description": "Start indexing the workspace",
				"summary": "Start code indexing",
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": []
			}
		},
		"/codeindex/cancel": {
			"post": {
				"operationId": "CancelIndexing",
				"responses": {
					"200": {
						"description": "Indexing cancelled",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IndexOperationResponse"
								}
							}
						}
					}
				},
				"description": "Cancel ongoing indexing",
				"summary": "Cancel code indexing",
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": []
			}
		},
		"/codeindex": {
			"delete": {
				"operationId": "ClearIndex",
				"responses": {
					"200": {
						"description": "Index cleared",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IndexOperationResponse"
								}
							}
						}
					}
				},
				"description": "Clear the code index",
				"summary": "Clear code index",
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": []
			}
		},
		"/codeindex/config": {
			"get": {
				"operationId": "GetConfig",
				"responses": {
					"200": {
						"description": "Config retrieved",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IndexConfigResponse"
								}
							}
						}
					}
				},
				"description": "Get code index configuration",
				"summary": "Get code index config",
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": []
			}
		}
	},
	"servers": [
		{
			"url": "/"
		}
	],
	"tags": [
		{
			"name": "Health",
			"description": "Server health and status endpoints"
		},
		{
			"name": "State",
			"description": "Application state and configuration"
		},
		{
			"name": "Profiles",
			"description": "AI provider profile management"
		},
		{
			"name": "Modes",
			"description": "Mode management and configuration"
		},
		{
			"name": "Tasks",
			"description": "Task creation and lifecycle management"
		},
		{
			"name": "Files",
			"description": "File operations and workspace access"
		},
		{
			"name": "MCP",
			"description": "Model Context Protocol server integration"
		},
		{
			"name": "Terminal",
			"description": "Terminal command execution"
		},
		{
			"name": "CodeIndex",
			"description": "Code search and semantic indexing"
		},
		{
			"name": "Settings",
			"description": "Extension settings management"
		},
		{
			"name": "Commands",
			"description": "Slash command templates"
		},
		{
			"name": "Prompts",
			"description": "Support prompt templates"
		}
	]
}