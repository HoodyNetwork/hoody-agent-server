{
	"openapi": "3.0.0",
	"components": {
		"examples": {},
		"headers": {},
		"parameters": {},
		"requestBodies": {},
		"responses": {},
		"schemas": {
			"TodoStatus": {
				"type": "string",
				"enum": ["pending", "in_progress", "completed"],
				"description": "TODO item status"
			},
			"TodoItem": {
				"description": "TODO item",
				"properties": {
					"id": { "type": "string", "description": "Unique TODO ID" },
					"content": { "type": "string", "description": "TODO content/description" },
					"status": { "$ref": "#/components/schemas/TodoStatus", "description": "TODO status" }
				},
				"required": ["id", "content", "status"],
				"type": "object"
			},
			"TodoListResponse": {
				"description": "TODO list response",
				"properties": {
					"taskId": { "type": "string", "description": "Task ID" },
					"todos": {
						"items": { "$ref": "#/components/schemas/TodoItem" },
						"type": "array",
						"description": "TODO items"
					},
					"count": { "type": "number", "description": "Total count" },
					"stats": {
						"properties": {
							"pending": { "type": "number" },
							"inProgress": { "type": "number" },
							"completed": { "type": "number" },
							"total": { "type": "number" }
						},
						"required": ["pending", "inProgress", "completed", "total"],
						"type": "object",
						"description": "Statistics"
					}
				},
				"required": ["taskId", "todos", "count", "stats"],
				"type": "object"
			},
			"ApiErrorResponse": {
				"description": "API Error response",
				"properties": {
					"error": { "type": "string", "description": "Error type/category" },
					"message": { "type": "string", "description": "Human-readable error message" },
					"code": { "type": "string", "description": "Machine-readable error code" },
					"statusCode": { "type": "number", "description": "HTTP status code" }
				},
				"required": ["error"],
				"type": "object",
				"example": {
					"error": "Not Found",
					"message": "Profile 'my-profile' not found",
					"code": "PROFILE_NOT_FOUND"
				}
			},
			"CreateTodoResponse": {
				"description": "Create TODO response",
				"properties": {
					"success": { "type": "boolean", "enum": [true] },
					"message": { "type": "string" },
					"todo": { "$ref": "#/components/schemas/TodoItem", "description": "Created TODO item" }
				},
				"required": ["success", "message", "todo"],
				"type": "object"
			},
			"CreateTodoRequest": {
				"description": "Create TODO request",
				"properties": {
					"content": { "type": "string", "description": "TODO content/description" },
					"status": {
						"$ref": "#/components/schemas/TodoStatus",
						"description": "Initial status (default: pending)"
					},
					"position": {
						"type": "number",
						"description": "Position to insert at (0-based index, default: append to end)"
					}
				},
				"required": ["content"],
				"type": "object"
			},
			"UpdateTodoResponse": {
				"description": "Update TODO response",
				"properties": {
					"success": { "type": "boolean", "enum": [true] },
					"message": { "type": "string" },
					"todo": { "$ref": "#/components/schemas/TodoItem", "description": "Updated TODO item" }
				},
				"required": ["success", "message", "todo"],
				"type": "object"
			},
			"UpdateTodoRequest": {
				"description": "Update TODO request",
				"properties": {
					"content": { "type": "string", "description": "Updated content" },
					"status": { "$ref": "#/components/schemas/TodoStatus", "description": "Updated status" }
				},
				"type": "object"
			},
			"BulkUpdateTodosResponse": {
				"description": "Bulk update TODOs response",
				"properties": {
					"success": { "type": "boolean", "enum": [true] },
					"message": { "type": "string" },
					"todos": {
						"items": { "$ref": "#/components/schemas/TodoItem" },
						"type": "array",
						"description": "Updated TODO list"
					}
				},
				"required": ["success", "message", "todos"],
				"type": "object"
			},
			"BulkUpdateTodosRequest": {
				"description": "Bulk update TODOs request",
				"properties": {
					"todos": {
						"items": { "$ref": "#/components/schemas/TodoItem" },
						"type": "array",
						"description": "Array of TODO items"
					}
				},
				"required": ["todos"],
				"type": "object"
			},
			"ImportTodosResponse": {
				"description": "Import TODOs response (deprecated - use bulk update instead)",
				"properties": {
					"success": { "type": "boolean", "enum": [true] },
					"message": { "type": "string" },
					"todos": {
						"items": { "$ref": "#/components/schemas/TodoItem" },
						"type": "array",
						"description": "Imported TODO items"
					}
				},
				"required": ["success", "message", "todos"],
				"type": "object",
				"deprecated": true
			},
			"ImportTodosRequest": {
				"description": "Import TODOs request (deprecated - use bulk update instead)",
				"properties": {
					"todos": {
						"items": { "$ref": "#/components/schemas/TodoItem" },
						"type": "array",
						"description": "Array of TODO items to import"
					}
				},
				"required": ["todos"],
				"type": "object",
				"deprecated": true
			},
			"ExportTodosResponse": {
				"description": "Export TODOs response",
				"properties": {
					"taskId": { "type": "string", "description": "Task ID" },
					"todos": {
						"items": { "$ref": "#/components/schemas/TodoItem" },
						"type": "array",
						"description": "TODO items"
					},
					"count": { "type": "number", "description": "Total count" },
					"stats": {
						"properties": {
							"pending": { "type": "number" },
							"inProgress": { "type": "number" },
							"completed": { "type": "number" },
							"total": { "type": "number" }
						},
						"required": ["pending", "inProgress", "completed", "total"],
						"type": "object",
						"description": "Statistics"
					}
				},
				"required": ["taskId", "todos", "count", "stats"],
				"type": "object"
			},
			"ExecuteCommandResponse": {
				"properties": {
					"success": { "type": "boolean" },
					"taskId": { "type": "string" },
					"message": { "type": "string" }
				},
				"required": ["success", "taskId", "message"],
				"type": "object"
			},
			"ExecuteCommandRequest": {
				"properties": { "command": { "type": "string" }, "cwd": { "type": "string" } },
				"required": ["command"],
				"type": "object"
			},
			"TerminalInfoResponse": {
				"properties": {
					"outputLineLimit": { "type": "number" },
					"outputCharacterLimit": { "type": "number" },
					"shellIntegrationTimeout": { "type": "number" },
					"shellIntegrationDisabled": { "type": "boolean" },
					"commandDelay": { "type": "number" },
					"compressProgressBar": { "type": "boolean" }
				},
				"type": "object"
			},
			"TaskContext": {
				"description": "Task context information included in responses",
				"properties": {
					"mode": { "type": "string" },
					"modelId": { "type": "string" },
					"modelProvider": { "type": "string" },
					"profileName": { "type": "string" }
				},
				"type": "object"
			},
			"CreateTaskResponse": {
				"properties": {
					"taskId": { "type": "string" },
					"status": { "type": "string" },
					"context": { "$ref": "#/components/schemas/TaskContext" }
				},
				"required": ["taskId", "status"],
				"type": "object"
			},
			"CreateTaskRequest": {
				"properties": {
					"text": { "type": "string" },
					"images": { "items": { "type": "string" }, "type": "array" },
					"mode": { "type": "string" }
				},
				"required": ["text"],
				"type": "object"
			},
			"TaskHierarchyMetadata": {
				"description": "Task hierarchy metadata computed from task relationships",
				"properties": {
					"isFork": {
						"type": "boolean",
						"description": "Whether this task is a fork (created via fork API from another task's message)"
					},
					"isSubtask": {
						"type": "boolean",
						"description": "Whether this task is a subtask (created via new_task tool during execution)"
					},
					"isRootTask": {
						"type": "boolean",
						"description": "Whether this is a root-level task (not a fork or subtask)"
					},
					"subtaskDepth": {
						"type": "number",
						"description": "Subtask depth in execution stack (0 = root, 1 = first subtask, etc.)"
					},
					"fork": {
						"properties": {
							"forkTimestamp": { "type": "number", "description": "When the fork was created" },
							"forkFromMessageTs": {
								"type": "number",
								"description": "Timestamp of message this was forked from"
							},
							"sourceTaskId": { "type": "string", "description": "Task ID this was forked from" }
						},
						"required": ["forkTimestamp", "forkFromMessageTs", "sourceTaskId"],
						"type": "object",
						"description": "Fork metadata (only present if isFork=true)"
					},
					"subtask": {
						"properties": {
							"rootTaskId": { "type": "string", "description": "Root task ID in the execution tree" },
							"parentTaskId": { "type": "string", "description": "Direct parent task ID" }
						},
						"required": ["rootTaskId", "parentTaskId"],
						"type": "object",
						"description": "Subtask metadata (only present if isSubtask=true)"
					}
				},
				"required": ["isFork", "isSubtask", "isRootTask", "subtaskDepth"],
				"type": "object"
			},
			"HistoryItemWithMetadata": {
				"description": "Extended HistoryItem with computed hierarchy and optional last message",
				"properties": {
					"id": { "type": "string" },
					"rootTaskId": { "type": "string" },
					"parentTaskId": { "type": "string" },
					"number": { "type": "number", "description": "Subtask depth: 1 = root task, 2+ = subtask levels." },
					"ts": { "type": "number" },
					"task": { "type": "string" },
					"tokensIn": { "type": "number" },
					"tokensOut": { "type": "number" },
					"cacheWrites": { "type": "number" },
					"cacheReads": { "type": "number" },
					"totalCost": { "type": "number" },
					"contextTokens": { "type": "number" },
					"size": { "type": "number" },
					"workspace": { "type": "string" },
					"isFavorited": { "type": "boolean" },
					"fileNotfound": { "type": "boolean" },
					"mode": { "type": "string" },
					"modelId": { "type": "string" },
					"modelProvider": { "type": "string" },
					"profileName": { "type": "string" },
					"sourceTaskId": { "type": "string", "description": "Fork tracking - task this was forked from" },
					"forkFromMessageTs": {
						"type": "number",
						"description": "Fork tracking - message timestamp we forked from"
					},
					"forkTimestamp": { "type": "number", "description": "Fork tracking - when the fork was created" },
					"status": {
						"type": "string",
						"enum": ["running", "interactive", "resumable", "idle", "completed"],
						"description": "Task status - reflects last known state"
					},
					"hierarchy": {
						"$ref": "#/components/schemas/TaskHierarchyMetadata",
						"description": "Computed task hierarchy and fork metadata"
					},
					"lastMessage": {
						"properties": {
							"parsed": { "description": "Parsed UI message format (JSON)" },
							"raw": { "description": "Raw API message format (with XML tool calls)" }
						},
						"type": "object",
						"description": "Last message if includeLastMessage=true"
					}
				},
				"required": ["id", "number", "ts", "task", "tokensIn", "tokensOut", "totalCost"],
				"type": "object"
			},
			"TaskListResponse": {
				"properties": {
					"data": { "items": { "$ref": "#/components/schemas/HistoryItemWithMetadata" }, "type": "array" },
					"pagination": {
						"properties": {
							"hasPrev": { "type": "boolean" },
							"hasNext": { "type": "boolean" },
							"totalPages": { "type": "number" },
							"total": { "type": "number" },
							"limit": { "type": "number" },
							"page": { "type": "number" }
						},
						"required": ["hasPrev", "hasNext", "totalPages", "total", "limit", "page"],
						"type": "object"
					},
					"links": {
						"properties": {
							"last": { "type": "string" },
							"first": { "type": "string" },
							"prev": { "type": "string", "nullable": true },
							"next": { "type": "string", "nullable": true },
							"self": { "type": "string" }
						},
						"required": ["last", "first", "prev", "next", "self"],
						"type": "object"
					}
				},
				"required": ["data", "pagination", "links"],
				"type": "object"
			},
			"ClineMessage": {
				"properties": {
					"metadata": {
						"properties": {
							"general": {
								"properties": {
									"cumulativeTokensOut": { "type": "number" },
									"cumulativeTokensIn": { "type": "number" },
									"cumulativeCost": { "type": "number" },
									"cost": { "type": "number" },
									"cacheReads": { "type": "number" },
									"cacheWrites": { "type": "number" },
									"tokensOut": { "type": "number" },
									"tokensIn": { "type": "number" },
									"mode": { "type": "string" },
									"profileId": { "type": "string" },
									"profileName": { "type": "string" },
									"provider": { "type": "string" },
									"modelId": { "type": "string" }
								},
								"type": "object"
							},
							"hoodyCode": {
								"properties": {
									"commitRange": {
										"properties": {
											"to": { "type": "string" },
											"fromTimeStamp": { "type": "number" },
											"from": { "type": "string" }
										},
										"required": ["to", "from"],
										"type": "object"
									}
								},
								"type": "object"
							},
							"gpt5": {
								"properties": {
									"reasoning_summary": { "type": "string" },
									"instructions": { "type": "string" },
									"previous_response_id": { "type": "string" }
								},
								"type": "object"
							}
						},
						"type": "object"
					},
					"digestMetadata": {
						"properties": {
							"maxLength": { "type": "number" },
							"tokensUsed": { "type": "number" },
							"profileId": { "type": "string" },
							"generatedAt": { "type": "number" }
						},
						"required": ["maxLength", "profileId", "generatedAt"],
						"type": "object"
					},
					"digest": { "type": "string" },
					"isAnswered": { "type": "boolean" },
					"apiProtocol": { "type": "string", "enum": ["openai", "anthropic"] },
					"isProtected": { "type": "boolean" },
					"contextCondense": {
						"properties": {
							"summary": { "type": "string" },
							"newContextTokens": { "type": "number" },
							"prevContextTokens": { "type": "number" },
							"cost": { "type": "number" }
						},
						"required": ["summary", "newContextTokens", "prevContextTokens", "cost"],
						"type": "object"
					},
					"progressStatus": {
						"properties": { "text": { "type": "string" }, "icon": { "type": "string" } },
						"type": "object"
					},
					"checkpoint": { "properties": {}, "type": "object" },
					"conversationHistoryIndex": { "type": "number" },
					"reasoning": { "type": "string" },
					"partial": { "type": "boolean" },
					"images": { "items": { "type": "string" }, "type": "array" },
					"text": { "type": "string" },
					"say": {
						"type": "string",
						"enum": [
							"error",
							"api_req_started",
							"api_req_finished",
							"api_req_retried",
							"api_req_retry_delayed",
							"api_req_deleted",
							"text",
							"image",
							"reasoning",
							"completion_result",
							"user_feedback",
							"user_feedback_diff",
							"command_output",
							"shell_integration_warning",
							"browser_action",
							"browser_action_result",
							"mcp_server_request_started",
							"mcp_server_response",
							"subtask_result",
							"checkpoint_saved",
							"rooignore_error",
							"diff_error",
							"condense_context",
							"condense_context_error",
							"codebase_search_result",
							"user_edit_todos"
						]
					},
					"ask": {
						"type": "string",
						"enum": [
							"followup",
							"command",
							"command_output",
							"completion_result",
							"tool",
							"api_req_failed",
							"resume_task",
							"resume_completed_task",
							"mistake_limit_reached",
							"browser_action_launch",
							"use_mcp_server",
							"auto_approval_max_req_reached",
							"payment_required_prompt",
							"invalid_model",
							"report_bug",
							"condense"
						]
					},
					"type": { "type": "string", "enum": ["ask", "say"] },
					"ts": { "type": "number" }
				},
				"required": ["type", "ts"],
				"type": "object",
				"description": "ClineMessage - Complete UI message structure\n\nThis is a discriminated union b..."
			},
			"TaskDetailsResponse": {
				"properties": {
					"historyItem": { "$ref": "#/components/schemas/HistoryItemWithMetadata" },
					"messages": {
						"items": {},
						"type": "array",
						"description": "Raw API messages in Anthropic/OpenAI XML format"
					},
					"uiMessages": {
						"items": { "$ref": "#/components/schemas/ClineMessage" },
						"type": "array",
						"description": "Parsed UI messages in ClineMessage JSON format - fully typed for OpenAPI gene..."
					},
					"context": { "$ref": "#/components/schemas/TaskContext" }
				},
				"required": ["historyItem"],
				"type": "object"
			},
			"ResumeTaskResponse": {
				"properties": {
					"success": { "type": "boolean" },
					"taskId": { "type": "string" },
					"status": { "type": "string" },
					"context": { "$ref": "#/components/schemas/TaskContext" }
				},
				"required": ["success", "taskId", "status"],
				"type": "object"
			},
			"RespondToTaskResponse": {
				"properties": {
					"success": { "type": "boolean" },
					"taskId": { "type": "string" },
					"response": { "type": "string" },
					"context": { "$ref": "#/components/schemas/TaskContext" }
				},
				"required": ["success", "taskId", "response"],
				"type": "object"
			},
			"RespondToTaskRequest": {
				"properties": {
					"response": {
						"type": "string",
						"description": "Response type:\n- \"approve\" or \"yes\" → Approve the current request (same as /r..."
					},
					"images": {
						"items": { "type": "string" },
						"type": "array",
						"description": "Optional images to include with response"
					},
					"text": { "type": "string", "description": "Optional text to include with denial (for context)" },
					"mode": {
						"type": "string",
						"description": "Temporary mode override for this request only (does not persist to task)"
					},
					"profileId": {
						"type": "string",
						"description": "Temporary profile override for this request only (does not persist to task)"
					}
				},
				"required": ["response"],
				"type": "object"
			},
			"CancelTaskResponse": {
				"properties": { "success": { "type": "boolean" }, "taskId": { "type": "string" } },
				"required": ["success", "taskId"],
				"type": "object"
			},
			"ToggleFavoriteResponse": {
				"properties": { "success": { "type": "boolean" }, "taskId": { "type": "string" } },
				"required": ["success", "taskId"],
				"type": "object"
			},
			"TaskExportData": {
				"description": "Complete task export data structure",
				"properties": {
					"historyItem": { "description": "Task metadata and history item" },
					"apiMessages": {
						"items": {},
						"type": "array",
						"description": "Raw API messages (Anthropic/OpenAI format)"
					},
					"uiMessages": {
						"items": { "$ref": "#/components/schemas/ClineMessage" },
						"type": "array",
						"description": "Parsed UI messages (ClineMessage format)"
					},
					"exportMetadata": {
						"properties": {
							"sourceTaskId": { "type": "string" },
							"exportVersion": { "type": "string" },
							"exportedAt": { "type": "number" }
						},
						"required": ["sourceTaskId", "exportVersion", "exportedAt"],
						"type": "object",
						"description": "Export metadata"
					}
				},
				"required": ["historyItem", "apiMessages", "uiMessages", "exportMetadata"],
				"type": "object"
			},
			"TaskExportJsonResponse": {
				"description": "Task JSON export response",
				"properties": {
					"success": { "type": "boolean" },
					"taskId": { "type": "string" },
					"data": { "$ref": "#/components/schemas/TaskExportData" }
				},
				"required": ["success", "taskId", "data"],
				"type": "object"
			},
			"ExportTaskResponse": {
				"properties": { "success": { "type": "boolean" }, "message": { "type": "string" } },
				"required": ["success", "message"],
				"type": "object"
			},
			"ImportTaskResponse": {
				"description": "Task import response",
				"properties": {
					"success": { "type": "boolean" },
					"taskId": { "type": "string" },
					"sourceTaskId": { "type": "string" },
					"message": { "type": "string" },
					"isActive": { "type": "boolean" }
				},
				"required": ["success", "taskId", "sourceTaskId", "message", "isActive"],
				"type": "object"
			},
			"ImportTaskRequest": {
				"description": "Task import request",
				"properties": {
					"data": {
						"$ref": "#/components/schemas/TaskExportData",
						"description": "Complete task data from export"
					},
					"makeActive": {
						"type": "boolean",
						"description": "Whether to make the imported task active (default: true)"
					},
					"mode": { "type": "string", "description": "Optional: Override mode for imported task" }
				},
				"required": ["data"],
				"type": "object"
			},
			"CondenseTaskResponse": {
				"properties": { "success": { "type": "boolean" }, "taskId": { "type": "string" } },
				"required": ["success", "taskId"],
				"type": "object"
			},
			"QueueMessage": {
				"properties": {
					"id": { "type": "string" },
					"text": { "type": "string" },
					"images": { "items": { "type": "string" }, "type": "array" }
				},
				"required": ["id", "text"],
				"type": "object"
			},
			"MessageQueueResponse": {
				"properties": {
					"taskId": { "type": "string" },
					"messages": { "items": { "$ref": "#/components/schemas/QueueMessage" }, "type": "array" },
					"count": { "type": "number" }
				},
				"required": ["taskId", "messages", "count"],
				"type": "object"
			},
			"AddToQueueResponse": {
				"properties": {
					"success": { "type": "boolean" },
					"taskId": { "type": "string" },
					"message": { "$ref": "#/components/schemas/QueueMessage" }
				},
				"required": ["success", "taskId", "message"],
				"type": "object"
			},
			"AddToQueueRequest": {
				"properties": {
					"text": { "type": "string" },
					"images": { "items": { "type": "string" }, "type": "array" }
				},
				"required": ["text"],
				"type": "object"
			},
			"UpdateQueueMessageResponse": {
				"properties": {
					"success": { "type": "boolean" },
					"taskId": { "type": "string" },
					"messageId": { "type": "string" }
				},
				"required": ["success", "taskId", "messageId"],
				"type": "object"
			},
			"UpdateQueueMessageRequest": {
				"properties": {
					"text": { "type": "string" },
					"images": { "items": { "type": "string" }, "type": "array" }
				},
				"required": ["text"],
				"type": "object"
			},
			"ClearQueueResponse": {
				"properties": {
					"success": { "type": "boolean" },
					"taskId": { "type": "string" },
					"cleared": { "type": "number" }
				},
				"required": ["success", "taskId", "cleared"],
				"type": "object"
			},
			"BatchDeleteResponse": {
				"properties": {
					"success": { "type": "boolean" },
					"deleted": { "type": "number" },
					"failed": { "type": "number" },
					"total": { "type": "number" }
				},
				"required": ["success", "deleted", "failed", "total"],
				"type": "object"
			},
			"BatchDeleteRequest": {
				"properties": { "taskIds": { "items": { "type": "string" }, "type": "array" } },
				"required": ["taskIds"],
				"type": "object"
			},
			"Checkpoint": {
				"properties": {
					"hash": { "type": "string" },
					"timestamp": { "type": "number" },
					"from": { "type": "string" },
					"to": { "type": "string" },
					"suppressMessage": { "type": "boolean" }
				},
				"required": ["hash", "timestamp"],
				"type": "object"
			},
			"CheckpointListResponse": {
				"properties": {
					"taskId": { "type": "string" },
					"checkpoints": { "items": { "$ref": "#/components/schemas/Checkpoint" }, "type": "array" },
					"count": { "type": "number" },
					"currentCheckpoint": { "type": "string" }
				},
				"required": ["taskId", "checkpoints", "count"],
				"type": "object"
			},
			"RestoreCheckpointResponse": {
				"properties": {
					"success": { "type": "boolean" },
					"taskId": { "type": "string" },
					"restoredToHash": { "type": "string" },
					"message": { "type": "string" }
				},
				"required": ["success", "taskId", "restoredToHash", "message"],
				"type": "object"
			},
			"RestoreCheckpointRequest": {
				"properties": { "hash": { "type": "string" } },
				"required": ["hash"],
				"type": "object"
			},
			"CheckpointDiffResponse": {
				"properties": {
					"taskId": { "type": "string" },
					"fromHash": { "type": "string" },
					"toHash": { "type": "string" },
					"changes": {
						"items": {
							"properties": {
								"after": { "type": "string" },
								"before": { "type": "string" },
								"path": { "type": "string" }
							},
							"required": ["after", "before", "path"],
							"type": "object"
						},
						"type": "array"
					}
				},
				"required": ["taskId", "fromHash", "changes"],
				"type": "object"
			},
			"ForkTaskResponse": {
				"properties": {
					"success": { "type": "boolean" },
					"forkedTaskId": { "type": "string" },
					"sourceTaskId": { "type": "string" },
					"forkFromMessageTs": { "type": "number" },
					"messagesIncluded": { "type": "number" },
					"isActive": { "type": "boolean" },
					"context": { "$ref": "#/components/schemas/TaskContext" }
				},
				"required": [
					"success",
					"forkedTaskId",
					"sourceTaskId",
					"forkFromMessageTs",
					"messagesIncluded",
					"isActive"
				],
				"type": "object"
			},
			"ForkTaskRequest": {
				"properties": {
					"messageTimestamp": { "type": "number" },
					"makeActive": { "type": "boolean" },
					"mode": { "type": "string" },
					"providerProfile": { "type": "string" }
				},
				"required": ["messageTimestamp"],
				"type": "object"
			},
			"EditMessageResponse": {
				"properties": {
					"success": { "type": "boolean" },
					"taskId": { "type": "string" },
					"messageTimestamp": { "type": "number" },
					"message": { "type": "string" }
				},
				"required": ["success", "taskId", "messageTimestamp", "message"],
				"type": "object"
			},
			"EditMessageRequest": {
				"properties": {
					"text": { "type": "string", "description": "Updated message text" },
					"images": {
						"items": { "type": "string" },
						"type": "array",
						"description": "Updated images (optional)"
					}
				},
				"required": ["text"],
				"type": "object"
			},
			"DigestMessageResponse": {
				"properties": {
					"success": { "type": "boolean" },
					"taskId": { "type": "string" },
					"messageTimestamp": { "type": "number" },
					"digest": { "type": "string" },
					"metadata": {
						"properties": {
							"maxLength": { "type": "number" },
							"tokensUsed": { "type": "number" },
							"profileId": { "type": "string" },
							"generatedAt": { "type": "number" }
						},
						"required": ["maxLength", "profileId", "generatedAt"],
						"type": "object"
					}
				},
				"required": ["success", "taskId", "messageTimestamp", "digest", "metadata"],
				"type": "object"
			},
			"DigestMessageRequest": {
				"properties": {
					"maxLength": {
						"type": "number",
						"description": "Maximum digest length in characters (20-500, default: from settings)"
					},
					"profileId": {
						"type": "string",
						"description": "AI profile ID to use for digest generation (default: from settings)"
					},
					"force": { "type": "boolean", "description": "Force regeneration even if digest exists" }
				},
				"type": "object"
			},
			"ToggleTaskDigestResponse": {
				"properties": {
					"success": { "type": "boolean" },
					"taskId": { "type": "string" },
					"settings": {
						"properties": {
							"profileId": { "type": "string" },
							"maxLength": { "type": "number" },
							"enabled": { "type": "boolean" }
						},
						"required": ["enabled"],
						"type": "object"
					}
				},
				"required": ["success", "taskId", "settings"],
				"type": "object"
			},
			"ToggleTaskDigestRequest": {
				"properties": {
					"enabled": { "type": "boolean", "description": "Enable or disable digest for this task" },
					"maxLength": { "type": "number", "description": "Override max length for this task" },
					"profileId": { "type": "string", "description": "Override profile ID for this task" }
				},
				"required": ["enabled"],
				"type": "object"
			},
			"UpdateTaskModeResponse": {
				"description": "Task mode update response",
				"properties": {
					"success": { "type": "boolean" },
					"taskId": { "type": "string" },
					"mode": { "type": "string" },
					"profileId": { "type": "string" },
					"message": { "type": "string" },
					"context": { "$ref": "#/components/schemas/TaskContext" }
				},
				"required": ["success", "taskId", "mode", "message"],
				"type": "object"
			},
			"UpdateTaskModeRequest": {
				"description": "Task mode update request",
				"properties": {
					"mode": { "type": "string", "description": "New mode for this task (persists to history)" },
					"profileId": {
						"type": "string",
						"description": "Optional: also change task's profile (persists to history)"
					}
				},
				"required": ["mode"],
				"type": "object"
			},
			"ApplicationState": {
				"description": "Complete application state",
				"properties": {
					"_metadata": {
						"properties": {
							"timestamp": { "type": "number", "description": "Server timestamp" },
							"displayedTaskId": {
								"type": "string",
								"description": "Task currently displayed in UI (if any)"
							},
							"currentProvider": { "type": "string", "description": "Current provider" },
							"currentModel": { "type": "string", "description": "Current model ID" },
							"currentProfile": { "type": "string", "description": "Current profile name" },
							"currentMode": { "type": "string", "description": "Current mode" }
						},
						"required": ["timestamp"],
						"type": "object",
						"description": "Current context metadata"
					}
				},
				"type": "object"
			},
			"ConfigurationResponse": {
				"description": "Configuration subset response",
				"properties": {
					"mode": { "type": "string" },
					"apiConfiguration": {},
					"currentApiConfigName": { "type": "string" },
					"customInstructions": { "type": "string" }
				},
				"type": "object"
			},
			"ConfigurationUpdateResponse": {
				"description": "Configuration update response",
				"properties": { "success": { "type": "boolean", "enum": [true] } },
				"required": ["success"],
				"type": "object"
			},
			"ConfigurationUpdateRequest": {
				"description": "Configuration update request",
				"properties": {
					"mode": { "type": "string" },
					"apiConfiguration": {},
					"customInstructions": { "type": "string" }
				},
				"type": "object"
			},
			"ModeInfo": {
				"description": "Mode information",
				"properties": {
					"slug": { "type": "string" },
					"name": { "type": "string" },
					"roleDefinition": { "type": "string" },
					"groups": { "items": { "type": "string" }, "type": "array" },
					"isActive": { "type": "boolean", "description": "Whether this mode is currently active" },
					"assignedProfileId": { "type": "string", "description": "Profile ID assigned to this mode" },
					"assignedProfileName": { "type": "string", "description": "Profile name assigned to this mode" },
					"assignedProfileConfig": {
						"description": "Full profile configuration (only included when includeProfileConfig=true, wit..."
					}
				},
				"required": ["slug", "name"],
				"type": "object"
			},
			"CurrentModelInfo": {
				"description": "Current model information",
				"properties": {
					"provider": { "type": "string" },
					"modelId": { "type": "string" },
					"modelInfo": {
						"properties": {
							"description": { "type": "string" },
							"cacheReadsPrice": { "type": "number" },
							"cacheWritesPrice": { "type": "number" },
							"outputPrice": { "type": "number" },
							"inputPrice": { "type": "number" },
							"supportsPromptCache": { "type": "boolean" },
							"supportsImages": { "type": "boolean" },
							"contextWindow": { "type": "number" },
							"maxTokens": { "type": "number" }
						},
						"type": "object"
					}
				},
				"required": ["provider", "modelId"],
				"type": "object"
			},
			"GlobalSettings": {
				"description": "Complete Global Settings\nIncludes all extension settings (100+ fields) includ...",
				"properties": {
					"currentApiConfigName": { "type": "string" },
					"listApiConfigMeta": {
						"items": {
							"properties": {
								"modelId": { "type": "string" },
								"apiProvider": {
									"type": "string",
									"enum": [
										"openrouter",
										"vercel-ai-gateway",
										"huggingface",
										"litellm",
										"hoodycode-openrouter",
										"ovhcloud",
										"chutes",
										"deepinfra",
										"io-intelligence",
										"requesty",
										"unbound",
										"glama",
										"ollama",
										"lmstudio",
										"vscode-lm",
										"openai",
										"fake-ai",
										"human-relay",
										"anthropic",
										"bedrock",
										"cerebras",
										"claude-code",
										"doubao",
										"deepseek",
										"featherless",
										"fireworks",
										"gemini",
										"gemini-cli",
										"groq",
										"mistral",
										"moonshot",
										"openai-native",
										"qwen-code",
										"roo",
										"hoodycode",
										"virtual-quota-fallback",
										"synthetic",
										"sambanova",
										"vertex",
										"xai",
										"zai"
									]
								},
								"name": { "type": "string" },
								"id": { "type": "string" }
							},
							"required": ["name", "id"],
							"type": "object"
						},
						"type": "array"
					},
					"pinnedApiConfigs": { "properties": {}, "type": "object" },
					"lastShownAnnouncementId": { "type": "string" },
					"customInstructions": { "type": "string" },
					"taskHistory": {
						"items": {
							"properties": {
								"status": {
									"type": "string",
									"enum": ["running", "interactive", "resumable", "idle", "completed"]
								},
								"forkTimestamp": { "type": "number" },
								"forkFromMessageTs": { "type": "number" },
								"sourceTaskId": { "type": "string" },
								"profileName": { "type": "string" },
								"modelProvider": { "type": "string" },
								"modelId": { "type": "string" },
								"mode": { "type": "string" },
								"fileNotfound": { "type": "boolean" },
								"isFavorited": { "type": "boolean" },
								"workspace": { "type": "string" },
								"size": { "type": "number" },
								"contextTokens": { "type": "number" },
								"totalCost": { "type": "number" },
								"cacheReads": { "type": "number" },
								"cacheWrites": { "type": "number" },
								"tokensOut": { "type": "number" },
								"tokensIn": { "type": "number" },
								"task": { "type": "string" },
								"ts": { "type": "number" },
								"number": { "type": "number" },
								"parentTaskId": { "type": "string" },
								"rootTaskId": { "type": "string" },
								"id": { "type": "string" }
							},
							"required": ["totalCost", "tokensOut", "tokensIn", "task", "ts", "number", "id"],
							"type": "object"
						},
						"type": "array"
					},
					"dismissedUpsells": { "items": { "type": "string" }, "type": "array" },
					"openRouterImageApiKey": { "type": "string" },
					"openRouterImageGenerationSelectedModel": { "type": "string" },
					"hoodyCodeImageApiKey": { "type": "string" },
					"condensingApiConfigId": { "type": "string" },
					"customCondensingPrompt": { "type": "string" },
					"digestEnabled": { "type": "boolean" },
					"digestProfileId": { "type": "string" },
					"autoDigestEnabled": { "type": "boolean" },
					"digestMaxLength": { "type": "number" },
					"customDigestPrompt": { "type": "string" },
					"digestTaskOverrides": { "properties": {}, "type": "object" },
					"autoApprovalEnabled": { "type": "boolean" },
					"alwaysAllowReadOnly": { "type": "boolean" },
					"alwaysAllowReadOnlyOutsideWorkspace": { "type": "boolean" },
					"alwaysAllowWrite": { "type": "boolean" },
					"alwaysAllowWriteOutsideWorkspace": { "type": "boolean" },
					"alwaysAllowWriteProtected": { "type": "boolean" },
					"writeDelayMs": { "type": "number" },
					"alwaysAllowBrowser": { "type": "boolean" },
					"alwaysApproveResubmit": { "type": "boolean" },
					"requestDelaySeconds": { "type": "number" },
					"alwaysAllowMcp": { "type": "boolean" },
					"alwaysAllowModeSwitch": { "type": "boolean" },
					"alwaysAllowSubtasks": { "type": "boolean" },
					"alwaysAllowExecute": { "type": "boolean" },
					"alwaysAllowFollowupQuestions": { "type": "boolean" },
					"followupAutoApproveTimeoutMs": { "type": "number" },
					"alwaysAllowUpdateTodoList": { "type": "boolean" },
					"allowedCommands": { "items": { "type": "string" }, "type": "array" },
					"deniedCommands": { "items": { "type": "string" }, "type": "array" },
					"commandExecutionTimeout": { "type": "number" },
					"commandTimeoutAllowlist": { "items": { "type": "string" }, "type": "array" },
					"preventCompletionWithOpenTodos": { "type": "boolean" },
					"allowedMaxRequests": { "type": "number", "nullable": true },
					"allowedMaxCost": { "type": "number", "nullable": true },
					"autoCondenseContext": { "type": "boolean" },
					"autoCondenseContextPercent": { "type": "number" },
					"maxConcurrentFileReads": { "type": "number" },
					"allowVeryLargeReads": { "type": "boolean" },
					"includeDiagnosticMessages": { "type": "boolean" },
					"maxDiagnosticMessages": { "type": "number" },
					"browserToolEnabled": { "type": "boolean" },
					"browserViewportSize": { "type": "string" },
					"showAutoApproveMenu": { "type": "boolean" },
					"showTaskTimeline": { "type": "boolean" },
					"showTimestamps": { "type": "boolean" },
					"hideCostBelowThreshold": { "type": "number" },
					"localWorkflowToggles": { "properties": {}, "type": "object" },
					"globalWorkflowToggles": { "properties": {}, "type": "object" },
					"localRulesToggles": { "properties": {}, "type": "object" },
					"globalRulesToggles": { "properties": {}, "type": "object" },
					"screenshotQuality": { "type": "number" },
					"remoteBrowserEnabled": { "type": "boolean" },
					"remoteBrowserHost": { "type": "string" },
					"cachedChromeHostUrl": { "type": "string" },
					"enableCheckpoints": { "type": "boolean" },
					"ttsEnabled": { "type": "boolean" },
					"ttsSpeed": { "type": "number" },
					"soundEnabled": { "type": "boolean" },
					"soundVolume": { "type": "number" },
					"systemNotificationsEnabled": { "type": "boolean" },
					"maxOpenTabsContext": { "type": "number" },
					"maxWorkspaceFiles": { "type": "number" },
					"showRooIgnoredFiles": { "type": "boolean" },
					"maxReadFileLine": { "type": "number" },
					"maxImageFileSize": { "type": "number" },
					"maxTotalImageSize": { "type": "number" },
					"terminalOutputLineLimit": { "type": "number" },
					"terminalOutputCharacterLimit": { "type": "number" },
					"terminalShellIntegrationTimeout": { "type": "number" },
					"terminalShellIntegrationDisabled": { "type": "boolean" },
					"terminalCommandDelay": { "type": "number" },
					"terminalPowershellCounter": { "type": "boolean" },
					"terminalZshClearEolMark": { "type": "boolean" },
					"terminalZshOhMy": { "type": "boolean" },
					"terminalZshP10k": { "type": "boolean" },
					"terminalZdotdir": { "type": "boolean" },
					"terminalCompressProgressBar": { "type": "boolean" },
					"diagnosticsEnabled": { "type": "boolean" },
					"rateLimitSeconds": { "type": "number" },
					"diffEnabled": { "type": "boolean" },
					"fuzzyMatchThreshold": { "type": "number" },
					"experiments": {
						"properties": {
							"runSlashCommand": { "type": "boolean" },
							"imageGeneration": { "type": "boolean" },
							"preventFocusDisruption": { "type": "boolean" },
							"multiFileApplyDiff": { "type": "boolean" },
							"powerSteering": { "type": "boolean" },
							"morphFastApply": { "type": "boolean" }
						},
						"type": "object"
					},
					"morphApiKey": { "type": "string" },
					"fastApplyModel": {
						"type": "string",
						"enum": ["auto", "morph/morph-v3-fast", "morph/morph-v3-large", "relace/relace-apply-3"]
					},
					"codebaseIndexModels": {
						"properties": {
							"vercel-ai-gateway": { "properties": {}, "type": "object" },
							"mistral": { "properties": {}, "type": "object" },
							"gemini": { "properties": {}, "type": "object" },
							"openai-compatible": { "properties": {}, "type": "object" },
							"ollama": { "properties": {}, "type": "object" },
							"openai": { "properties": {}, "type": "object" }
						},
						"type": "object"
					},
					"codebaseIndexConfig": {
						"properties": {
							"codebaseIndexOpenAiCompatibleModelDimension": { "type": "number" },
							"codebaseIndexOpenAiCompatibleBaseUrl": { "type": "string" },
							"codebaseIndexSearchMaxResults": { "type": "number" },
							"codebaseIndexSearchMinScore": { "type": "number" },
							"codebaseIndexEmbedderModelDimension": { "type": "number" },
							"codebaseIndexEmbedderModelId": { "type": "string" },
							"codebaseIndexEmbedderBaseUrl": { "type": "string" },
							"codebaseIndexEmbedderProvider": {
								"type": "string",
								"enum": [
									"openai",
									"ollama",
									"openai-compatible",
									"gemini",
									"mistral",
									"vercel-ai-gateway"
								]
							},
							"codebaseIndexQdrantUrl": { "type": "string" },
							"codebaseIndexEnabled": { "type": "boolean" }
						},
						"type": "object"
					},
					"language": {
						"type": "string",
						"enum": [
							"ar",
							"cs",
							"th",
							"uk",
							"ca",
							"de",
							"en",
							"es",
							"fr",
							"hi",
							"id",
							"it",
							"ja",
							"ko",
							"nl",
							"pl",
							"pt-BR",
							"ru",
							"tr",
							"vi",
							"zh-CN",
							"zh-TW"
						]
					},
					"telemetrySetting": { "type": "string", "enum": ["unset", "enabled", "disabled"] },
					"mcpEnabled": { "type": "boolean" },
					"enableMcpServerCreation": { "type": "boolean" },
					"mcpMarketplaceCatalog": {},
					"mode": { "type": "string" },
					"modeApiConfigs": { "properties": {}, "type": "object" },
					"customModes": { "items": {}, "type": "array" },
					"customModePrompts": { "properties": {}, "type": "object" },
					"customSupportPrompts": { "properties": {}, "type": "object" },
					"enhancementApiConfigId": { "type": "string" },
					"dismissedNotificationIds": { "items": { "type": "string" }, "type": "array" },
					"commitMessageApiConfigId": { "type": "string" },
					"terminalCommandApiConfigId": { "type": "string" },
					"ghostServiceSettings": {
						"properties": {
							"showGutterAnimation": { "type": "boolean" },
							"enableSmartInlineTaskKeybinding": { "type": "boolean" },
							"enableQuickInlineTaskKeybinding": { "type": "boolean" },
							"autoTriggerDelay": { "type": "number" },
							"enableAutoTrigger": { "type": "boolean" }
						},
						"type": "object"
					},
					"includeTaskHistoryInEnhance": { "type": "boolean" },
					"historyPreviewCollapsed": { "type": "boolean" },
					"reasoningBlockCollapsed": { "type": "boolean" },
					"profileThresholds": { "properties": {}, "type": "object" },
					"hasOpenedModeSelector": { "type": "boolean" },
					"lastModeExportPath": { "type": "string" },
					"lastModeImportPath": { "type": "string" }
				},
				"type": "object"
			},
			"ExtensionSettings": {
				"$ref": "#/components/schemas/GlobalSettings",
				"description": "Extension settings (alias for GlobalSettings)\nUsed by SettingsController for..."
			},
			"SettingsUpdateResponse": {
				"description": "Settings update response",
				"properties": { "success": { "type": "boolean", "enum": [true] }, "message": { "type": "string" } },
				"required": ["success", "message"],
				"type": "object"
			},
			"SettingsUpdateRequest": { "description": "Settings update request", "properties": {}, "type": "object" },
			"AutoApprovalSettings": {
				"description": "Auto-approval configuration",
				"properties": {
					"enabled": { "type": "boolean" },
					"readOnly": { "type": "boolean" },
					"readOnlyOutsideWorkspace": { "type": "boolean" },
					"write": { "type": "boolean" },
					"writeOutsideWorkspace": { "type": "boolean" },
					"writeProtected": { "type": "boolean" },
					"execute": { "type": "boolean" },
					"browser": { "type": "boolean" },
					"mcp": { "type": "boolean" },
					"modeSwitch": { "type": "boolean" },
					"subtasks": { "type": "boolean" },
					"followupQuestions": { "type": "boolean" },
					"updateTodoList": { "type": "boolean" }
				},
				"type": "object"
			},
			"TerminalSettings": {
				"description": "Terminal settings",
				"properties": {
					"outputLineLimit": { "type": "number" },
					"outputCharacterLimit": { "type": "number" },
					"shellIntegrationTimeout": { "type": "number" },
					"shellIntegrationDisabled": { "type": "boolean" },
					"commandDelay": { "type": "number" },
					"compressProgressBar": { "type": "boolean" },
					"powershellCounter": { "type": "boolean" },
					"zshClearEolMark": { "type": "boolean" },
					"zshOhMy": { "type": "boolean" },
					"zshP10k": { "type": "boolean" },
					"zdotdir": { "type": "string" }
				},
				"type": "object"
			},
			"BrowserSettings": {
				"description": "Browser settings",
				"properties": {
					"enabled": { "type": "boolean" },
					"viewportSize": { "type": "string" },
					"screenshotQuality": { "type": "number" },
					"remoteBrowserEnabled": { "type": "boolean" },
					"remoteBrowserHost": { "type": "string" },
					"cachedChromeHostUrl": { "type": "string" }
				},
				"type": "object"
			},
			"Record_string.number_": {
				"properties": {},
				"type": "object",
				"description": "Construct a type with a set of properties K of type T"
			},
			"CondenseSettings": {
				"description": "Context condensing settings\n\nControls automatic context window condensing beh...",
				"properties": {
					"autoCondenseContext": {
						"type": "boolean",
						"description": "Enable automatic context condensing when threshold is reached"
					},
					"autoCondenseContextPercent": {
						"type": "number",
						"description": "Global threshold percentage (5-100) for triggering condensing."
					},
					"profileThresholds": {
						"$ref": "#/components/schemas/Record_string.number_",
						"description": "Per-profile condensing thresholds."
					},
					"condensingApiConfigId": {
						"type": "string",
						"description": "AI Profile ID to use for the condensing operation."
					},
					"customCondensingPrompt": {
						"type": "string",
						"description": "Custom prompt to use for condensing instead of the default."
					}
				},
				"type": "object"
			},
			"Record_string._enabled-boolean--maxLength_63_-number--profileId_63_-string__": {
				"properties": {},
				"type": "object",
				"description": "Construct a type with a set of properties K of type T"
			},
			"DigestSettings": {
				"description": "Agent Digest settings\n\nControls LLM-powered ultra-compact message summaries f...",
				"properties": {
					"digestEnabled": { "type": "boolean", "description": "Enable Agent Digest feature globally" },
					"digestProfileId": {
						"type": "string",
						"description": "AI Profile ID to use for digest generation."
					},
					"autoDigestEnabled": {
						"type": "boolean",
						"description": "Auto-generate digests for new messages."
					},
					"digestMaxLength": {
						"type": "number",
						"description": "Maximum length of generated digests in characters."
					},
					"customDigestPrompt": {
						"type": "string",
						"description": "Custom prompt template for digest generation."
					},
					"digestTaskOverrides": {
						"$ref": "#/components/schemas/Record_string._enabled-boolean--maxLength_63_-number--profileId_63_-string__",
						"description": "Per-task digest overrides."
					}
				},
				"type": "object"
			},
			"ToolType": {
				"type": "string",
				"enum": [
					"editedExistingFile",
					"appliedDiff",
					"newFileCreated",
					"codebaseSearch",
					"readFile",
					"fetchInstructions",
					"listFilesTopLevel",
					"listFilesRecursive",
					"listCodeDefinitionNames",
					"searchFiles",
					"switchMode",
					"newTask",
					"finishTask",
					"searchAndReplace",
					"insertContent",
					"generateImage",
					"imageGenerated",
					"runSlashCommand"
				],
				"description": "All possible tool types\nMaps directly to the AI agent's available tools"
			},
			"ToolResponseReadFile": {
				"description": "Response from read_file tool\n\nReturns file contents with line numbers, or spe...",
				"properties": {
					"tool": {
						"type": "string",
						"enum": ["readFile"],
						"nullable": false,
						"description": "Tool type identifier - discriminator for the union"
					},
					"path": { "type": "string", "description": "File path (when applicable)" },
					"isOutsideWorkspace": { "type": "boolean", "description": "Whether path is outside workspace" },
					"isProtected": { "type": "boolean", "description": "Whether file is write-protected" },
					"content": { "type": "string", "description": "Tool result content" },
					"additionalFileCount": {
						"type": "number",
						"description": "For batch reads, number of additional files"
					}
				},
				"required": ["tool", "path", "content"],
				"type": "object"
			},
			"BatchFileEntry": {
				"description": "Batch file entry for multi-file read operations",
				"properties": {
					"path": { "type": "string" },
					"lineSnippet": { "type": "string" },
					"isOutsideWorkspace": { "type": "boolean" },
					"key": { "type": "string" },
					"content": { "type": "string" }
				},
				"required": ["path", "lineSnippet", "key"],
				"type": "object"
			},
			"ToolResponseReadFileBatch": {
				"description": "Response from read_file tool with batch reads",
				"properties": {
					"tool": {
						"type": "string",
						"enum": ["readFile"],
						"nullable": false,
						"description": "Tool type identifier - discriminator for the union"
					},
					"path": { "type": "string", "description": "File path (when applicable)" },
					"isOutsideWorkspace": { "type": "boolean", "description": "Whether path is outside workspace" },
					"isProtected": { "type": "boolean", "description": "Whether file is write-protected" },
					"content": { "type": "string", "description": "Tool result content" },
					"batchFiles": { "items": { "$ref": "#/components/schemas/BatchFileEntry" }, "type": "array" }
				},
				"required": ["tool", "batchFiles"],
				"type": "object"
			},
			"ToolResponseListFilesTopLevel": {
				"description": "Response from list_files tool (non-recursive)\n\nLists files and directories at...",
				"properties": {
					"tool": {
						"type": "string",
						"enum": ["listFilesTopLevel"],
						"nullable": false,
						"description": "Tool type identifier - discriminator for the union"
					},
					"path": { "type": "string", "description": "File path (when applicable)" },
					"isOutsideWorkspace": { "type": "boolean", "description": "Whether path is outside workspace" },
					"isProtected": { "type": "boolean", "description": "Whether file is write-protected" },
					"content": { "type": "string", "description": "Tool result content" }
				},
				"required": ["tool", "path", "isOutsideWorkspace", "content"],
				"type": "object"
			},
			"ToolResponseListFilesRecursive": {
				"description": "Response from list_files tool (recursive)\n\nLists all files and directories re...",
				"properties": {
					"tool": {
						"type": "string",
						"enum": ["listFilesRecursive"],
						"nullable": false,
						"description": "Tool type identifier - discriminator for the union"
					},
					"path": { "type": "string", "description": "File path (when applicable)" },
					"isOutsideWorkspace": { "type": "boolean", "description": "Whether path is outside workspace" },
					"isProtected": { "type": "boolean", "description": "Whether file is write-protected" },
					"content": { "type": "string", "description": "Tool result content" }
				},
				"required": ["tool", "path", "isOutsideWorkspace", "content"],
				"type": "object"
			},
			"ToolResponseListCodeDefinitionNames": {
				"description": "Response from list_code_definition_names tool\n\nParses source code using Tree-...",
				"properties": {
					"tool": {
						"type": "string",
						"enum": ["listCodeDefinitionNames"],
						"nullable": false,
						"description": "Tool type identifier - discriminator for the union"
					},
					"path": { "type": "string", "description": "File path (when applicable)" },
					"isOutsideWorkspace": { "type": "boolean", "description": "Whether path is outside workspace" },
					"isProtected": { "type": "boolean", "description": "Whether file is write-protected" },
					"content": { "type": "string", "description": "Tool result content" }
				},
				"required": ["tool", "path", "isOutsideWorkspace", "content"],
				"type": "object"
			},
			"ToolResponseSearchFiles": {
				"description": "Response from search_files tool\n\nPerforms regex search across files using rip...",
				"properties": {
					"tool": {
						"type": "string",
						"enum": ["searchFiles"],
						"nullable": false,
						"description": "Tool type identifier - discriminator for the union"
					},
					"path": { "type": "string", "description": "File path (when applicable)" },
					"isOutsideWorkspace": { "type": "boolean", "description": "Whether path is outside workspace" },
					"isProtected": { "type": "boolean", "description": "Whether file is write-protected" },
					"content": { "type": "string", "description": "Tool result content" },
					"regex": { "type": "string" },
					"filePattern": { "type": "string" }
				},
				"required": ["tool", "path", "regex", "isOutsideWorkspace", "content"],
				"type": "object"
			},
			"ToolResponseNewFileCreated": {
				"description": "Response from write_to_file tool (new file)",
				"properties": {
					"tool": {
						"type": "string",
						"enum": ["newFileCreated"],
						"nullable": false,
						"description": "Tool type identifier - discriminator for the union"
					},
					"path": { "type": "string", "description": "File path (when applicable)" },
					"isOutsideWorkspace": { "type": "boolean", "description": "Whether path is outside workspace" },
					"isProtected": { "type": "boolean", "description": "Whether file is write-protected" },
					"content": { "type": "string", "description": "Tool result content" }
				},
				"required": ["tool", "path", "content", "isOutsideWorkspace", "isProtected"],
				"type": "object"
			},
			"ToolResponseEditedExistingFile": {
				"description": "Response from write_to_file tool (existing file)",
				"properties": {
					"tool": {
						"type": "string",
						"enum": ["editedExistingFile"],
						"nullable": false,
						"description": "Tool type identifier - discriminator for the union"
					},
					"path": { "type": "string", "description": "File path (when applicable)" },
					"isOutsideWorkspace": { "type": "boolean", "description": "Whether path is outside workspace" },
					"isProtected": { "type": "boolean", "description": "Whether file is write-protected" },
					"content": { "type": "string", "description": "Tool result content" },
					"diff": { "type": "string" }
				},
				"required": ["tool", "path", "isOutsideWorkspace", "isProtected"],
				"type": "object"
			},
			"ToolResponseApplyDiffSingle": {
				"description": "Response from apply_diff tool (single file)",
				"properties": {
					"tool": {
						"type": "string",
						"enum": ["appliedDiff"],
						"nullable": false,
						"description": "Tool type identifier - discriminator for the union"
					},
					"path": { "type": "string", "description": "File path (when applicable)" },
					"isOutsideWorkspace": { "type": "boolean", "description": "Whether path is outside workspace" },
					"isProtected": { "type": "boolean", "description": "Whether file is write-protected" },
					"content": { "type": "string", "description": "Tool result content" },
					"diff": { "type": "string" }
				},
				"required": ["tool", "path", "diff", "isProtected"],
				"type": "object"
			},
			"DiffOperation": {
				"description": "Single diff operation within apply_diff",
				"properties": { "content": { "type": "string" }, "startLine": { "type": "number" } },
				"required": ["content"],
				"type": "object"
			},
			"BatchDiffEntry": {
				"description": "Batch diff file entry",
				"properties": {
					"path": { "type": "string" },
					"changeCount": { "type": "number" },
					"key": { "type": "string" },
					"content": { "type": "string" },
					"diffs": { "items": { "$ref": "#/components/schemas/DiffOperation" }, "type": "array" }
				},
				"required": ["path", "changeCount", "key", "content"],
				"type": "object"
			},
			"ToolResponseApplyDiffBatch": {
				"description": "Response from apply_diff tool (multi-file batch)",
				"properties": {
					"tool": {
						"type": "string",
						"enum": ["appliedDiff"],
						"nullable": false,
						"description": "Tool type identifier - discriminator for the union"
					},
					"path": { "type": "string", "description": "File path (when applicable)" },
					"isOutsideWorkspace": { "type": "boolean", "description": "Whether path is outside workspace" },
					"isProtected": { "type": "boolean", "description": "Whether file is write-protected" },
					"content": { "type": "string", "description": "Tool result content" },
					"batchDiffs": { "items": { "$ref": "#/components/schemas/BatchDiffEntry" }, "type": "array" }
				},
				"required": ["tool", "batchDiffs", "isProtected"],
				"type": "object"
			},
			"ToolResponseApplyDiff": {
				"anyOf": [
					{ "$ref": "#/components/schemas/ToolResponseApplyDiffSingle" },
					{ "$ref": "#/components/schemas/ToolResponseApplyDiffBatch" }
				],
				"description": "Union type for apply_diff responses"
			},
			"ToolResponseSearchAndReplace": {
				"description": "Response from search_and_replace tool",
				"properties": {
					"tool": {
						"type": "string",
						"enum": ["searchAndReplace"],
						"nullable": false,
						"description": "Tool type identifier - discriminator for the union"
					},
					"path": { "type": "string", "description": "File path (when applicable)" },
					"isOutsideWorkspace": { "type": "boolean", "description": "Whether path is outside workspace" },
					"isProtected": { "type": "boolean", "description": "Whether file is write-protected" },
					"content": { "type": "string", "description": "Tool result content" },
					"search": { "type": "string" },
					"replace": { "type": "string" },
					"useRegex": { "type": "boolean" },
					"ignoreCase": { "type": "boolean" },
					"startLine": { "type": "number" },
					"endLine": { "type": "number" },
					"diff": { "type": "string" }
				},
				"required": ["tool", "path", "search", "replace", "useRegex", "ignoreCase", "diff", "isProtected"],
				"type": "object"
			},
			"ToolResponseInsertContent": {
				"description": "Response from insert_content tool",
				"properties": {
					"tool": {
						"type": "string",
						"enum": ["insertContent"],
						"nullable": false,
						"description": "Tool type identifier - discriminator for the union"
					},
					"path": { "type": "string", "description": "File path (when applicable)" },
					"isOutsideWorkspace": { "type": "boolean", "description": "Whether path is outside workspace" },
					"isProtected": { "type": "boolean", "description": "Whether file is write-protected" },
					"content": { "type": "string", "description": "Tool result content" },
					"diff": { "type": "string" },
					"lineNumber": { "type": "number" }
				},
				"required": ["tool", "path", "lineNumber", "isProtected"],
				"type": "object"
			},
			"ToolResponseGenerateImage": {
				"description": "Response from generate_image tool (request)",
				"properties": {
					"tool": {
						"type": "string",
						"enum": ["generateImage"],
						"nullable": false,
						"description": "Tool type identifier - discriminator for the union"
					},
					"path": { "type": "string", "description": "File path (when applicable)" },
					"isOutsideWorkspace": { "type": "boolean", "description": "Whether path is outside workspace" },
					"isProtected": { "type": "boolean", "description": "Whether file is write-protected" },
					"content": { "type": "string", "description": "Tool result content" },
					"inputImage": { "type": "string" }
				},
				"required": ["tool", "path", "content", "isOutsideWorkspace", "isProtected"],
				"type": "object"
			},
			"ToolResponseNewTask": {
				"description": "Response from new_task tool",
				"properties": {
					"tool": {
						"type": "string",
						"enum": ["newTask"],
						"nullable": false,
						"description": "Tool type identifier - discriminator for the union"
					},
					"path": { "type": "string", "description": "File path (when applicable)" },
					"isOutsideWorkspace": { "type": "boolean", "description": "Whether path is outside workspace" },
					"isProtected": { "type": "boolean", "description": "Whether file is write-protected" },
					"content": { "type": "string", "description": "Tool result content" },
					"mode": { "type": "string" },
					"todos": { "items": { "$ref": "#/components/schemas/TodoItem" }, "type": "array" }
				},
				"required": ["tool", "mode", "content", "todos"],
				"type": "object"
			},
			"ToolResponseFinishTask": {
				"description": "Response from attempt_completion tool",
				"properties": {
					"tool": {
						"type": "string",
						"enum": ["finishTask"],
						"nullable": false,
						"description": "Tool type identifier - discriminator for the union"
					},
					"path": { "type": "string", "description": "File path (when applicable)" },
					"isOutsideWorkspace": { "type": "boolean", "description": "Whether path is outside workspace" },
					"isProtected": { "type": "boolean", "description": "Whether file is write-protected" },
					"content": { "type": "string", "description": "Tool result content" }
				},
				"required": ["tool", "content"],
				"type": "object"
			},
			"ToolResponseSwitchMode": {
				"description": "Response from switch_mode tool",
				"properties": {
					"tool": {
						"type": "string",
						"enum": ["switchMode"],
						"nullable": false,
						"description": "Tool type identifier - discriminator for the union"
					},
					"path": { "type": "string", "description": "File path (when applicable)" },
					"isOutsideWorkspace": { "type": "boolean", "description": "Whether path is outside workspace" },
					"isProtected": { "type": "boolean", "description": "Whether file is write-protected" },
					"content": { "type": "string", "description": "Tool result content" },
					"mode": { "type": "string" },
					"reason": { "type": "string" }
				},
				"required": ["tool", "mode"],
				"type": "object"
			},
			"ToolResponseFetchInstructions": {
				"description": "Response from fetch_instructions tool",
				"properties": {
					"tool": {
						"type": "string",
						"enum": ["fetchInstructions"],
						"nullable": false,
						"description": "Tool type identifier - discriminator for the union"
					},
					"path": { "type": "string", "description": "File path (when applicable)" },
					"isOutsideWorkspace": { "type": "boolean", "description": "Whether path is outside workspace" },
					"isProtected": { "type": "boolean", "description": "Whether file is write-protected" },
					"content": { "type": "string", "description": "Tool result content" }
				},
				"required": ["tool", "content"],
				"type": "object"
			},
			"ToolResponseRunSlashCommand": {
				"description": "Response from run_slash_command tool",
				"properties": {
					"tool": {
						"type": "string",
						"enum": ["runSlashCommand"],
						"nullable": false,
						"description": "Tool type identifier - discriminator for the union"
					},
					"path": { "type": "string", "description": "File path (when applicable)" },
					"isOutsideWorkspace": { "type": "boolean", "description": "Whether path is outside workspace" },
					"isProtected": { "type": "boolean", "description": "Whether file is write-protected" },
					"content": { "type": "string", "description": "Tool result content" },
					"command": { "type": "string" },
					"args": { "type": "string" },
					"source": { "type": "string", "enum": ["global", "project", "built-in"] },
					"description": { "type": "string" }
				},
				"required": ["tool", "command", "source"],
				"type": "object"
			},
			"ToolResponseCodebaseSearch": {
				"description": "Response from codebase_search tool",
				"properties": {
					"tool": {
						"type": "string",
						"enum": ["codebaseSearch"],
						"nullable": false,
						"description": "Tool type identifier - discriminator for the union"
					},
					"path": { "type": "string", "description": "File path (when applicable)" },
					"isOutsideWorkspace": { "type": "boolean", "description": "Whether path is outside workspace" },
					"isProtected": { "type": "boolean", "description": "Whether file is write-protected" },
					"content": { "type": "string", "description": "Tool result content" },
					"query": { "type": "string" }
				},
				"required": ["tool", "query", "content"],
				"type": "object"
			},
			"ToolResponse": {
				"anyOf": [
					{ "$ref": "#/components/schemas/ToolResponseReadFile" },
					{ "$ref": "#/components/schemas/ToolResponseReadFileBatch" },
					{ "$ref": "#/components/schemas/ToolResponseListFilesTopLevel" },
					{ "$ref": "#/components/schemas/ToolResponseListFilesRecursive" },
					{ "$ref": "#/components/schemas/ToolResponseListCodeDefinitionNames" },
					{ "$ref": "#/components/schemas/ToolResponseSearchFiles" },
					{ "$ref": "#/components/schemas/ToolResponseNewFileCreated" },
					{ "$ref": "#/components/schemas/ToolResponseEditedExistingFile" },
					{ "$ref": "#/components/schemas/ToolResponseApplyDiff" },
					{ "$ref": "#/components/schemas/ToolResponseSearchAndReplace" },
					{ "$ref": "#/components/schemas/ToolResponseInsertContent" },
					{ "$ref": "#/components/schemas/ToolResponseGenerateImage" },
					{ "$ref": "#/components/schemas/ToolResponseNewTask" },
					{ "$ref": "#/components/schemas/ToolResponseFinishTask" },
					{ "$ref": "#/components/schemas/ToolResponseSwitchMode" },
					{ "$ref": "#/components/schemas/ToolResponseFetchInstructions" },
					{ "$ref": "#/components/schemas/ToolResponseRunSlashCommand" },
					{ "$ref": "#/components/schemas/ToolResponseCodebaseSearch" }
				],
				"description": "Complete union of all possible tool responses\n\nThis is the discriminated unio..."
			},
			"SchemaDocumentationResponse_ToolResponse_": {
				"description": "Schema documentation response wrapper",
				"properties": {
					"notice": { "type": "string", "description": "Schema documentation notice" },
					"schema": {
						"$ref": "#/components/schemas/ToolResponse",
						"description": "Schema example (never actually returned)"
					}
				},
				"required": ["notice"],
				"type": "object"
			},
			"WebSocketMessageType": {
				"type": "string",
				"enum": [
					"action",
					"state",
					"selectedImages",
					"theme",
					"workspaceUpdated",
					"invoke",
					"messageUpdated",
					"mcpServers",
					"enhancedPrompt",
					"commitSearchResults",
					"listApiConfig",
					"routerModels",
					"openAiModels",
					"ollamaModels",
					"lmStudioModels",
					"vsCodeLmModels",
					"huggingFaceModels",
					"vsCodeLmApiAvailable",
					"updatePrompt",
					"systemPrompt",
					"autoApprovalEnabled",
					"updateCustomMode",
					"deleteCustomMode",
					"exportModeResult",
					"importModeResult",
					"checkRulesDirectoryResult",
					"deleteCustomModeCheck",
					"currentCheckpointUpdated",
					"showHumanRelayDialog",
					"humanRelayResponse",
					"humanRelayCancel",
					"insertTextToChatArea",
					"browserToolEnabled",
					"browserConnectionResult",
					"remoteBrowserEnabled",
					"ttsStart",
					"ttsStop",
					"maxReadFileLine",
					"fileSearchResults",
					"toggleApiConfigPin",
					"mcpMarketplaceCatalog",
					"mcpDownloadDetails",
					"showSystemNotification",
					"openInBrowser",
					"acceptInput",
					"focusChatInput",
					"setHistoryPreviewCollapsed",
					"commandExecutionStatus",
					"mcpExecutionStatus",
					"vsCodeSetting",
					"profileDataResponse",
					"balanceDataResponse",
					"updateProfileData",
					"authenticatedUser",
					"condenseTaskContextResponse",
					"singleRouterModelFetchResponse",
					"indexingStatusUpdate",
					"indexCleared",
					"codebaseIndexConfig",
					"rulesData",
					"marketplaceInstallResult",
					"marketplaceRemoveResult",
					"marketplaceData",
					"mermaidFixResponse",
					"tasksByIdResponse",
					"taskHistoryResponse",
					"forkCountsResponse",
					"shareTaskSuccess",
					"codeIndexSettingsSaved",
					"codeIndexSecretStatus",
					"showDeleteMessageDialog",
					"showEditMessageDialog",
					"hoodycodeNotificationsResponse",
					"usageDataResponse",
					"keybindingsResponse",
					"commands",
					"insertTextIntoTextarea",
					"dismissedUpsells",
					"showTimestamps",
					"organizationSwitchResult",
					"todoListUpdated",
					"taskForked",
					"taskModeChanged"
				],
				"description": "All possible WebSocket message types\n\nThis enum represents every message type..."
			},
			"TaskContextMetadata": {
				"description": "Task context information\n\nIncluded in most WebSocket messages to indicate whi...",
				"properties": {
					"mode": {
						"type": "string",
						"description": "Current operating mode (code, architect, ask, debug, orchestrator)"
					},
					"modelId": { "type": "string", "description": "Current AI model ID" },
					"modelProvider": {
						"type": "string",
						"description": "Current AI provider (anthropic, openai, openrouter, etc.)"
					},
					"profileName": { "type": "string", "description": "Current profile name" }
				},
				"type": "object"
			},
			"MessageUpdatedMessage": {
				"description": "Message updated event\n\nTHIS IS THE MOST IMPORTANT MESSAGE TYPE\n\nBroadcast whe...",
				"properties": {
					"type": {
						"type": "string",
						"enum": ["messageUpdated"],
						"nullable": false,
						"description": "Message type - discriminator for the union"
					},
					"taskId": { "type": "string", "description": "Task ID (if message is task-related)" },
					"taskContext": {
						"$ref": "#/components/schemas/TaskContextMetadata",
						"description": "Task context metadata"
					},
					"text": { "type": "string", "description": "Message text content (optional)" },
					"images": {
						"items": { "type": "string" },
						"type": "array",
						"description": "Associated image data URLs"
					},
					"clineMessage": {
						"$ref": "#/components/schemas/ClineMessage",
						"description": "Complete ClineMessage with all tool data, metadata, etc."
					}
				},
				"required": ["type", "taskId", "clineMessage"],
				"type": "object"
			},
			"CommandExecutionStatusMessage": {
				"description": "Command execution status update\n\nReal-time updates during terminal command ex...",
				"properties": {
					"type": {
						"type": "string",
						"enum": ["commandExecutionStatus"],
						"nullable": false,
						"description": "Message type - discriminator for the union"
					},
					"taskId": { "type": "string", "description": "Task ID (if message is task-related)" },
					"taskContext": {
						"$ref": "#/components/schemas/TaskContextMetadata",
						"description": "Task context metadata"
					},
					"text": { "type": "string", "description": "JSON stringified CommandExecutionStatus" },
					"images": {
						"items": { "type": "string" },
						"type": "array",
						"description": "Associated image data URLs"
					}
				},
				"required": ["type", "taskId", "text"],
				"type": "object"
			},
			"TaskForkedMessage": {
				"description": "Task forked notification\n\nBroadcast when a task is successfully forked from a...",
				"properties": {
					"type": {
						"type": "string",
						"enum": ["taskForked"],
						"nullable": false,
						"description": "Message type - discriminator for the union"
					},
					"taskId": { "type": "string", "description": "Task ID (if message is task-related)" },
					"taskContext": {
						"$ref": "#/components/schemas/TaskContextMetadata",
						"description": "Task context metadata"
					},
					"text": { "type": "string", "description": "Message text content (optional)" },
					"images": {
						"items": { "type": "string" },
						"type": "array",
						"description": "Associated image data URLs"
					},
					"forkedTaskId": { "type": "string" },
					"sourceTaskId": { "type": "string" },
					"forkFromMessageTs": { "type": "number" },
					"messagesIncluded": { "type": "number" },
					"isActive": { "type": "boolean" }
				},
				"required": [
					"type",
					"taskId",
					"forkedTaskId",
					"sourceTaskId",
					"forkFromMessageTs",
					"messagesIncluded",
					"isActive"
				],
				"type": "object"
			},
			"TaskModeChangedMessage": {
				"description": "Task mode/profile changed notification\n\nBroadcast when a task's mode or profi...",
				"properties": {
					"type": {
						"type": "string",
						"enum": ["taskModeChanged"],
						"nullable": false,
						"description": "Message type - discriminator for the union"
					},
					"taskId": { "type": "string", "description": "Task ID (if message is task-related)" },
					"taskContext": {
						"$ref": "#/components/schemas/TaskContextMetadata",
						"description": "Task context metadata"
					},
					"text": { "type": "string", "description": "Message text content (optional)" },
					"images": {
						"items": { "type": "string" },
						"type": "array",
						"description": "Associated image data URLs"
					},
					"mode": { "type": "string", "description": "New mode slug" },
					"profileId": { "type": "string", "description": "New profile ID (if changed)" },
					"profileName": { "type": "string", "description": "New profile name (if changed)" },
					"isActive": { "type": "boolean", "description": "Whether this task is currently active/displayed" }
				},
				"required": ["type", "taskId", "mode", "isActive"],
				"type": "object"
			},
			"TodoListUpdatedMessage": {
				"description": "TODO list updated notification\n\nBroadcast when TODO items are created, update...",
				"properties": {
					"type": {
						"type": "string",
						"enum": ["todoListUpdated"],
						"nullable": false,
						"description": "Message type - discriminator for the union"
					},
					"taskId": { "type": "string", "description": "Task ID (if message is task-related)" },
					"taskContext": {
						"$ref": "#/components/schemas/TaskContextMetadata",
						"description": "Task context metadata"
					},
					"text": { "type": "string", "description": "Updated TODO items" },
					"images": {
						"items": { "type": "string" },
						"type": "array",
						"description": "Associated image data URLs"
					}
				},
				"required": ["type", "taskId", "text"],
				"type": "object"
			},
			"IndexingStatus": {
				"description": "Code indexing status",
				"properties": {
					"systemStatus": { "type": "string" },
					"message": { "type": "string" },
					"processedItems": { "type": "number" },
					"totalItems": { "type": "number" },
					"currentItemUnit": { "type": "string" },
					"workspacePath": { "type": "string" }
				},
				"required": ["systemStatus", "processedItems", "totalItems"],
				"type": "object"
			},
			"IndexingStatusUpdateMessage": {
				"description": "Indexing status update\n\nReal-time updates during code indexing operations",
				"properties": {
					"type": {
						"type": "string",
						"enum": ["indexingStatusUpdate"],
						"nullable": false,
						"description": "Message type - discriminator for the union"
					},
					"taskId": { "type": "string", "description": "Task ID (if message is task-related)" },
					"taskContext": {
						"$ref": "#/components/schemas/TaskContextMetadata",
						"description": "Task context metadata"
					},
					"text": { "type": "string", "description": "Message text content (optional)" },
					"images": {
						"items": { "type": "string" },
						"type": "array",
						"description": "Associated image data URLs"
					},
					"values": { "$ref": "#/components/schemas/IndexingStatus" }
				},
				"required": ["type", "values"],
				"type": "object"
			},
			"ExtensionState": {
				"description": "Extension state structure\n\nThis is a placeholder - the complete structure is...",
				"properties": {
					"version": { "type": "string" },
					"clineMessages": { "items": { "$ref": "#/components/schemas/ClineMessage" }, "type": "array" },
					"currentTaskItem": {},
					"currentTaskTodos": { "items": { "$ref": "#/components/schemas/TodoItem" }, "type": "array" },
					"apiConfiguration": {},
					"mode": { "type": "string" }
				},
				"required": ["version", "clineMessages", "apiConfiguration", "mode"],
				"type": "object"
			},
			"StateMessage": {
				"description": "State change notification\n\nBroadcast when application state changes\nContains...",
				"properties": {
					"type": {
						"type": "string",
						"enum": ["state"],
						"nullable": false,
						"description": "Message type - discriminator for the union"
					},
					"taskId": { "type": "string", "description": "Task ID (if message is task-related)" },
					"taskContext": {
						"$ref": "#/components/schemas/TaskContextMetadata",
						"description": "Task context metadata"
					},
					"text": { "type": "string", "description": "Message text content (optional)" },
					"images": {
						"items": { "type": "string" },
						"type": "array",
						"description": "Associated image data URLs"
					},
					"state": { "$ref": "#/components/schemas/ExtensionState" }
				},
				"required": ["type", "state"],
				"type": "object"
			},
			"BaseWebSocketMessage": {
				"description": "Base WebSocket message structure\n\nAll WebSocket messages extend this base int...",
				"properties": {
					"type": {
						"$ref": "#/components/schemas/WebSocketMessageType",
						"description": "Message type - discriminator for the union"
					},
					"taskId": { "type": "string", "description": "Task ID (if message is task-related)" },
					"taskContext": {
						"$ref": "#/components/schemas/TaskContextMetadata",
						"description": "Task context metadata"
					},
					"text": { "type": "string", "description": "Message text content (optional)" },
					"images": {
						"items": { "type": "string" },
						"type": "array",
						"description": "Associated image data URLs"
					}
				},
				"required": ["type"],
				"type": "object"
			},
			"WebSocketMessage": {
				"anyOf": [
					{ "$ref": "#/components/schemas/MessageUpdatedMessage" },
					{ "$ref": "#/components/schemas/CommandExecutionStatusMessage" },
					{ "$ref": "#/components/schemas/TaskForkedMessage" },
					{ "$ref": "#/components/schemas/TaskModeChangedMessage" },
					{ "$ref": "#/components/schemas/TodoListUpdatedMessage" },
					{ "$ref": "#/components/schemas/IndexingStatusUpdateMessage" },
					{ "$ref": "#/components/schemas/StateMessage" },
					{ "$ref": "#/components/schemas/BaseWebSocketMessage" }
				],
				"description": "Complete union of all possible WebSocket messages\n\nUse the `type` field to di..."
			},
			"SchemaDocumentationResponse_WebSocketMessage_": {
				"description": "Schema documentation response wrapper",
				"properties": {
					"notice": { "type": "string", "description": "Schema documentation notice" },
					"schema": {
						"$ref": "#/components/schemas/WebSocketMessage",
						"description": "Schema example (never actually returned)"
					}
				},
				"required": ["notice"],
				"type": "object"
			},
			"BrowserAction": {
				"type": "string",
				"enum": ["launch", "click", "hover", "type", "scroll_down", "scroll_up", "resize", "close"],
				"description": "Browser action types"
			},
			"BrowserActionResult": {
				"description": "Browser action result\n\nReturned after executing browser automation actions\nIn...",
				"properties": {
					"screenshot": { "type": "string" },
					"logs": { "type": "string" },
					"currentUrl": { "type": "string" },
					"currentMousePosition": { "type": "string" }
				},
				"type": "object"
			},
			"SchemaDocumentationResponse__actions-BrowserAction-Array--result-BrowserActionResult__": {
				"description": "Schema documentation response wrapper",
				"properties": {
					"notice": { "type": "string", "description": "Schema documentation notice" },
					"schema": {
						"properties": {
							"result": { "$ref": "#/components/schemas/BrowserActionResult" },
							"actions": { "items": { "$ref": "#/components/schemas/BrowserAction" }, "type": "array" }
						},
						"required": ["result", "actions"],
						"type": "object",
						"description": "Schema example (never actually returned)"
					}
				},
				"required": ["notice"],
				"type": "object"
			},
			"CommandExecutionStatus": {
				"description": "Terminal command execution status\n\nReal-time updates broadcast via WebSocket...",
				"properties": {
					"executionId": { "type": "string" },
					"status": { "type": "string", "enum": ["started", "output", "exited", "timeout", "fallback"] },
					"pid": { "type": "number" },
					"command": { "type": "string" },
					"exitCode": { "type": "number" },
					"output": { "type": "string" }
				},
				"required": ["executionId", "status"],
				"type": "object"
			},
			"SchemaDocumentationResponse_CommandExecutionStatus_": {
				"description": "Schema documentation response wrapper",
				"properties": {
					"notice": { "type": "string", "description": "Schema documentation notice" },
					"schema": {
						"$ref": "#/components/schemas/CommandExecutionStatus",
						"description": "Schema example (never actually returned)"
					}
				},
				"required": ["notice"],
				"type": "object"
			},
			"ApiRequestInfo": {
				"description": "API request information\n\nMetadata about AI model API calls including token us...",
				"properties": {
					"request": { "type": "string" },
					"tokensIn": { "type": "number" },
					"tokensOut": { "type": "number" },
					"cacheWrites": { "type": "number" },
					"cacheReads": { "type": "number" },
					"cost": { "type": "number" },
					"usageMissing": { "type": "boolean" },
					"inferenceProvider": { "type": "string" },
					"cancelReason": { "type": "string", "enum": ["streaming_failed", "user_cancelled"] },
					"streamingFailedMessage": { "type": "string" },
					"apiProtocol": { "type": "string", "enum": ["anthropic", "openai"] }
				},
				"type": "object"
			},
			"SchemaDocumentationResponse_ApiRequestInfo_": {
				"description": "Schema documentation response wrapper",
				"properties": {
					"notice": { "type": "string", "description": "Schema documentation notice" },
					"schema": {
						"$ref": "#/components/schemas/ApiRequestInfo",
						"description": "Schema example (never actually returned)"
					}
				},
				"required": ["notice"],
				"type": "object"
			},
			"SchemaDocumentationResponse__tools-ToolType-Array__": {
				"description": "Schema documentation response wrapper",
				"properties": {
					"notice": { "type": "string", "description": "Schema documentation notice" },
					"schema": {
						"properties": {
							"tools": { "items": { "$ref": "#/components/schemas/ToolType" }, "type": "array" }
						},
						"required": ["tools"],
						"type": "object",
						"description": "Schema example (never actually returned)"
					}
				},
				"required": ["notice"],
				"type": "object"
			},
			"SchemaDocumentationResponse__types-WebSocketMessageType-Array__": {
				"description": "Schema documentation response wrapper",
				"properties": {
					"notice": { "type": "string", "description": "Schema documentation notice" },
					"schema": {
						"properties": {
							"types": {
								"items": { "$ref": "#/components/schemas/WebSocketMessageType" },
								"type": "array"
							}
						},
						"required": ["types"],
						"type": "object",
						"description": "Schema example (never actually returned)"
					}
				},
				"required": ["notice"],
				"type": "object"
			},
			"SupportPromptType": {
				"type": "string",
				"enum": [
					"ENHANCE",
					"CONDENSE",
					"EXPLAIN",
					"FIX",
					"IMPROVE",
					"ADD_TO_CONTEXT",
					"TERMINAL_ADD_TO_CONTEXT",
					"TERMINAL_FIX",
					"TERMINAL_EXPLAIN",
					"TERMINAL_GENERATE",
					"NEW_TASK",
					"COMMIT_MESSAGE"
				]
			},
			"PromptTypeInfo": {
				"properties": {
					"type": { "$ref": "#/components/schemas/SupportPromptType" },
					"description": { "type": "string" },
					"parameters": { "items": { "type": "string" }, "type": "array" },
					"category": { "type": "string", "enum": ["enhancement", "code-action", "terminal", "git", "task"] }
				},
				"required": ["type", "description", "parameters", "category"],
				"type": "object"
			},
			"PromptTypesResponse": {
				"properties": {
					"types": { "items": { "$ref": "#/components/schemas/PromptTypeInfo" }, "type": "array" },
					"count": { "type": "number" }
				},
				"required": ["types", "count"],
				"type": "object"
			},
			"PromptTemplate": {
				"properties": { "template": { "type": "string" }, "isCustom": { "type": "boolean" } },
				"required": ["template", "isCustom"],
				"type": "object"
			},
			"Record_string.PromptTemplate_": {
				"properties": {},
				"type": "object",
				"description": "Construct a type with a set of properties K of type T"
			},
			"PromptsListResponse": {
				"properties": {
					"prompts": { "$ref": "#/components/schemas/Record_string.PromptTemplate_" },
					"count": { "type": "number" }
				},
				"required": ["prompts", "count"],
				"type": "object"
			},
			"PromptDetailsResponse": {
				"properties": {
					"type": { "$ref": "#/components/schemas/SupportPromptType" },
					"template": { "type": "string" },
					"defaultTemplate": { "type": "string" },
					"isCustom": { "type": "boolean" },
					"metadata": { "$ref": "#/components/schemas/PromptTypeInfo" }
				},
				"required": ["type", "template", "defaultTemplate", "isCustom"],
				"type": "object"
			},
			"UpdatePromptResponse": {
				"properties": {
					"success": { "type": "boolean" },
					"type": { "$ref": "#/components/schemas/SupportPromptType" },
					"template": { "type": "string" }
				},
				"required": ["success", "type", "template"],
				"type": "object"
			},
			"UpdatePromptRequest": {
				"properties": { "template": { "type": "string" } },
				"required": ["template"],
				"type": "object"
			},
			"ResetPromptResponse": {
				"properties": {
					"success": { "type": "boolean" },
					"type": { "$ref": "#/components/schemas/SupportPromptType" },
					"template": { "type": "string" },
					"message": { "type": "string" }
				},
				"required": ["success", "type", "template", "message"],
				"type": "object"
			},
			"ResetAllPromptsResponse": {
				"properties": {
					"success": { "type": "boolean" },
					"message": { "type": "string" },
					"count": { "type": "number" }
				},
				"required": ["success", "message", "count"],
				"type": "object"
			},
			"ExecutePromptResponse": {
				"properties": {
					"type": { "$ref": "#/components/schemas/SupportPromptType" },
					"formattedPrompt": { "type": "string" },
					"result": { "type": "string" },
					"executed": { "type": "boolean" }
				},
				"required": ["type", "formattedPrompt", "executed"],
				"type": "object"
			},
			"Record_string.string_": {
				"properties": {},
				"type": "object",
				"description": "Construct a type with a set of properties K of type T"
			},
			"ExecutePromptRequest": {
				"properties": {
					"type": { "type": "string" },
					"params": { "$ref": "#/components/schemas/Record_string.string_" },
					"execute": { "type": "boolean" }
				},
				"required": ["type", "params"],
				"type": "object"
			},
			"ProviderSettingsDiscriminated": {
				"anyOf": [
					{
						"properties": {
							"apiProvider": { "type": "string", "enum": ["anthropic"], "nullable": false },
							"anthropicBeta1MContext": { "type": "boolean" },
							"anthropicUseAuthToken": { "type": "boolean" },
							"anthropicBaseUrl": { "type": "string" },
							"apiKey": { "type": "string" },
							"apiModelId": { "type": "string" },
							"taskAutoInitMessage": { "type": "string" },
							"taskAutoInitSlashCommand": { "type": "string" },
							"taskAutoInitEnabled": { "type": "boolean" },
							"verbosity": { "type": "string", "enum": ["low", "medium", "high"] },
							"modelMaxThinkingTokens": { "type": "number" },
							"modelMaxTokens": { "type": "number" },
							"reasoningEffort": { "type": "string", "enum": ["low", "medium", "high", "minimal"] },
							"enableReasoningEffort": { "type": "boolean" },
							"consecutiveMistakeLimit": { "type": "number" },
							"rateLimitSeconds": { "type": "number" },
							"modelTemperature": { "type": "number", "nullable": true },
							"fuzzyMatchThreshold": { "type": "number" },
							"todoListEnabled": { "type": "boolean" },
							"diffEnabled": { "type": "boolean" },
							"includeMaxTokens": { "type": "boolean" }
						},
						"required": ["apiProvider"],
						"type": "object"
					},
					{
						"properties": {
							"apiProvider": { "type": "string", "enum": ["claude-code"], "nullable": false },
							"claudeCodeMaxOutputTokens": { "type": "number" },
							"claudeCodePath": { "type": "string" },
							"apiModelId": { "type": "string" },
							"taskAutoInitMessage": { "type": "string" },
							"taskAutoInitSlashCommand": { "type": "string" },
							"taskAutoInitEnabled": { "type": "boolean" },
							"verbosity": { "type": "string", "enum": ["low", "medium", "high"] },
							"modelMaxThinkingTokens": { "type": "number" },
							"modelMaxTokens": { "type": "number" },
							"reasoningEffort": { "type": "string", "enum": ["low", "medium", "high", "minimal"] },
							"enableReasoningEffort": { "type": "boolean" },
							"consecutiveMistakeLimit": { "type": "number" },
							"rateLimitSeconds": { "type": "number" },
							"modelTemperature": { "type": "number", "nullable": true },
							"fuzzyMatchThreshold": { "type": "number" },
							"todoListEnabled": { "type": "boolean" },
							"diffEnabled": { "type": "boolean" },
							"includeMaxTokens": { "type": "boolean" }
						},
						"required": ["apiProvider"],
						"type": "object"
					},
					{
						"properties": {
							"apiProvider": { "type": "string", "enum": ["glama"], "nullable": false },
							"glamaApiKey": { "type": "string" },
							"glamaModelId": { "type": "string" },
							"taskAutoInitMessage": { "type": "string" },
							"taskAutoInitSlashCommand": { "type": "string" },
							"taskAutoInitEnabled": { "type": "boolean" },
							"verbosity": { "type": "string", "enum": ["low", "medium", "high"] },
							"modelMaxThinkingTokens": { "type": "number" },
							"modelMaxTokens": { "type": "number" },
							"reasoningEffort": { "type": "string", "enum": ["low", "medium", "high", "minimal"] },
							"enableReasoningEffort": { "type": "boolean" },
							"consecutiveMistakeLimit": { "type": "number" },
							"rateLimitSeconds": { "type": "number" },
							"modelTemperature": { "type": "number", "nullable": true },
							"fuzzyMatchThreshold": { "type": "number" },
							"todoListEnabled": { "type": "boolean" },
							"diffEnabled": { "type": "boolean" },
							"includeMaxTokens": { "type": "boolean" }
						},
						"required": ["apiProvider"],
						"type": "object"
					},
					{
						"properties": {
							"apiProvider": { "type": "string", "enum": ["openrouter"], "nullable": false },
							"openRouterZdr": { "type": "boolean" },
							"openRouterProviderSort": { "type": "string", "enum": ["price", "throughput", "latency"] },
							"openRouterProviderDataCollection": { "type": "string", "enum": ["allow", "deny"] },
							"openRouterUseMiddleOutTransform": { "type": "boolean" },
							"openRouterSpecificProvider": { "type": "string" },
							"openRouterBaseUrl": { "type": "string" },
							"openRouterModelId": { "type": "string" },
							"openRouterApiKey": { "type": "string" },
							"taskAutoInitMessage": { "type": "string" },
							"taskAutoInitSlashCommand": { "type": "string" },
							"taskAutoInitEnabled": { "type": "boolean" },
							"verbosity": { "type": "string", "enum": ["low", "medium", "high"] },
							"modelMaxThinkingTokens": { "type": "number" },
							"modelMaxTokens": { "type": "number" },
							"reasoningEffort": { "type": "string", "enum": ["low", "medium", "high", "minimal"] },
							"enableReasoningEffort": { "type": "boolean" },
							"consecutiveMistakeLimit": { "type": "number" },
							"rateLimitSeconds": { "type": "number" },
							"modelTemperature": { "type": "number", "nullable": true },
							"fuzzyMatchThreshold": { "type": "number" },
							"todoListEnabled": { "type": "boolean" },
							"diffEnabled": { "type": "boolean" },
							"includeMaxTokens": { "type": "boolean" }
						},
						"required": ["apiProvider"],
						"type": "object"
					},
					{
						"properties": {
							"apiProvider": { "type": "string", "enum": ["bedrock"], "nullable": false },
							"awsBedrock1MContext": { "type": "boolean" },
							"awsBedrockEndpoint": { "type": "string" },
							"awsBedrockEndpointEnabled": { "type": "boolean" },
							"awsModelContextWindow": { "type": "number" },
							"awsCustomArn": { "type": "string" },
							"awsUseApiKey": { "type": "boolean" },
							"awsApiKey": { "type": "string" },
							"awsUseProfile": { "type": "boolean" },
							"awsProfile": { "type": "string" },
							"awsUsePromptCache": { "type": "boolean" },
							"awsUseCrossRegionInference": { "type": "boolean" },
							"awsRegion": { "type": "string" },
							"awsSessionToken": { "type": "string" },
							"awsSecretKey": { "type": "string" },
							"awsAccessKey": { "type": "string" },
							"apiModelId": { "type": "string" },
							"taskAutoInitMessage": { "type": "string" },
							"taskAutoInitSlashCommand": { "type": "string" },
							"taskAutoInitEnabled": { "type": "boolean" },
							"verbosity": { "type": "string", "enum": ["low", "medium", "high"] },
							"modelMaxThinkingTokens": { "type": "number" },
							"modelMaxTokens": { "type": "number" },
							"reasoningEffort": { "type": "string", "enum": ["low", "medium", "high", "minimal"] },
							"enableReasoningEffort": { "type": "boolean" },
							"consecutiveMistakeLimit": { "type": "number" },
							"rateLimitSeconds": { "type": "number" },
							"modelTemperature": { "type": "number", "nullable": true },
							"fuzzyMatchThreshold": { "type": "number" },
							"todoListEnabled": { "type": "boolean" },
							"diffEnabled": { "type": "boolean" },
							"includeMaxTokens": { "type": "boolean" }
						},
						"required": ["apiProvider"],
						"type": "object"
					},
					{
						"properties": {
							"apiProvider": { "type": "string", "enum": ["vertex"], "nullable": false },
							"enableGrounding": { "type": "boolean" },
							"enableUrlContext": { "type": "boolean" },
							"vertexRegion": { "type": "string" },
							"vertexProjectId": { "type": "string" },
							"vertexJsonCredentials": { "type": "string" },
							"vertexKeyFile": { "type": "string" },
							"apiModelId": { "type": "string" },
							"taskAutoInitMessage": { "type": "string" },
							"taskAutoInitSlashCommand": { "type": "string" },
							"taskAutoInitEnabled": { "type": "boolean" },
							"verbosity": { "type": "string", "enum": ["low", "medium", "high"] },
							"modelMaxThinkingTokens": { "type": "number" },
							"modelMaxTokens": { "type": "number" },
							"reasoningEffort": { "type": "string", "enum": ["low", "medium", "high", "minimal"] },
							"enableReasoningEffort": { "type": "boolean" },
							"consecutiveMistakeLimit": { "type": "number" },
							"rateLimitSeconds": { "type": "number" },
							"modelTemperature": { "type": "number", "nullable": true },
							"fuzzyMatchThreshold": { "type": "number" },
							"todoListEnabled": { "type": "boolean" },
							"diffEnabled": { "type": "boolean" },
							"includeMaxTokens": { "type": "boolean" }
						},
						"required": ["apiProvider"],
						"type": "object"
					},
					{
						"properties": {
							"apiProvider": { "type": "string", "enum": ["openai"], "nullable": false },
							"openAiHeaders": { "properties": {}, "type": "object" },
							"openAiHostHeader": { "type": "string" },
							"openAiStreamingEnabled": { "type": "boolean" },
							"azureApiVersion": { "type": "string" },
							"openAiUseAzure": { "type": "boolean" },
							"openAiCustomModelInfo": {
								"properties": {
									"tiers": {
										"items": {
											"properties": {
												"cacheReadsPrice": { "type": "number" },
												"cacheWritesPrice": { "type": "number" },
												"outputPrice": { "type": "number" },
												"inputPrice": { "type": "number" },
												"contextWindow": { "type": "number" },
												"name": { "type": "string", "enum": ["default", "flex", "priority"] }
											},
											"required": ["contextWindow"],
											"type": "object"
										},
										"type": "array"
									},
									"deprecated": { "type": "boolean" },
									"preferredIndex": { "type": "number", "nullable": true },
									"displayName": { "type": "string", "nullable": true },
									"cachableFields": { "items": { "type": "string" }, "type": "array" },
									"maxCachePoints": { "type": "number" },
									"minTokensPerCachePoint": { "type": "number" },
									"reasoningEffort": { "type": "string", "enum": ["low", "medium", "high"] },
									"description": { "type": "string" },
									"cacheReadsPrice": { "type": "number" },
									"cacheWritesPrice": { "type": "number" },
									"outputPrice": { "type": "number" },
									"inputPrice": { "type": "number" },
									"supportedParameters": {
										"items": {
											"type": "string",
											"enum": ["max_tokens", "temperature", "reasoning", "include_reasoning"]
										},
										"type": "array"
									},
									"supportsReasoningEffort": { "type": "boolean" },
									"requiredReasoningBudget": { "type": "boolean" },
									"supportsTemperature": { "type": "boolean" },
									"supportsReasoningBudget": { "type": "boolean" },
									"supportsVerbosity": { "type": "boolean" },
									"supportsPromptCache": { "type": "boolean" },
									"supportsComputerUse": { "type": "boolean" },
									"supportsImages": { "type": "boolean" },
									"contextWindow": { "type": "number" },
									"maxThinkingTokens": { "type": "number", "nullable": true },
									"maxTokens": { "type": "number", "nullable": true }
								},
								"required": ["supportsPromptCache", "contextWindow"],
								"type": "object",
								"nullable": true
							},
							"openAiModelId": { "type": "string" },
							"openAiR1FormatEnabled": { "type": "boolean" },
							"openAiLegacyFormat": { "type": "boolean" },
							"openAiApiKey": { "type": "string" },
							"openAiBaseUrl": { "type": "string" },
							"taskAutoInitMessage": { "type": "string" },
							"taskAutoInitSlashCommand": { "type": "string" },
							"taskAutoInitEnabled": { "type": "boolean" },
							"verbosity": { "type": "string", "enum": ["low", "medium", "high"] },
							"modelMaxThinkingTokens": { "type": "number" },
							"modelMaxTokens": { "type": "number" },
							"reasoningEffort": { "type": "string", "enum": ["low", "medium", "high", "minimal"] },
							"enableReasoningEffort": { "type": "boolean" },
							"consecutiveMistakeLimit": { "type": "number" },
							"rateLimitSeconds": { "type": "number" },
							"modelTemperature": { "type": "number", "nullable": true },
							"fuzzyMatchThreshold": { "type": "number" },
							"todoListEnabled": { "type": "boolean" },
							"diffEnabled": { "type": "boolean" },
							"includeMaxTokens": { "type": "boolean" }
						},
						"required": ["apiProvider"],
						"type": "object"
					},
					{
						"properties": {
							"apiProvider": { "type": "string", "enum": ["ollama"], "nullable": false },
							"ollamaNumCtx": { "type": "number" },
							"ollamaApiKey": { "type": "string" },
							"ollamaBaseUrl": { "type": "string" },
							"ollamaModelId": { "type": "string" },
							"taskAutoInitMessage": { "type": "string" },
							"taskAutoInitSlashCommand": { "type": "string" },
							"taskAutoInitEnabled": { "type": "boolean" },
							"verbosity": { "type": "string", "enum": ["low", "medium", "high"] },
							"modelMaxThinkingTokens": { "type": "number" },
							"modelMaxTokens": { "type": "number" },
							"reasoningEffort": { "type": "string", "enum": ["low", "medium", "high", "minimal"] },
							"enableReasoningEffort": { "type": "boolean" },
							"consecutiveMistakeLimit": { "type": "number" },
							"rateLimitSeconds": { "type": "number" },
							"modelTemperature": { "type": "number", "nullable": true },
							"fuzzyMatchThreshold": { "type": "number" },
							"todoListEnabled": { "type": "boolean" },
							"diffEnabled": { "type": "boolean" },
							"includeMaxTokens": { "type": "boolean" }
						},
						"required": ["apiProvider"],
						"type": "object"
					},
					{
						"properties": {
							"apiProvider": { "type": "string", "enum": ["vscode-lm"], "nullable": false },
							"vsCodeLmModelSelector": {
								"properties": {
									"id": { "type": "string" },
									"version": { "type": "string" },
									"family": { "type": "string" },
									"vendor": { "type": "string" }
								},
								"type": "object"
							},
							"taskAutoInitMessage": { "type": "string" },
							"taskAutoInitSlashCommand": { "type": "string" },
							"taskAutoInitEnabled": { "type": "boolean" },
							"verbosity": { "type": "string", "enum": ["low", "medium", "high"] },
							"modelMaxThinkingTokens": { "type": "number" },
							"modelMaxTokens": { "type": "number" },
							"reasoningEffort": { "type": "string", "enum": ["low", "medium", "high", "minimal"] },
							"enableReasoningEffort": { "type": "boolean" },
							"consecutiveMistakeLimit": { "type": "number" },
							"rateLimitSeconds": { "type": "number" },
							"modelTemperature": { "type": "number", "nullable": true },
							"fuzzyMatchThreshold": { "type": "number" },
							"todoListEnabled": { "type": "boolean" },
							"diffEnabled": { "type": "boolean" },
							"includeMaxTokens": { "type": "boolean" }
						},
						"required": ["apiProvider"],
						"type": "object"
					},
					{
						"properties": {
							"apiProvider": { "type": "string", "enum": ["lmstudio"], "nullable": false },
							"lmStudioSpeculativeDecodingEnabled": { "type": "boolean" },
							"lmStudioDraftModelId": { "type": "string" },
							"lmStudioBaseUrl": { "type": "string" },
							"lmStudioModelId": { "type": "string" },
							"taskAutoInitMessage": { "type": "string" },
							"taskAutoInitSlashCommand": { "type": "string" },
							"taskAutoInitEnabled": { "type": "boolean" },
							"verbosity": { "type": "string", "enum": ["low", "medium", "high"] },
							"modelMaxThinkingTokens": { "type": "number" },
							"modelMaxTokens": { "type": "number" },
							"reasoningEffort": { "type": "string", "enum": ["low", "medium", "high", "minimal"] },
							"enableReasoningEffort": { "type": "boolean" },
							"consecutiveMistakeLimit": { "type": "number" },
							"rateLimitSeconds": { "type": "number" },
							"modelTemperature": { "type": "number", "nullable": true },
							"fuzzyMatchThreshold": { "type": "number" },
							"todoListEnabled": { "type": "boolean" },
							"diffEnabled": { "type": "boolean" },
							"includeMaxTokens": { "type": "boolean" }
						},
						"required": ["apiProvider"],
						"type": "object"
					},
					{
						"properties": {
							"apiProvider": { "type": "string", "enum": ["gemini"], "nullable": false },
							"enableGrounding": { "type": "boolean" },
							"enableUrlContext": { "type": "boolean" },
							"googleGeminiBaseUrl": { "type": "string" },
							"geminiApiKey": { "type": "string" },
							"apiModelId": { "type": "string" },
							"taskAutoInitMessage": { "type": "string" },
							"taskAutoInitSlashCommand": { "type": "string" },
							"taskAutoInitEnabled": { "type": "boolean" },
							"verbosity": { "type": "string", "enum": ["low", "medium", "high"] },
							"modelMaxThinkingTokens": { "type": "number" },
							"modelMaxTokens": { "type": "number" },
							"reasoningEffort": { "type": "string", "enum": ["low", "medium", "high", "minimal"] },
							"enableReasoningEffort": { "type": "boolean" },
							"consecutiveMistakeLimit": { "type": "number" },
							"rateLimitSeconds": { "type": "number" },
							"modelTemperature": { "type": "number", "nullable": true },
							"fuzzyMatchThreshold": { "type": "number" },
							"todoListEnabled": { "type": "boolean" },
							"diffEnabled": { "type": "boolean" },
							"includeMaxTokens": { "type": "boolean" }
						},
						"required": ["apiProvider"],
						"type": "object"
					},
					{
						"properties": {
							"apiProvider": { "type": "string", "enum": ["openai-native"], "nullable": false },
							"openAiNativeServiceTier": { "type": "string", "enum": ["default", "flex", "priority"] },
							"openAiNativeBaseUrl": { "type": "string" },
							"openAiNativeApiKey": { "type": "string" },
							"apiModelId": { "type": "string" },
							"taskAutoInitMessage": { "type": "string" },
							"taskAutoInitSlashCommand": { "type": "string" },
							"taskAutoInitEnabled": { "type": "boolean" },
							"verbosity": { "type": "string", "enum": ["low", "medium", "high"] },
							"modelMaxThinkingTokens": { "type": "number" },
							"modelMaxTokens": { "type": "number" },
							"reasoningEffort": { "type": "string", "enum": ["low", "medium", "high", "minimal"] },
							"enableReasoningEffort": { "type": "boolean" },
							"consecutiveMistakeLimit": { "type": "number" },
							"rateLimitSeconds": { "type": "number" },
							"modelTemperature": { "type": "number", "nullable": true },
							"fuzzyMatchThreshold": { "type": "number" },
							"todoListEnabled": { "type": "boolean" },
							"diffEnabled": { "type": "boolean" },
							"includeMaxTokens": { "type": "boolean" }
						},
						"required": ["apiProvider"],
						"type": "object"
					},
					{
						"properties": {
							"apiProvider": { "type": "string", "enum": ["ovhcloud"], "nullable": false },
							"ovhCloudAiEndpointsBaseUrl": { "type": "string" },
							"ovhCloudAiEndpointsModelId": { "type": "string" },
							"ovhCloudAiEndpointsApiKey": { "type": "string" },
							"taskAutoInitMessage": { "type": "string" },
							"taskAutoInitSlashCommand": { "type": "string" },
							"taskAutoInitEnabled": { "type": "boolean" },
							"verbosity": { "type": "string", "enum": ["low", "medium", "high"] },
							"modelMaxThinkingTokens": { "type": "number" },
							"modelMaxTokens": { "type": "number" },
							"reasoningEffort": { "type": "string", "enum": ["low", "medium", "high", "minimal"] },
							"enableReasoningEffort": { "type": "boolean" },
							"consecutiveMistakeLimit": { "type": "number" },
							"rateLimitSeconds": { "type": "number" },
							"modelTemperature": { "type": "number", "nullable": true },
							"fuzzyMatchThreshold": { "type": "number" },
							"todoListEnabled": { "type": "boolean" },
							"diffEnabled": { "type": "boolean" },
							"includeMaxTokens": { "type": "boolean" }
						},
						"required": ["apiProvider"],
						"type": "object"
					},
					{
						"properties": {
							"apiProvider": { "type": "string", "enum": ["mistral"], "nullable": false },
							"mistralCodestralUrl": { "type": "string" },
							"mistralApiKey": { "type": "string" },
							"apiModelId": { "type": "string" },
							"taskAutoInitMessage": { "type": "string" },
							"taskAutoInitSlashCommand": { "type": "string" },
							"taskAutoInitEnabled": { "type": "boolean" },
							"verbosity": { "type": "string", "enum": ["low", "medium", "high"] },
							"modelMaxThinkingTokens": { "type": "number" },
							"modelMaxTokens": { "type": "number" },
							"reasoningEffort": { "type": "string", "enum": ["low", "medium", "high", "minimal"] },
							"enableReasoningEffort": { "type": "boolean" },
							"consecutiveMistakeLimit": { "type": "number" },
							"rateLimitSeconds": { "type": "number" },
							"modelTemperature": { "type": "number", "nullable": true },
							"fuzzyMatchThreshold": { "type": "number" },
							"todoListEnabled": { "type": "boolean" },
							"diffEnabled": { "type": "boolean" },
							"includeMaxTokens": { "type": "boolean" }
						},
						"required": ["apiProvider"],
						"type": "object"
					},
					{
						"properties": {
							"apiProvider": { "type": "string", "enum": ["deepseek"], "nullable": false },
							"deepSeekApiKey": { "type": "string" },
							"deepSeekBaseUrl": { "type": "string" },
							"apiModelId": { "type": "string" },
							"taskAutoInitMessage": { "type": "string" },
							"taskAutoInitSlashCommand": { "type": "string" },
							"taskAutoInitEnabled": { "type": "boolean" },
							"verbosity": { "type": "string", "enum": ["low", "medium", "high"] },
							"modelMaxThinkingTokens": { "type": "number" },
							"modelMaxTokens": { "type": "number" },
							"reasoningEffort": { "type": "string", "enum": ["low", "medium", "high", "minimal"] },
							"enableReasoningEffort": { "type": "boolean" },
							"consecutiveMistakeLimit": { "type": "number" },
							"rateLimitSeconds": { "type": "number" },
							"modelTemperature": { "type": "number", "nullable": true },
							"fuzzyMatchThreshold": { "type": "number" },
							"todoListEnabled": { "type": "boolean" },
							"diffEnabled": { "type": "boolean" },
							"includeMaxTokens": { "type": "boolean" }
						},
						"required": ["apiProvider"],
						"type": "object"
					},
					{
						"properties": {
							"apiProvider": { "type": "string", "enum": ["deepinfra"], "nullable": false },
							"deepInfraModelId": { "type": "string" },
							"deepInfraApiKey": { "type": "string" },
							"deepInfraBaseUrl": { "type": "string" },
							"apiModelId": { "type": "string" },
							"taskAutoInitMessage": { "type": "string" },
							"taskAutoInitSlashCommand": { "type": "string" },
							"taskAutoInitEnabled": { "type": "boolean" },
							"verbosity": { "type": "string", "enum": ["low", "medium", "high"] },
							"modelMaxThinkingTokens": { "type": "number" },
							"modelMaxTokens": { "type": "number" },
							"reasoningEffort": { "type": "string", "enum": ["low", "medium", "high", "minimal"] },
							"enableReasoningEffort": { "type": "boolean" },
							"consecutiveMistakeLimit": { "type": "number" },
							"rateLimitSeconds": { "type": "number" },
							"modelTemperature": { "type": "number", "nullable": true },
							"fuzzyMatchThreshold": { "type": "number" },
							"todoListEnabled": { "type": "boolean" },
							"diffEnabled": { "type": "boolean" },
							"includeMaxTokens": { "type": "boolean" }
						},
						"required": ["apiProvider"],
						"type": "object"
					},
					{
						"properties": {
							"apiProvider": { "type": "string", "enum": ["doubao"], "nullable": false },
							"doubaoApiKey": { "type": "string" },
							"doubaoBaseUrl": { "type": "string" },
							"apiModelId": { "type": "string" },
							"taskAutoInitMessage": { "type": "string" },
							"taskAutoInitSlashCommand": { "type": "string" },
							"taskAutoInitEnabled": { "type": "boolean" },
							"verbosity": { "type": "string", "enum": ["low", "medium", "high"] },
							"modelMaxThinkingTokens": { "type": "number" },
							"modelMaxTokens": { "type": "number" },
							"reasoningEffort": { "type": "string", "enum": ["low", "medium", "high", "minimal"] },
							"enableReasoningEffort": { "type": "boolean" },
							"consecutiveMistakeLimit": { "type": "number" },
							"rateLimitSeconds": { "type": "number" },
							"modelTemperature": { "type": "number", "nullable": true },
							"fuzzyMatchThreshold": { "type": "number" },
							"todoListEnabled": { "type": "boolean" },
							"diffEnabled": { "type": "boolean" },
							"includeMaxTokens": { "type": "boolean" }
						},
						"required": ["apiProvider"],
						"type": "object"
					},
					{
						"properties": {
							"apiProvider": { "type": "string", "enum": ["moonshot"], "nullable": false },
							"moonshotApiKey": { "type": "string" },
							"moonshotBaseUrl": {
								"type": "string",
								"enum": ["https://api.moonshot.ai/v1", "https://api.moonshot.cn/v1"]
							},
							"apiModelId": { "type": "string" },
							"taskAutoInitMessage": { "type": "string" },
							"taskAutoInitSlashCommand": { "type": "string" },
							"taskAutoInitEnabled": { "type": "boolean" },
							"verbosity": { "type": "string", "enum": ["low", "medium", "high"] },
							"modelMaxThinkingTokens": { "type": "number" },
							"modelMaxTokens": { "type": "number" },
							"reasoningEffort": { "type": "string", "enum": ["low", "medium", "high", "minimal"] },
							"enableReasoningEffort": { "type": "boolean" },
							"consecutiveMistakeLimit": { "type": "number" },
							"rateLimitSeconds": { "type": "number" },
							"modelTemperature": { "type": "number", "nullable": true },
							"fuzzyMatchThreshold": { "type": "number" },
							"todoListEnabled": { "type": "boolean" },
							"diffEnabled": { "type": "boolean" },
							"includeMaxTokens": { "type": "boolean" }
						},
						"required": ["apiProvider"],
						"type": "object"
					},
					{
						"properties": {
							"apiProvider": { "type": "string", "enum": ["unbound"], "nullable": false },
							"unboundModelId": { "type": "string" },
							"unboundApiKey": { "type": "string" },
							"taskAutoInitMessage": { "type": "string" },
							"taskAutoInitSlashCommand": { "type": "string" },
							"taskAutoInitEnabled": { "type": "boolean" },
							"verbosity": { "type": "string", "enum": ["low", "medium", "high"] },
							"modelMaxThinkingTokens": { "type": "number" },
							"modelMaxTokens": { "type": "number" },
							"reasoningEffort": { "type": "string", "enum": ["low", "medium", "high", "minimal"] },
							"enableReasoningEffort": { "type": "boolean" },
							"consecutiveMistakeLimit": { "type": "number" },
							"rateLimitSeconds": { "type": "number" },
							"modelTemperature": { "type": "number", "nullable": true },
							"fuzzyMatchThreshold": { "type": "number" },
							"todoListEnabled": { "type": "boolean" },
							"diffEnabled": { "type": "boolean" },
							"includeMaxTokens": { "type": "boolean" }
						},
						"required": ["apiProvider"],
						"type": "object"
					},
					{
						"properties": {
							"apiProvider": { "type": "string", "enum": ["requesty"], "nullable": false },
							"requestyModelId": { "type": "string" },
							"requestyApiKey": { "type": "string" },
							"requestyBaseUrl": { "type": "string" },
							"taskAutoInitMessage": { "type": "string" },
							"taskAutoInitSlashCommand": { "type": "string" },
							"taskAutoInitEnabled": { "type": "boolean" },
							"verbosity": { "type": "string", "enum": ["low", "medium", "high"] },
							"modelMaxThinkingTokens": { "type": "number" },
							"modelMaxTokens": { "type": "number" },
							"reasoningEffort": { "type": "string", "enum": ["low", "medium", "high", "minimal"] },
							"enableReasoningEffort": { "type": "boolean" },
							"consecutiveMistakeLimit": { "type": "number" },
							"rateLimitSeconds": { "type": "number" },
							"modelTemperature": { "type": "number", "nullable": true },
							"fuzzyMatchThreshold": { "type": "number" },
							"todoListEnabled": { "type": "boolean" },
							"diffEnabled": { "type": "boolean" },
							"includeMaxTokens": { "type": "boolean" }
						},
						"required": ["apiProvider"],
						"type": "object"
					},
					{
						"properties": {
							"apiProvider": { "type": "string", "enum": ["human-relay"], "nullable": false },
							"taskAutoInitMessage": { "type": "string" },
							"taskAutoInitSlashCommand": { "type": "string" },
							"taskAutoInitEnabled": { "type": "boolean" },
							"verbosity": { "type": "string", "enum": ["low", "medium", "high"] },
							"modelMaxThinkingTokens": { "type": "number" },
							"modelMaxTokens": { "type": "number" },
							"reasoningEffort": { "type": "string", "enum": ["low", "medium", "high", "minimal"] },
							"enableReasoningEffort": { "type": "boolean" },
							"consecutiveMistakeLimit": { "type": "number" },
							"rateLimitSeconds": { "type": "number" },
							"modelTemperature": { "type": "number", "nullable": true },
							"fuzzyMatchThreshold": { "type": "number" },
							"todoListEnabled": { "type": "boolean" },
							"diffEnabled": { "type": "boolean" },
							"includeMaxTokens": { "type": "boolean" }
						},
						"required": ["apiProvider"],
						"type": "object"
					},
					{
						"properties": {
							"apiProvider": { "type": "string", "enum": ["fake-ai"], "nullable": false },
							"fakeAi": {},
							"taskAutoInitMessage": { "type": "string" },
							"taskAutoInitSlashCommand": { "type": "string" },
							"taskAutoInitEnabled": { "type": "boolean" },
							"verbosity": { "type": "string", "enum": ["low", "medium", "high"] },
							"modelMaxThinkingTokens": { "type": "number" },
							"modelMaxTokens": { "type": "number" },
							"reasoningEffort": { "type": "string", "enum": ["low", "medium", "high", "minimal"] },
							"enableReasoningEffort": { "type": "boolean" },
							"consecutiveMistakeLimit": { "type": "number" },
							"rateLimitSeconds": { "type": "number" },
							"modelTemperature": { "type": "number", "nullable": true },
							"fuzzyMatchThreshold": { "type": "number" },
							"todoListEnabled": { "type": "boolean" },
							"diffEnabled": { "type": "boolean" },
							"includeMaxTokens": { "type": "boolean" }
						},
						"required": ["apiProvider"],
						"type": "object"
					},
					{
						"properties": {
							"apiProvider": { "type": "string", "enum": ["xai"], "nullable": false },
							"xaiApiKey": { "type": "string" },
							"apiModelId": { "type": "string" },
							"taskAutoInitMessage": { "type": "string" },
							"taskAutoInitSlashCommand": { "type": "string" },
							"taskAutoInitEnabled": { "type": "boolean" },
							"verbosity": { "type": "string", "enum": ["low", "medium", "high"] },
							"modelMaxThinkingTokens": { "type": "number" },
							"modelMaxTokens": { "type": "number" },
							"reasoningEffort": { "type": "string", "enum": ["low", "medium", "high", "minimal"] },
							"enableReasoningEffort": { "type": "boolean" },
							"consecutiveMistakeLimit": { "type": "number" },
							"rateLimitSeconds": { "type": "number" },
							"modelTemperature": { "type": "number", "nullable": true },
							"fuzzyMatchThreshold": { "type": "number" },
							"todoListEnabled": { "type": "boolean" },
							"diffEnabled": { "type": "boolean" },
							"includeMaxTokens": { "type": "boolean" }
						},
						"required": ["apiProvider"],
						"type": "object"
					},
					{
						"properties": {
							"apiProvider": { "type": "string", "enum": ["gemini-cli"], "nullable": false },
							"geminiCliProjectId": { "type": "string" },
							"geminiCliOAuthPath": { "type": "string" },
							"apiModelId": { "type": "string" },
							"taskAutoInitMessage": { "type": "string" },
							"taskAutoInitSlashCommand": { "type": "string" },
							"taskAutoInitEnabled": { "type": "boolean" },
							"verbosity": { "type": "string", "enum": ["low", "medium", "high"] },
							"modelMaxThinkingTokens": { "type": "number" },
							"modelMaxTokens": { "type": "number" },
							"reasoningEffort": { "type": "string", "enum": ["low", "medium", "high", "minimal"] },
							"enableReasoningEffort": { "type": "boolean" },
							"consecutiveMistakeLimit": { "type": "number" },
							"rateLimitSeconds": { "type": "number" },
							"modelTemperature": { "type": "number", "nullable": true },
							"fuzzyMatchThreshold": { "type": "number" },
							"todoListEnabled": { "type": "boolean" },
							"diffEnabled": { "type": "boolean" },
							"includeMaxTokens": { "type": "boolean" }
						},
						"required": ["apiProvider"],
						"type": "object"
					},
					{
						"properties": {
							"apiProvider": { "type": "string", "enum": ["hoodycode"], "nullable": false },
							"hoodycodeTesterWarningsDisabledUntil": { "type": "number" },
							"openRouterZdr": { "type": "boolean" },
							"openRouterProviderSort": { "type": "string", "enum": ["price", "throughput", "latency"] },
							"openRouterProviderDataCollection": { "type": "string", "enum": ["allow", "deny"] },
							"openRouterSpecificProvider": { "type": "string" },
							"hoodycodeModel": { "type": "string" },
							"hoodycodeOrganizationId": { "type": "string" },
							"hoodycodeToken": { "type": "string" },
							"taskAutoInitMessage": { "type": "string" },
							"taskAutoInitSlashCommand": { "type": "string" },
							"taskAutoInitEnabled": { "type": "boolean" },
							"verbosity": { "type": "string", "enum": ["low", "medium", "high"] },
							"modelMaxThinkingTokens": { "type": "number" },
							"modelMaxTokens": { "type": "number" },
							"reasoningEffort": { "type": "string", "enum": ["low", "medium", "high", "minimal"] },
							"enableReasoningEffort": { "type": "boolean" },
							"consecutiveMistakeLimit": { "type": "number" },
							"rateLimitSeconds": { "type": "number" },
							"modelTemperature": { "type": "number", "nullable": true },
							"fuzzyMatchThreshold": { "type": "number" },
							"todoListEnabled": { "type": "boolean" },
							"diffEnabled": { "type": "boolean" },
							"includeMaxTokens": { "type": "boolean" }
						},
						"required": ["apiProvider"],
						"type": "object"
					},
					{
						"properties": {
							"apiProvider": { "type": "string", "enum": ["virtual-quota-fallback"], "nullable": false },
							"profiles": {
								"items": {
									"properties": {
										"profileLimits": {
											"properties": {
												"requestsPerDay": { "type": "number" },
												"requestsPerHour": { "type": "number" },
												"requestsPerMinute": { "type": "number" },
												"tokensPerDay": { "type": "number" },
												"tokensPerHour": { "type": "number" },
												"tokensPerMinute": { "type": "number" }
											},
											"type": "object"
										},
										"profileId": { "type": "string" },
										"profileName": { "type": "string" }
									},
									"type": "object"
								},
								"type": "array"
							},
							"taskAutoInitMessage": { "type": "string" },
							"taskAutoInitSlashCommand": { "type": "string" },
							"taskAutoInitEnabled": { "type": "boolean" },
							"verbosity": { "type": "string", "enum": ["low", "medium", "high"] },
							"modelMaxThinkingTokens": { "type": "number" },
							"modelMaxTokens": { "type": "number" },
							"reasoningEffort": { "type": "string", "enum": ["low", "medium", "high", "minimal"] },
							"enableReasoningEffort": { "type": "boolean" },
							"consecutiveMistakeLimit": { "type": "number" },
							"rateLimitSeconds": { "type": "number" },
							"modelTemperature": { "type": "number", "nullable": true },
							"fuzzyMatchThreshold": { "type": "number" },
							"todoListEnabled": { "type": "boolean" },
							"diffEnabled": { "type": "boolean" },
							"includeMaxTokens": { "type": "boolean" }
						},
						"required": ["apiProvider"],
						"type": "object"
					},
					{
						"properties": {
							"apiProvider": { "type": "string", "enum": ["synthetic"], "nullable": false },
							"syntheticApiKey": { "type": "string" },
							"apiModelId": { "type": "string" },
							"taskAutoInitMessage": { "type": "string" },
							"taskAutoInitSlashCommand": { "type": "string" },
							"taskAutoInitEnabled": { "type": "boolean" },
							"verbosity": { "type": "string", "enum": ["low", "medium", "high"] },
							"modelMaxThinkingTokens": { "type": "number" },
							"modelMaxTokens": { "type": "number" },
							"reasoningEffort": { "type": "string", "enum": ["low", "medium", "high", "minimal"] },
							"enableReasoningEffort": { "type": "boolean" },
							"consecutiveMistakeLimit": { "type": "number" },
							"rateLimitSeconds": { "type": "number" },
							"modelTemperature": { "type": "number", "nullable": true },
							"fuzzyMatchThreshold": { "type": "number" },
							"todoListEnabled": { "type": "boolean" },
							"diffEnabled": { "type": "boolean" },
							"includeMaxTokens": { "type": "boolean" }
						},
						"required": ["apiProvider"],
						"type": "object"
					},
					{
						"properties": {
							"apiProvider": { "type": "string", "enum": ["groq"], "nullable": false },
							"groqApiKey": { "type": "string" },
							"apiModelId": { "type": "string" },
							"taskAutoInitMessage": { "type": "string" },
							"taskAutoInitSlashCommand": { "type": "string" },
							"taskAutoInitEnabled": { "type": "boolean" },
							"verbosity": { "type": "string", "enum": ["low", "medium", "high"] },
							"modelMaxThinkingTokens": { "type": "number" },
							"modelMaxTokens": { "type": "number" },
							"reasoningEffort": { "type": "string", "enum": ["low", "medium", "high", "minimal"] },
							"enableReasoningEffort": { "type": "boolean" },
							"consecutiveMistakeLimit": { "type": "number" },
							"rateLimitSeconds": { "type": "number" },
							"modelTemperature": { "type": "number", "nullable": true },
							"fuzzyMatchThreshold": { "type": "number" },
							"todoListEnabled": { "type": "boolean" },
							"diffEnabled": { "type": "boolean" },
							"includeMaxTokens": { "type": "boolean" }
						},
						"required": ["apiProvider"],
						"type": "object"
					},
					{
						"properties": {
							"apiProvider": { "type": "string", "enum": ["huggingface"], "nullable": false },
							"huggingFaceInferenceProvider": { "type": "string" },
							"huggingFaceModelId": { "type": "string" },
							"huggingFaceApiKey": { "type": "string" },
							"taskAutoInitMessage": { "type": "string" },
							"taskAutoInitSlashCommand": { "type": "string" },
							"taskAutoInitEnabled": { "type": "boolean" },
							"verbosity": { "type": "string", "enum": ["low", "medium", "high"] },
							"modelMaxThinkingTokens": { "type": "number" },
							"modelMaxTokens": { "type": "number" },
							"reasoningEffort": { "type": "string", "enum": ["low", "medium", "high", "minimal"] },
							"enableReasoningEffort": { "type": "boolean" },
							"consecutiveMistakeLimit": { "type": "number" },
							"rateLimitSeconds": { "type": "number" },
							"modelTemperature": { "type": "number", "nullable": true },
							"fuzzyMatchThreshold": { "type": "number" },
							"todoListEnabled": { "type": "boolean" },
							"diffEnabled": { "type": "boolean" },
							"includeMaxTokens": { "type": "boolean" }
						},
						"required": ["apiProvider"],
						"type": "object"
					},
					{
						"properties": {
							"apiProvider": { "type": "string", "enum": ["chutes"], "nullable": false },
							"chutesApiKey": { "type": "string" },
							"apiModelId": { "type": "string" },
							"taskAutoInitMessage": { "type": "string" },
							"taskAutoInitSlashCommand": { "type": "string" },
							"taskAutoInitEnabled": { "type": "boolean" },
							"verbosity": { "type": "string", "enum": ["low", "medium", "high"] },
							"modelMaxThinkingTokens": { "type": "number" },
							"modelMaxTokens": { "type": "number" },
							"reasoningEffort": { "type": "string", "enum": ["low", "medium", "high", "minimal"] },
							"enableReasoningEffort": { "type": "boolean" },
							"consecutiveMistakeLimit": { "type": "number" },
							"rateLimitSeconds": { "type": "number" },
							"modelTemperature": { "type": "number", "nullable": true },
							"fuzzyMatchThreshold": { "type": "number" },
							"todoListEnabled": { "type": "boolean" },
							"diffEnabled": { "type": "boolean" },
							"includeMaxTokens": { "type": "boolean" }
						},
						"required": ["apiProvider"],
						"type": "object"
					},
					{
						"properties": {
							"apiProvider": { "type": "string", "enum": ["litellm"], "nullable": false },
							"litellmUsePromptCache": { "type": "boolean" },
							"litellmModelId": { "type": "string" },
							"litellmApiKey": { "type": "string" },
							"litellmBaseUrl": { "type": "string" },
							"taskAutoInitMessage": { "type": "string" },
							"taskAutoInitSlashCommand": { "type": "string" },
							"taskAutoInitEnabled": { "type": "boolean" },
							"verbosity": { "type": "string", "enum": ["low", "medium", "high"] },
							"modelMaxThinkingTokens": { "type": "number" },
							"modelMaxTokens": { "type": "number" },
							"reasoningEffort": { "type": "string", "enum": ["low", "medium", "high", "minimal"] },
							"enableReasoningEffort": { "type": "boolean" },
							"consecutiveMistakeLimit": { "type": "number" },
							"rateLimitSeconds": { "type": "number" },
							"modelTemperature": { "type": "number", "nullable": true },
							"fuzzyMatchThreshold": { "type": "number" },
							"todoListEnabled": { "type": "boolean" },
							"diffEnabled": { "type": "boolean" },
							"includeMaxTokens": { "type": "boolean" }
						},
						"required": ["apiProvider"],
						"type": "object"
					},
					{
						"properties": {
							"apiProvider": { "type": "string", "enum": ["cerebras"], "nullable": false },
							"cerebrasApiKey": { "type": "string" },
							"apiModelId": { "type": "string" },
							"taskAutoInitMessage": { "type": "string" },
							"taskAutoInitSlashCommand": { "type": "string" },
							"taskAutoInitEnabled": { "type": "boolean" },
							"verbosity": { "type": "string", "enum": ["low", "medium", "high"] },
							"modelMaxThinkingTokens": { "type": "number" },
							"modelMaxTokens": { "type": "number" },
							"reasoningEffort": { "type": "string", "enum": ["low", "medium", "high", "minimal"] },
							"enableReasoningEffort": { "type": "boolean" },
							"consecutiveMistakeLimit": { "type": "number" },
							"rateLimitSeconds": { "type": "number" },
							"modelTemperature": { "type": "number", "nullable": true },
							"fuzzyMatchThreshold": { "type": "number" },
							"todoListEnabled": { "type": "boolean" },
							"diffEnabled": { "type": "boolean" },
							"includeMaxTokens": { "type": "boolean" }
						},
						"required": ["apiProvider"],
						"type": "object"
					},
					{
						"properties": {
							"apiProvider": { "type": "string", "enum": ["sambanova"], "nullable": false },
							"sambaNovaApiKey": { "type": "string" },
							"apiModelId": { "type": "string" },
							"taskAutoInitMessage": { "type": "string" },
							"taskAutoInitSlashCommand": { "type": "string" },
							"taskAutoInitEnabled": { "type": "boolean" },
							"verbosity": { "type": "string", "enum": ["low", "medium", "high"] },
							"modelMaxThinkingTokens": { "type": "number" },
							"modelMaxTokens": { "type": "number" },
							"reasoningEffort": { "type": "string", "enum": ["low", "medium", "high", "minimal"] },
							"enableReasoningEffort": { "type": "boolean" },
							"consecutiveMistakeLimit": { "type": "number" },
							"rateLimitSeconds": { "type": "number" },
							"modelTemperature": { "type": "number", "nullable": true },
							"fuzzyMatchThreshold": { "type": "number" },
							"todoListEnabled": { "type": "boolean" },
							"diffEnabled": { "type": "boolean" },
							"includeMaxTokens": { "type": "boolean" }
						},
						"required": ["apiProvider"],
						"type": "object"
					},
					{
						"properties": {
							"apiProvider": { "type": "string", "enum": ["zai"], "nullable": false },
							"zaiApiLine": {
								"type": "string",
								"enum": ["international_coding", "international", "china_coding", "china"]
							},
							"zaiApiKey": { "type": "string" },
							"apiModelId": { "type": "string" },
							"taskAutoInitMessage": { "type": "string" },
							"taskAutoInitSlashCommand": { "type": "string" },
							"taskAutoInitEnabled": { "type": "boolean" },
							"verbosity": { "type": "string", "enum": ["low", "medium", "high"] },
							"modelMaxThinkingTokens": { "type": "number" },
							"modelMaxTokens": { "type": "number" },
							"reasoningEffort": { "type": "string", "enum": ["low", "medium", "high", "minimal"] },
							"enableReasoningEffort": { "type": "boolean" },
							"consecutiveMistakeLimit": { "type": "number" },
							"rateLimitSeconds": { "type": "number" },
							"modelTemperature": { "type": "number", "nullable": true },
							"fuzzyMatchThreshold": { "type": "number" },
							"todoListEnabled": { "type": "boolean" },
							"diffEnabled": { "type": "boolean" },
							"includeMaxTokens": { "type": "boolean" }
						},
						"required": ["apiProvider"],
						"type": "object"
					},
					{
						"properties": {
							"apiProvider": { "type": "string", "enum": ["fireworks"], "nullable": false },
							"fireworksApiKey": { "type": "string" },
							"apiModelId": { "type": "string" },
							"taskAutoInitMessage": { "type": "string" },
							"taskAutoInitSlashCommand": { "type": "string" },
							"taskAutoInitEnabled": { "type": "boolean" },
							"verbosity": { "type": "string", "enum": ["low", "medium", "high"] },
							"modelMaxThinkingTokens": { "type": "number" },
							"modelMaxTokens": { "type": "number" },
							"reasoningEffort": { "type": "string", "enum": ["low", "medium", "high", "minimal"] },
							"enableReasoningEffort": { "type": "boolean" },
							"consecutiveMistakeLimit": { "type": "number" },
							"rateLimitSeconds": { "type": "number" },
							"modelTemperature": { "type": "number", "nullable": true },
							"fuzzyMatchThreshold": { "type": "number" },
							"todoListEnabled": { "type": "boolean" },
							"diffEnabled": { "type": "boolean" },
							"includeMaxTokens": { "type": "boolean" }
						},
						"required": ["apiProvider"],
						"type": "object"
					},
					{
						"properties": {
							"apiProvider": { "type": "string", "enum": ["featherless"], "nullable": false },
							"featherlessApiKey": { "type": "string" },
							"apiModelId": { "type": "string" },
							"taskAutoInitMessage": { "type": "string" },
							"taskAutoInitSlashCommand": { "type": "string" },
							"taskAutoInitEnabled": { "type": "boolean" },
							"verbosity": { "type": "string", "enum": ["low", "medium", "high"] },
							"modelMaxThinkingTokens": { "type": "number" },
							"modelMaxTokens": { "type": "number" },
							"reasoningEffort": { "type": "string", "enum": ["low", "medium", "high", "minimal"] },
							"enableReasoningEffort": { "type": "boolean" },
							"consecutiveMistakeLimit": { "type": "number" },
							"rateLimitSeconds": { "type": "number" },
							"modelTemperature": { "type": "number", "nullable": true },
							"fuzzyMatchThreshold": { "type": "number" },
							"todoListEnabled": { "type": "boolean" },
							"diffEnabled": { "type": "boolean" },
							"includeMaxTokens": { "type": "boolean" }
						},
						"required": ["apiProvider"],
						"type": "object"
					},
					{
						"properties": {
							"apiProvider": { "type": "string", "enum": ["io-intelligence"], "nullable": false },
							"ioIntelligenceApiKey": { "type": "string" },
							"ioIntelligenceModelId": { "type": "string" },
							"apiModelId": { "type": "string" },
							"taskAutoInitMessage": { "type": "string" },
							"taskAutoInitSlashCommand": { "type": "string" },
							"taskAutoInitEnabled": { "type": "boolean" },
							"verbosity": { "type": "string", "enum": ["low", "medium", "high"] },
							"modelMaxThinkingTokens": { "type": "number" },
							"modelMaxTokens": { "type": "number" },
							"reasoningEffort": { "type": "string", "enum": ["low", "medium", "high", "minimal"] },
							"enableReasoningEffort": { "type": "boolean" },
							"consecutiveMistakeLimit": { "type": "number" },
							"rateLimitSeconds": { "type": "number" },
							"modelTemperature": { "type": "number", "nullable": true },
							"fuzzyMatchThreshold": { "type": "number" },
							"todoListEnabled": { "type": "boolean" },
							"diffEnabled": { "type": "boolean" },
							"includeMaxTokens": { "type": "boolean" }
						},
						"required": ["apiProvider"],
						"type": "object"
					},
					{
						"properties": {
							"apiProvider": { "type": "string", "enum": ["qwen-code"], "nullable": false },
							"qwenCodeOauthPath": { "type": "string" },
							"apiModelId": { "type": "string" },
							"taskAutoInitMessage": { "type": "string" },
							"taskAutoInitSlashCommand": { "type": "string" },
							"taskAutoInitEnabled": { "type": "boolean" },
							"verbosity": { "type": "string", "enum": ["low", "medium", "high"] },
							"modelMaxThinkingTokens": { "type": "number" },
							"modelMaxTokens": { "type": "number" },
							"reasoningEffort": { "type": "string", "enum": ["low", "medium", "high", "minimal"] },
							"enableReasoningEffort": { "type": "boolean" },
							"consecutiveMistakeLimit": { "type": "number" },
							"rateLimitSeconds": { "type": "number" },
							"modelTemperature": { "type": "number", "nullable": true },
							"fuzzyMatchThreshold": { "type": "number" },
							"todoListEnabled": { "type": "boolean" },
							"diffEnabled": { "type": "boolean" },
							"includeMaxTokens": { "type": "boolean" }
						},
						"required": ["apiProvider"],
						"type": "object"
					},
					{
						"properties": {
							"apiProvider": { "type": "string", "enum": ["roo"], "nullable": false },
							"apiModelId": { "type": "string" },
							"taskAutoInitMessage": { "type": "string" },
							"taskAutoInitSlashCommand": { "type": "string" },
							"taskAutoInitEnabled": { "type": "boolean" },
							"verbosity": { "type": "string", "enum": ["low", "medium", "high"] },
							"modelMaxThinkingTokens": { "type": "number" },
							"modelMaxTokens": { "type": "number" },
							"reasoningEffort": { "type": "string", "enum": ["low", "medium", "high", "minimal"] },
							"enableReasoningEffort": { "type": "boolean" },
							"consecutiveMistakeLimit": { "type": "number" },
							"rateLimitSeconds": { "type": "number" },
							"modelTemperature": { "type": "number", "nullable": true },
							"fuzzyMatchThreshold": { "type": "number" },
							"todoListEnabled": { "type": "boolean" },
							"diffEnabled": { "type": "boolean" },
							"includeMaxTokens": { "type": "boolean" }
						},
						"required": ["apiProvider"],
						"type": "object"
					},
					{
						"properties": {
							"apiProvider": { "type": "string", "enum": ["vercel-ai-gateway"], "nullable": false },
							"vercelAiGatewayModelId": { "type": "string" },
							"vercelAiGatewayApiKey": { "type": "string" },
							"taskAutoInitMessage": { "type": "string" },
							"taskAutoInitSlashCommand": { "type": "string" },
							"taskAutoInitEnabled": { "type": "boolean" },
							"verbosity": { "type": "string", "enum": ["low", "medium", "high"] },
							"modelMaxThinkingTokens": { "type": "number" },
							"modelMaxTokens": { "type": "number" },
							"reasoningEffort": { "type": "string", "enum": ["low", "medium", "high", "minimal"] },
							"enableReasoningEffort": { "type": "boolean" },
							"consecutiveMistakeLimit": { "type": "number" },
							"rateLimitSeconds": { "type": "number" },
							"modelTemperature": { "type": "number", "nullable": true },
							"fuzzyMatchThreshold": { "type": "number" },
							"todoListEnabled": { "type": "boolean" },
							"diffEnabled": { "type": "boolean" },
							"includeMaxTokens": { "type": "boolean" }
						},
						"required": ["apiProvider"],
						"type": "object"
					},
					{
						"properties": {
							"apiProvider": {},
							"taskAutoInitMessage": { "type": "string" },
							"taskAutoInitSlashCommand": { "type": "string" },
							"taskAutoInitEnabled": { "type": "boolean" },
							"verbosity": { "type": "string", "enum": ["low", "medium", "high"] },
							"modelMaxThinkingTokens": { "type": "number" },
							"modelMaxTokens": { "type": "number" },
							"reasoningEffort": { "type": "string", "enum": ["low", "medium", "high", "minimal"] },
							"enableReasoningEffort": { "type": "boolean" },
							"consecutiveMistakeLimit": { "type": "number" },
							"rateLimitSeconds": { "type": "number" },
							"modelTemperature": { "type": "number", "nullable": true },
							"fuzzyMatchThreshold": { "type": "number" },
							"todoListEnabled": { "type": "boolean" },
							"diffEnabled": { "type": "boolean" },
							"includeMaxTokens": { "type": "boolean" }
						},
						"type": "object"
					}
				],
				"description": "Provider Settings with Discriminated Union\nThis uses TypeScript discriminated..."
			},
			"ProfileDetails": {
				"allOf": [
					{ "$ref": "#/components/schemas/ProviderSettingsDiscriminated" },
					{
						"properties": {
							"isActive": {
								"type": "boolean",
								"description": "Whether this profile is currently active"
							},
							"name": { "type": "string", "description": "Profile name" }
						},
						"required": ["name"],
						"type": "object"
					}
				],
				"description": "Full profile details\nUses discriminated union for proper provider-specific fi..."
			},
			"ProfileListItem": {
				"description": "Profile list item (lightweight summary)",
				"properties": {
					"name": { "type": "string", "description": "Profile name/identifier" },
					"id": { "type": "string", "description": "Unique profile ID" },
					"apiProvider": {
						"type": "string",
						"description": "AI provider (e.g., 'anthropic', 'openai', 'openrouter')"
					},
					"modelId": { "type": "string", "description": "Model ID (cleaned, without provider prefix)" },
					"isActive": { "type": "boolean", "description": "Whether this profile is currently active" },
					"config": {
						"$ref": "#/components/schemas/ProfileDetails",
						"description": "Full configuration (only included when includeConfig=true, with secrets redac..."
					}
				},
				"required": ["name", "id"],
				"type": "object"
			},
			"CreateProfileResponse": {
				"description": "Profile creation response",
				"properties": {
					"success": { "type": "boolean", "enum": [true] },
					"message": { "type": "string" },
					"id": { "type": "string", "description": "Generated profile ID" },
					"name": { "type": "string", "description": "Profile name" }
				},
				"required": ["success", "message", "id", "name"],
				"type": "object"
			},
			"CreateProfileRequest": {
				"description": "Profile creation request\nUses discriminated union to ensure only valid fields...",
				"properties": {
					"name": { "type": "string", "description": "Unique profile name" },
					"config": {
						"$ref": "#/components/schemas/ProviderSettingsDiscriminated",
						"description": "Profile configuration with discriminator on apiProvider"
					}
				},
				"required": ["name", "config"],
				"type": "object"
			},
			"UpdateProfileResponse": {
				"description": "Profile update response",
				"properties": {
					"success": { "type": "boolean", "enum": [true] },
					"message": { "type": "string" },
					"id": { "type": "string", "description": "Profile ID" },
					"name": { "type": "string", "description": "Profile name" },
					"config": {
						"$ref": "#/components/schemas/ProfileDetails",
						"description": "Full updated configuration (with secrets redacted)"
					}
				},
				"required": ["success", "message", "id", "name"],
				"type": "object"
			},
			"UpdateProfileRequest": {
				"description": "Profile update request\nUses discriminated union to ensure only valid fields p...",
				"properties": {
					"config": {
						"$ref": "#/components/schemas/ProviderSettingsDiscriminated",
						"description": "Updated profile configuration with discriminator on apiProvider"
					}
				},
				"required": ["config"],
				"type": "object"
			},
			"DeleteProfileResponse": {
				"description": "Profile deletion response",
				"properties": { "success": { "type": "boolean", "enum": [true] }, "message": { "type": "string" } },
				"required": ["success", "message"],
				"type": "object"
			},
			"ActivateProfileResponse": {
				"description": "Profile activation response",
				"properties": {
					"success": { "type": "boolean", "enum": [true] },
					"message": { "type": "string" },
					"profile": {
						"properties": {
							"config": {
								"$ref": "#/components/schemas/ProfileDetails",
								"description": "Full configuration (with secrets redacted)"
							},
							"isActive": {
								"type": "boolean",
								"enum": [true],
								"description": "Whether this profile is now active (always true after activation)"
							},
							"id": { "type": "string", "description": "Profile ID" },
							"name": { "type": "string", "description": "Profile name" }
						},
						"required": ["config", "isActive", "id", "name"],
						"type": "object",
						"description": "Activated profile details (with secrets redacted)"
					}
				},
				"required": ["success", "message", "profile"],
				"type": "object"
			},
			"ModeProfileResponse": {
				"description": "Mode profile details response",
				"properties": {
					"mode": { "type": "string", "description": "Mode slug" },
					"profileId": { "type": "string", "description": "Assigned profile ID" },
					"profileName": { "type": "string", "description": "Assigned profile name" },
					"profile": {
						"$ref": "#/components/schemas/ProfileDetails",
						"description": "Full profile details (with secrets redacted)"
					}
				},
				"required": ["mode", "profileId", "profileName", "profile"],
				"type": "object"
			},
			"SetModeProfileResponse": {
				"description": "Mode profile assignment response",
				"properties": {
					"success": { "type": "boolean", "enum": [true] },
					"message": { "type": "string" },
					"mode": { "type": "string", "description": "Mode slug" },
					"profileId": { "type": "string", "description": "Assigned profile ID" }
				},
				"required": ["success", "message", "mode", "profileId"],
				"type": "object"
			},
			"SetModeProfileRequest": {
				"description": "Mode profile assignment request",
				"properties": {
					"profileId": { "type": "string", "description": "Profile ID to assign" },
					"profileName": {
						"type": "string",
						"description": "Profile name to assign (alternative to profileId)"
					}
				},
				"type": "object"
			},
			"MemoryEntry": {
				"description": "Memory entry metadata",
				"properties": {
					"id": { "type": "string", "description": "Unique memory ID (e.g., mem_abc123)" },
					"path": { "type": "string", "description": "File path relative to rules directory" },
					"title": { "type": "string", "description": "Human-readable title" },
					"content": { "type": "string", "description": "Markdown content" },
					"scope": { "type": "string", "enum": ["global", "local"], "description": "Storage scope" },
					"category": { "type": "string", "description": "Optional category" },
					"tags": { "items": { "type": "string" }, "type": "array", "description": "Optional tags" },
					"enabled": { "type": "boolean", "description": "Enabled status" },
					"createdAt": { "type": "string", "description": "Creation timestamp" },
					"updatedAt": { "type": "string", "description": "Last update timestamp" },
					"size": { "type": "number", "description": "File size in bytes" },
					"metadata": {
						"properties": {
							"autoGenerated": { "type": "boolean" },
							"taskId": { "type": "string" },
							"source": { "type": "string" }
						},
						"type": "object",
						"description": "Metadata"
					}
				},
				"required": ["id", "path", "title", "content", "scope", "enabled", "createdAt", "updatedAt"],
				"type": "object"
			},
			"MemoryListResponse": {
				"description": "Memory list response",
				"properties": {
					"entries": {
						"items": { "$ref": "#/components/schemas/MemoryEntry" },
						"type": "array",
						"description": "Memory entries"
					},
					"count": { "type": "number", "description": "Total count" },
					"scope": {
						"type": "string",
						"enum": ["global", "local", "all"],
						"description": "Scope filter applied"
					}
				},
				"required": ["entries", "count"],
				"type": "object"
			},
			"MemoryStatsResponse": {
				"description": "Memory statistics response",
				"properties": {
					"total": { "type": "number", "description": "Total memory entries" },
					"enabled": { "type": "number", "description": "Enabled entries" },
					"disabled": { "type": "number", "description": "Disabled entries" },
					"global": { "type": "number", "description": "Global entries" },
					"local": { "type": "number", "description": "Local entries" },
					"totalSize": { "type": "number", "description": "Total size in bytes" },
					"categories": {
						"$ref": "#/components/schemas/Record_string.number_",
						"description": "Categories breakdown"
					}
				},
				"required": ["total", "enabled", "disabled", "global", "local", "totalSize", "categories"],
				"type": "object"
			},
			"CreateMemoryResponse": {
				"description": "Create memory response",
				"properties": {
					"success": { "type": "boolean", "enum": [true] },
					"message": { "type": "string" },
					"entry": { "$ref": "#/components/schemas/MemoryEntry", "description": "Created memory entry" }
				},
				"required": ["success", "message", "entry"],
				"type": "object"
			},
			"CreateMemoryRequest": {
				"description": "Create memory request",
				"properties": {
					"filename": { "type": "string", "description": "File name (e.g., \"api-patterns.md\")" },
					"content": { "type": "string", "description": "Markdown content" },
					"scope": { "type": "string", "enum": ["global", "local"], "description": "Storage scope" },
					"category": { "type": "string", "description": "Optional category" },
					"tags": { "items": { "type": "string" }, "type": "array", "description": "Optional tags" },
					"metadata": {
						"properties": {
							"autoGenerated": { "type": "boolean" },
							"taskId": { "type": "string" },
							"source": { "type": "string" }
						},
						"type": "object",
						"description": "Optional metadata"
					}
				},
				"required": ["filename", "content", "scope"],
				"type": "object"
			},
			"UpdateMemoryResponse": {
				"description": "Update memory response",
				"properties": {
					"success": { "type": "boolean", "enum": [true] },
					"message": { "type": "string" },
					"entry": { "$ref": "#/components/schemas/MemoryEntry", "description": "Updated memory entry" }
				},
				"required": ["success", "message", "entry"],
				"type": "object"
			},
			"UpdateMemoryRequest": {
				"description": "Update memory request",
				"properties": {
					"content": { "type": "string", "description": "Updated content" },
					"enabled": { "type": "boolean", "description": "Updated enabled status" },
					"tags": { "items": { "type": "string" }, "type": "array", "description": "Updated tags" },
					"category": { "type": "string", "description": "Updated category" }
				},
				"type": "object"
			},
			"ToggleMemoryResponse": {
				"description": "Toggle memory response",
				"properties": {
					"success": { "type": "boolean", "enum": [true] },
					"message": { "type": "string" },
					"enabled": { "type": "boolean" }
				},
				"required": ["success", "message", "enabled"],
				"type": "object"
			},
			"MemorySearchResult": {
				"description": "Memory search result",
				"properties": {
					"entry": { "$ref": "#/components/schemas/MemoryEntry", "description": "Memory entry" },
					"score": { "type": "number", "description": "Relevance score (0-1)" },
					"matches": { "items": { "type": "string" }, "type": "array", "description": "Matched snippets" }
				},
				"required": ["entry", "score"],
				"type": "object"
			},
			"MemorySearchResponse": {
				"description": "Memory search response",
				"properties": {
					"results": {
						"items": { "$ref": "#/components/schemas/MemorySearchResult" },
						"type": "array",
						"description": "Search results"
					},
					"count": { "type": "number", "description": "Total results" },
					"query": { "type": "string", "description": "Search query" }
				},
				"required": ["results", "count", "query"],
				"type": "object"
			},
			"MemorySuggestion": {
				"description": "AI suggestion for memory creation",
				"properties": {
					"type": {
						"type": "string",
						"enum": ["repetition", "success", "error_fix", "best_practice"],
						"description": "Suggestion type"
					},
					"title": { "type": "string", "description": "Suggested title" },
					"reason": { "type": "string", "description": "Reason for suggestion" },
					"proposedContent": { "type": "string", "description": "Proposed content" },
					"confidence": { "type": "number", "description": "Confidence score (0-1)" }
				},
				"required": ["type", "title", "reason", "proposedContent", "confidence"],
				"type": "object"
			},
			"MemorySuggestionsResponse": {
				"description": "Memory suggestions response",
				"properties": {
					"suggestions": {
						"items": { "$ref": "#/components/schemas/MemorySuggestion" },
						"type": "array",
						"description": "Suggestions"
					},
					"count": { "type": "number", "description": "Total suggestions" }
				},
				"required": ["suggestions", "count"],
				"type": "object"
			},
			"McpServerListResponse": {
				"properties": {
					"servers": { "items": {}, "type": "array" },
					"total": { "type": "number" },
					"message": { "type": "string" }
				},
				"required": ["servers", "total"],
				"type": "object"
			},
			"McpMarketplaceResponse": {
				"properties": {
					"catalog": {
						"properties": { "items": { "items": {}, "type": "array" } },
						"required": ["items"],
						"type": "object"
					}
				},
				"required": ["catalog"],
				"type": "object"
			},
			"InstallMcpResponse": {
				"properties": {
					"success": { "type": "boolean" },
					"mcpId": { "type": "string" },
					"message": { "type": "string" }
				},
				"required": ["success", "mcpId", "message"],
				"type": "object"
			},
			"InstallMcpRequest": {
				"properties": { "mcpId": { "type": "string" } },
				"required": ["mcpId"],
				"type": "object"
			},
			"LogEntry": {
				"description": "A single log entry with timestamp",
				"properties": { "timestamp": { "type": "string" }, "message": { "type": "string" } },
				"required": ["timestamp", "message"],
				"type": "object"
			},
			"LogsResponse": {
				"description": "Response containing log entries and buffer metadata.",
				"properties": {
					"logs": { "items": { "$ref": "#/components/schemas/LogEntry" }, "type": "array" },
					"totalInBuffer": { "type": "number" },
					"maxBufferSize": { "type": "number" }
				},
				"required": ["logs", "totalInBuffer", "maxBufferSize"],
				"type": "object"
			},
			"ProcessMetrics": {
				"description": "Process resource usage metrics\nProvides real-time monitoring of the server's...",
				"properties": {
					"memoryUsageMB": { "type": "number", "description": "Memory usage in MB" },
					"memoryPercent": {
						"type": "number",
						"description": "Memory usage as percentage of total system memory"
					},
					"cpuPercent": {
						"type": "number",
						"description": "CPU usage percentage (0-100 per core, can exceed 100 on multi-core systems)"
					},
					"pid": { "type": "number", "description": "Process ID" },
					"heapUsedMB": { "type": "number", "description": "Node.js heap used in MB" },
					"heapTotalMB": { "type": "number", "description": "Node.js heap total in MB" },
					"externalMB": { "type": "number", "description": "External memory (buffers, C++ objects) in MB" }
				},
				"required": [
					"memoryUsageMB",
					"memoryPercent",
					"cpuPercent",
					"pid",
					"heapUsedMB",
					"heapTotalMB",
					"externalMB"
				],
				"type": "object"
			},
			"HealthCheckResponse": {
				"description": "Health check response",
				"properties": {
					"status": { "type": "string", "enum": ["ok", "error"], "description": "Server health status" },
					"version": { "type": "string", "description": "API version" },
					"uptime": { "type": "number", "description": "Server uptime in seconds" },
					"activeConnections": { "type": "number", "description": "Number of active WebSocket connections" },
					"port": { "type": "number", "description": "Server port" },
					"process": {
						"$ref": "#/components/schemas/ProcessMetrics",
						"description": "Process resource usage metrics"
					}
				},
				"required": ["status", "version", "uptime", "activeConnections", "port", "process"],
				"type": "object"
			},
			"FileEntry": {
				"properties": {
					"path": { "type": "string" },
					"name": { "type": "string" },
					"type": { "type": "string", "enum": ["file", "directory"] },
					"size": { "type": "number" },
					"created": { "type": "string" },
					"modified": { "type": "string" },
					"children": { "items": { "$ref": "#/components/schemas/FileEntry" }, "type": "array" }
				},
				"required": ["path", "name", "type"],
				"type": "object"
			},
			"ListFilesResponse": {
				"properties": {
					"files": { "items": { "$ref": "#/components/schemas/FileEntry" }, "type": "array" },
					"total": { "type": "number" },
					"workspace": { "type": "string" },
					"truncated": { "type": "boolean" },
					"limitReached": { "type": "boolean" }
				},
				"required": ["files", "total", "workspace", "truncated", "limitReached"],
				"type": "object"
			},
			"FileContent": {
				"properties": {
					"path": { "type": "string" },
					"content": { "type": "string" },
					"size": { "type": "number" },
					"error": { "type": "string" },
					"success": { "type": "boolean" }
				},
				"required": ["path", "success"],
				"type": "object"
			},
			"ReadFilesResponse": {
				"properties": {
					"files": { "items": { "$ref": "#/components/schemas/FileContent" }, "type": "array" },
					"workspace": { "type": "string" }
				},
				"required": ["files", "workspace"],
				"type": "object"
			},
			"WorkspaceInfoResponse": {
				"properties": {
					"path": { "type": "string" },
					"exists": { "type": "boolean" },
					"mode": { "type": "string" },
					"customInstructions": { "type": "string" }
				},
				"required": ["exists"],
				"type": "object"
			},
			"Record_string.any_": {
				"properties": {},
				"type": "object",
				"description": "Construct a type with a set of properties K of type T"
			},
			"OpenAPISpec": {
				"description": "OpenAPI Specification (subset for typing)",
				"properties": {
					"openapi": { "type": "string" },
					"info": {
						"properties": {
							"description": { "type": "string" },
							"version": { "type": "string" },
							"title": { "type": "string" }
						},
						"required": ["description", "version", "title"],
						"type": "object"
					},
					"paths": { "$ref": "#/components/schemas/Record_string.any_" },
					"components": { "$ref": "#/components/schemas/Record_string.any_" }
				},
				"required": ["openapi", "info", "paths"],
				"type": "object"
			},
			"CommandListItem": {
				"properties": {
					"name": { "type": "string" },
					"source": { "type": "string" },
					"description": { "type": "string" },
					"argumentHint": { "type": "string" },
					"filePath": { "type": "string" },
					"content": { "type": "string" }
				},
				"required": ["name", "source", "filePath"],
				"type": "object"
			},
			"CommandsListResponse": {
				"properties": {
					"commands": { "items": { "$ref": "#/components/schemas/CommandListItem" }, "type": "array" },
					"total": { "type": "number" }
				},
				"required": ["commands", "total"],
				"type": "object"
			},
			"CommandNamesResponse": {
				"properties": {
					"names": { "items": { "type": "string" }, "type": "array" },
					"total": { "type": "number" }
				},
				"required": ["names", "total"],
				"type": "object"
			},
			"CommandDetails": {
				"properties": {
					"name": { "type": "string" },
					"source": { "type": "string" },
					"description": { "type": "string" },
					"argumentHint": { "type": "string" },
					"filePath": { "type": "string" },
					"content": { "type": "string" }
				},
				"required": ["name", "source", "filePath", "content"],
				"type": "object"
			},
			"CreateCommandResponse": {
				"properties": {
					"success": { "type": "boolean" },
					"command": { "$ref": "#/components/schemas/CommandDetails" }
				},
				"required": ["success", "command"],
				"type": "object"
			},
			"CreateCommandRequest": {
				"properties": {
					"name": { "type": "string" },
					"content": { "type": "string" },
					"description": { "type": "string" },
					"argumentHint": { "type": "string" }
				},
				"required": ["name", "content"],
				"type": "object"
			},
			"UpdateCommandResponse": {
				"properties": {
					"success": { "type": "boolean" },
					"command": { "$ref": "#/components/schemas/CommandDetails" }
				},
				"required": ["success", "command"],
				"type": "object"
			},
			"UpdateCommandRequest": {
				"properties": {
					"content": { "type": "string" },
					"description": { "type": "string" },
					"argumentHint": { "type": "string" }
				},
				"type": "object"
			},
			"DeleteCommandResponse": {
				"properties": { "success": { "type": "boolean" }, "message": { "type": "string" } },
				"required": ["success", "message"],
				"type": "object"
			},
			"ExecuteSlashCommandResponse": {
				"properties": {
					"success": { "type": "boolean" },
					"taskId": { "type": "string" },
					"commandName": { "type": "string" },
					"commandSource": { "type": "string" }
				},
				"required": ["success", "taskId", "commandName", "commandSource"],
				"type": "object"
			},
			"ExecuteSlashCommandRequest": {
				"properties": {
					"args": { "type": "string" },
					"mode": { "type": "string" },
					"images": { "items": { "type": "string" }, "type": "array" }
				},
				"type": "object"
			},
			"ValidateCommandResponse": {
				"properties": {
					"valid": { "type": "boolean" },
					"frontmatter": { "$ref": "#/components/schemas/Record_string.any_" },
					"contentPreview": { "type": "string" },
					"contentLength": { "type": "number" }
				},
				"required": ["valid", "frontmatter", "contentPreview", "contentLength"],
				"type": "object"
			},
			"ValidateCommandRequest": {
				"properties": { "content": { "type": "string" } },
				"required": ["content"],
				"type": "object"
			},
			"IndexStatusResponse": {
				"properties": { "status": { "type": "string" }, "message": { "type": "string" } },
				"required": ["status"],
				"type": "object"
			},
			"IndexOperationResponse": {
				"properties": { "success": { "type": "boolean" }, "message": { "type": "string" } },
				"required": ["success", "message"],
				"type": "object"
			},
			"IndexConfigResponse": {
				"properties": { "config": {}, "models": {} },
				"required": ["config", "models"],
				"type": "object"
			}
		},
		"securitySchemes": { "bearer": { "type": "http", "scheme": "bearer", "bearerFormat": "JWT" } }
	},
	"info": {
		"title": "Hoody Code API",
		"version": "1.0.0",
		"description": "REST API for Hoody Code VSCode Extension - Remote control and integration int...",
		"license": { "name": "Apache-2.0" },
		"contact": { "name": "Hoody Code", "url": "https://hoody.com" }
	},
	"paths": {
		"/todos/{taskId}": {
			"get": {
				"operationId": "GetTodoList",
				"responses": {
					"200": {
						"description": "TODO list retrieved",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/TodoListResponse" } }
						}
					},
					"404": {
						"description": "Task not found",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } }
						}
					}
				},
				"description": "Get TODO list for a task",
				"summary": "Get TODO list",
				"security": [{ "bearer": [] }],
				"parameters": [
					{
						"description": "Task ID",
						"in": "path",
						"name": "taskId",
						"required": true,
						"schema": { "type": "string" }
					}
				]
			},
			"post": {
				"operationId": "CreateTodo",
				"responses": {
					"201": {
						"description": "TODO created",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/CreateTodoResponse" } }
						}
					},
					"404": {
						"description": "Task not found",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } }
						}
					}
				},
				"description": "Create a new TODO item",
				"summary": "Create TODO",
				"security": [{ "bearer": [] }],
				"parameters": [
					{
						"description": "Task ID",
						"in": "path",
						"name": "taskId",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/CreateTodoRequest" } }
					}
				}
			}
		},
		"/todos/{taskId}/{todoId}": {
			"patch": {
				"operationId": "UpdateTodo",
				"responses": {
					"200": {
						"description": "TODO updated",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/UpdateTodoResponse" } }
						}
					},
					"404": {
						"description": "Task or TODO not found",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } }
						}
					}
				},
				"description": "Update a TODO item",
				"summary": "Update TODO",
				"security": [{ "bearer": [] }],
				"parameters": [
					{
						"description": "Task ID",
						"in": "path",
						"name": "taskId",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"description": "TODO ID",
						"in": "path",
						"name": "todoId",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/UpdateTodoRequest" } }
					}
				}
			},
			"delete": {
				"operationId": "DeleteTodo",
				"responses": {
					"204": { "description": "TODO deleted" },
					"404": {
						"description": "Task or TODO not found",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } }
						}
					}
				},
				"description": "Delete a TODO item",
				"summary": "Delete TODO",
				"security": [{ "bearer": [] }],
				"parameters": [
					{
						"description": "Task ID",
						"in": "path",
						"name": "taskId",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"description": "TODO ID",
						"in": "path",
						"name": "todoId",
						"required": true,
						"schema": { "type": "string" }
					}
				]
			}
		},
		"/todos/{taskId}/bulk": {
			"post": {
				"operationId": "BulkUpdateTodos",
				"responses": {
					"200": {
						"description": "TODO list replaced",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/BulkUpdateTodosResponse" } }
						}
					},
					"404": {
						"description": "Task not found",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } }
						}
					}
				},
				"description": "Replace entire TODO list",
				"summary": "Replace TODO list",
				"security": [{ "bearer": [] }],
				"parameters": [
					{
						"description": "Task ID",
						"in": "path",
						"name": "taskId",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/BulkUpdateTodosRequest" } }
					}
				}
			}
		},
		"/todos/{taskId}/import": {
			"post": {
				"operationId": "ImportTodos",
				"responses": {
					"200": {
						"description": "TODOs imported",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/ImportTodosResponse" } }
						}
					},
					"400": {
						"description": "Invalid TODO data",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } }
						}
					},
					"404": {
						"description": "Task not found",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } }
						}
					}
				},
				"description": "Import TODOs (deprecated - use bulk update instead)",
				"summary": "Import TODOs",
				"deprecated": true,
				"security": [{ "bearer": [] }],
				"parameters": [
					{
						"description": "Task ID",
						"in": "path",
						"name": "taskId",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/ImportTodosRequest" } }
					}
				}
			}
		},
		"/todos/{taskId}/export": {
			"get": {
				"operationId": "ExportTodos",
				"responses": {
					"200": {
						"description": "TODOs exported",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/ExportTodosResponse" } }
						}
					},
					"404": {
						"description": "Task not found",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } }
						}
					}
				},
				"description": "Export TODO list as JSON",
				"summary": "Export TODO list",
				"security": [{ "bearer": [] }],
				"parameters": [
					{
						"description": "Task ID",
						"in": "path",
						"name": "taskId",
						"required": true,
						"schema": { "type": "string" }
					}
				]
			}
		},
		"/terminal/execute": {
			"post": {
				"operationId": "ExecuteCommand",
				"responses": {
					"200": {
						"description": "Command execution initiated",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/ExecuteCommandResponse" } }
						}
					}
				},
				"description": "Execute a terminal command",
				"summary": "Execute terminal command",
				"security": [{ "bearer": [] }],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/ExecuteCommandRequest" } }
					}
				}
			}
		},
		"/terminal/info": {
			"get": {
				"operationId": "GetTerminalInfo",
				"responses": {
					"200": {
						"description": "Terminal info retrieved",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/TerminalInfoResponse" } }
						}
					}
				},
				"description": "Get terminal configuration information",
				"summary": "Get terminal configuration",
				"security": [{ "bearer": [] }],
				"parameters": []
			}
		},
		"/tasks": {
			"post": {
				"operationId": "CreateTask",
				"responses": {
					"201": {
						"description": "Task created",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/CreateTaskResponse" } }
						}
					}
				},
				"description": "Create a new task",
				"summary": "Create task",
				"security": [{ "bearer": [] }],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/CreateTaskRequest" } }
					}
				}
			},
			"get": {
				"operationId": "ListTasks",
				"responses": {
					"200": {
						"description": "Tasks listed",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/TaskListResponse" } }
						}
					}
				},
				"description": "List all tasks from history with filtering, sorting, and pagination",
				"summary": "List tasks",
				"security": [{ "bearer": [] }],
				"parameters": [
					{
						"description": "Page number (default: 1)",
						"in": "query",
						"name": "page",
						"required": false,
						"schema": { "type": "number" }
					},
					{
						"description": "Items per page (default: 50, max: 500)",
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": { "type": "number" }
					},
					{
						"description": "Sort order (newest, oldest, cost, tokens)",
						"in": "query",
						"name": "sort",
						"required": false,
						"schema": { "type": "string" }
					},
					{
						"description": "Filter by workspace (current, all, or specific path)",
						"in": "query",
						"name": "workspace",
						"required": false,
						"schema": { "type": "string" }
					},
					{
						"description": "Filter favorites only (true/false)",
						"in": "query",
						"name": "favorites",
						"required": false,
						"schema": { "type": "string" }
					},
					{
						"description": "Filter by mode",
						"in": "query",
						"name": "mode",
						"required": false,
						"schema": { "type": "string" }
					},
					{
						"description": "Filter from date (ISO 8601)",
						"in": "query",
						"name": "dateFrom",
						"required": false,
						"schema": { "type": "string" }
					},
					{
						"description": "Filter to date (ISO 8601)",
						"in": "query",
						"name": "dateTo",
						"required": false,
						"schema": { "type": "string" }
					},
					{
						"description": "Search in task text",
						"in": "query",
						"name": "search",
						"required": false,
						"schema": { "type": "string" }
					},
					{
						"description": "Include last message (raw and parsed) for each task (default: false)",
						"in": "query",
						"name": "includeLastMessage",
						"required": false,
						"schema": { "type": "boolean" }
					},
					{
						"description": "Include computed fork/subtask hierarchy metadata (default: true)",
						"in": "query",
						"name": "includeHierarchy",
						"required": false,
						"schema": { "type": "boolean" }
					}
				]
			}
		},
		"/tasks/{taskId}": {
			"get": {
				"operationId": "GetTask",
				"responses": {
					"200": {
						"description": "Task retrieved",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/TaskDetailsResponse" } }
						}
					}
				},
				"description": "Get task details with conversation history\n\nSupports flexible message retriev...",
				"summary": "Get task by ID",
				"security": [{ "bearer": [] }],
				"parameters": [
					{
						"description": "Task ID",
						"in": "path",
						"name": "taskId",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"description": "Include parsed UI messages (default: false)",
						"in": "query",
						"name": "includeParsed",
						"required": false,
						"schema": { "type": "boolean" }
					},
					{
						"description": "Include raw API messages (default: true).",
						"in": "query",
						"name": "includeRaw",
						"required": false,
						"schema": { "type": "boolean" }
					}
				]
			},
			"delete": {
				"operationId": "DeleteTask",
				"responses": { "204": { "description": "Task deleted" } },
				"description": "Delete a task permanently",
				"summary": "Delete task",
				"security": [{ "bearer": [] }],
				"parameters": [
					{
						"description": "Task ID",
						"in": "path",
						"name": "taskId",
						"required": true,
						"schema": { "type": "string" }
					}
				]
			}
		},
		"/tasks/{taskId}/resume": {
			"post": {
				"operationId": "ResumeTask",
				"responses": {
					"200": {
						"description": "Task resumed",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/ResumeTaskResponse" } }
						}
					}
				},
				"description": "Resume a paused task",
				"summary": "Resume task",
				"security": [{ "bearer": [] }],
				"parameters": [
					{
						"description": "Task ID",
						"in": "path",
						"name": "taskId",
						"required": true,
						"schema": { "type": "string" }
					}
				]
			}
		},
		"/tasks/{taskId}/respond": {
			"post": {
				"operationId": "RespondToTask",
				"responses": {
					"200": {
						"description": "Response sent",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/RespondToTaskResponse" } }
						}
					}
				},
				"description": "Send a response/message to a task\n\nThis endpoint handles three different scen...",
				"summary": "Respond to task",
				"security": [{ "bearer": [] }],
				"parameters": [
					{
						"description": "Task ID",
						"in": "path",
						"name": "taskId",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"description": "Response details",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/RespondToTaskRequest",
								"description": "Response details"
							}
						}
					}
				}
			}
		},
		"/tasks/{taskId}/cancel": {
			"post": {
				"operationId": "CancelTask",
				"responses": {
					"200": {
						"description": "Task cancelled",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/CancelTaskResponse" } }
						}
					}
				},
				"description": "Cancel the currently active task",
				"summary": "Cancel task",
				"security": [{ "bearer": [] }],
				"parameters": [
					{
						"description": "Task ID",
						"in": "path",
						"name": "taskId",
						"required": true,
						"schema": { "type": "string" }
					}
				]
			}
		},
		"/tasks/{taskId}/favorite": {
			"post": {
				"operationId": "ToggleFavorite",
				"responses": {
					"200": {
						"description": "Favorite toggled",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/ToggleFavoriteResponse" } }
						}
					}
				},
				"description": "Toggle task favorite status",
				"summary": "Toggle favorite",
				"security": [{ "bearer": [] }],
				"parameters": [
					{
						"description": "Task ID",
						"in": "path",
						"name": "taskId",
						"required": true,
						"schema": { "type": "string" }
					}
				]
			}
		},
		"/tasks/{taskId}/export/json": {
			"get": {
				"operationId": "ExportTaskJson",
				"responses": {
					"200": {
						"description": "Task exported as JSON",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/TaskExportJsonResponse" } }
						}
					}
				},
				"description": "Export task as JSON (complete backup)\n\nReturns complete task data including h...",
				"summary": "Export task as JSON",
				"security": [{ "bearer": [] }],
				"parameters": [
					{
						"description": "Task ID to export",
						"in": "path",
						"name": "taskId",
						"required": true,
						"schema": { "type": "string" }
					}
				]
			}
		},
		"/tasks/{taskId}/export": {
			"post": {
				"operationId": "ExportTask",
				"responses": {
					"200": {
						"description": "Task exported",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/ExportTaskResponse" } }
						}
					}
				},
				"description": "Export task to Markdown file (legacy)",
				"summary": "Export task as Markdown (legacy)",
				"security": [{ "bearer": [] }],
				"parameters": [
					{
						"description": "Task ID",
						"in": "path",
						"name": "taskId",
						"required": true,
						"schema": { "type": "string" }
					}
				]
			}
		},
		"/tasks/import/json": {
			"post": {
				"operationId": "ImportTaskJson",
				"responses": {
					"201": {
						"description": "Task imported successfully",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/ImportTaskResponse" } }
						}
					}
				},
				"description": "Import task from JSON export\n\nCreates a new task from exported JSON data, res...",
				"summary": "Import task from JSON",
				"security": [{ "bearer": [] }],
				"parameters": [],
				"requestBody": {
					"description": "Task import request with export data",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ImportTaskRequest",
								"description": "Task import request with export data"
							}
						}
					}
				}
			}
		},
		"/tasks/{taskId}/condense": {
			"post": {
				"operationId": "CondenseTask",
				"responses": {
					"200": {
						"description": "Task condensed",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/CondenseTaskResponse" } }
						}
					}
				},
				"description": "Condense task context (advanced feature)",
				"summary": "Condense task",
				"security": [{ "bearer": [] }],
				"parameters": [
					{
						"description": "Task ID",
						"in": "path",
						"name": "taskId",
						"required": true,
						"schema": { "type": "string" }
					}
				]
			}
		},
		"/tasks/{taskId}/queue": {
			"get": {
				"operationId": "GetMessageQueue",
				"responses": {
					"200": {
						"description": "Queue retrieved",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/MessageQueueResponse" } }
						}
					}
				},
				"description": "Get task's message queue",
				"summary": "Get message queue",
				"security": [{ "bearer": [] }],
				"parameters": [
					{
						"description": "Task ID",
						"in": "path",
						"name": "taskId",
						"required": true,
						"schema": { "type": "string" }
					}
				]
			},
			"post": {
				"operationId": "AddToQueue",
				"responses": {
					"201": {
						"description": "Message added to queue",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/AddToQueueResponse" } }
						}
					}
				},
				"description": "Add message to task's queue",
				"summary": "Add to queue",
				"security": [{ "bearer": [] }],
				"parameters": [
					{
						"description": "Task ID",
						"in": "path",
						"name": "taskId",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/AddToQueueRequest" } }
					}
				}
			},
			"delete": {
				"operationId": "ClearMessageQueue",
				"responses": {
					"200": {
						"description": "Queue cleared",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/ClearQueueResponse" } }
						}
					}
				},
				"description": "Clear all queued messages",
				"summary": "Clear message queue",
				"security": [{ "bearer": [] }],
				"parameters": [
					{
						"description": "Task ID",
						"in": "path",
						"name": "taskId",
						"required": true,
						"schema": { "type": "string" }
					}
				]
			}
		},
		"/tasks/{taskId}/queue/{messageId}": {
			"put": {
				"operationId": "UpdateQueuedMessage",
				"responses": {
					"200": {
						"description": "Message updated",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/UpdateQueueMessageResponse" }
							}
						}
					}
				},
				"description": "Update a queued message",
				"summary": "Update queued message",
				"security": [{ "bearer": [] }],
				"parameters": [
					{
						"description": "Task ID",
						"in": "path",
						"name": "taskId",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"description": "Message ID",
						"in": "path",
						"name": "messageId",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/UpdateQueueMessageRequest" } }
					}
				}
			},
			"delete": {
				"operationId": "DeleteQueuedMessage",
				"responses": { "204": { "description": "Message deleted" } },
				"description": "Delete a queued message",
				"summary": "Delete queued message",
				"security": [{ "bearer": [] }],
				"parameters": [
					{
						"description": "Task ID",
						"in": "path",
						"name": "taskId",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"description": "Message ID",
						"in": "path",
						"name": "messageId",
						"required": true,
						"schema": { "type": "string" }
					}
				]
			}
		},
		"/tasks/batch": {
			"delete": {
				"operationId": "BatchDeleteTasks",
				"responses": {
					"200": {
						"description": "Batch delete completed",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/BatchDeleteResponse" } }
						}
					}
				},
				"description": "Delete multiple tasks in batch",
				"summary": "Batch delete tasks",
				"security": [{ "bearer": [] }],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/BatchDeleteRequest" } }
					}
				}
			}
		},
		"/tasks/{taskId}/checkpoints": {
			"get": {
				"operationId": "ListCheckpoints",
				"responses": {
					"200": {
						"description": "Checkpoints listed",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/CheckpointListResponse" } }
						}
					}
				},
				"description": "List all checkpoints for a task",
				"summary": "List checkpoints",
				"security": [{ "bearer": [] }],
				"parameters": [
					{
						"description": "Task ID",
						"in": "path",
						"name": "taskId",
						"required": true,
						"schema": { "type": "string" }
					}
				]
			}
		},
		"/tasks/{taskId}/checkpoints/restore": {
			"post": {
				"operationId": "RestoreCheckpoint",
				"responses": {
					"200": {
						"description": "Checkpoint restored",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/RestoreCheckpointResponse" }
							}
						}
					}
				},
				"description": "Restore task to a specific checkpoint (rollback)",
				"summary": "Restore checkpoint",
				"security": [{ "bearer": [] }],
				"parameters": [
					{
						"description": "Task ID",
						"in": "path",
						"name": "taskId",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/RestoreCheckpointRequest" } }
					}
				}
			}
		},
		"/tasks/{taskId}/checkpoints/{hash}/diff": {
			"get": {
				"operationId": "GetCheckpointDiff",
				"responses": {
					"200": {
						"description": "Diff retrieved",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/CheckpointDiffResponse" } }
						}
					}
				},
				"description": "Get diff/changes for a checkpoint",
				"summary": "Get checkpoint diff",
				"security": [{ "bearer": [] }],
				"parameters": [
					{
						"description": "Task ID",
						"in": "path",
						"name": "taskId",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"description": "Checkpoint hash",
						"in": "path",
						"name": "hash",
						"required": true,
						"schema": { "type": "string" }
					}
				]
			}
		},
		"/tasks/{taskId}/fork": {
			"post": {
				"operationId": "ForkTask",
				"responses": {
					"201": {
						"description": "Task forked successfully",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/ForkTaskResponse" } }
						}
					}
				},
				"description": "Fork a task from a specific message.",
				"summary": "Fork task from message",
				"security": [{ "bearer": [] }],
				"parameters": [
					{
						"description": "Source task ID to fork from",
						"in": "path",
						"name": "taskId",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"description": "Fork request parameters",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ForkTaskRequest",
								"description": "Fork request parameters"
							}
						}
					}
				}
			}
		},
		"/tasks/{taskId}/messages/{timestamp}": {
			"patch": {
				"operationId": "EditMessage",
				"responses": {
					"200": {
						"description": "Message edited successfully",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/EditMessageResponse" } }
						}
					}
				},
				"description": "Edit a user message in the conversation history.",
				"summary": "Edit user message",
				"security": [{ "bearer": [] }],
				"parameters": [
					{
						"description": "Task ID",
						"in": "path",
						"name": "taskId",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"description": "Message timestamp (used as unique identifier)",
						"in": "path",
						"name": "timestamp",
						"required": true,
						"schema": { "type": "number" }
					}
				],
				"requestBody": {
					"description": "Updated message content",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/EditMessageRequest",
								"description": "Updated message content"
							}
						}
					}
				}
			}
		},
		"/tasks/{taskId}/messages/{timestamp}/digest": {
			"post": {
				"operationId": "DigestMessage",
				"responses": {
					"200": {
						"description": "Digest generated successfully",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/DigestMessageResponse" } }
						}
					}
				},
				"description": "Generate digest for a specific message (on-demand)\n\nCreates an ultra-compact...",
				"summary": "Generate message digest",
				"security": [{ "bearer": [] }],
				"parameters": [
					{
						"description": "Task ID",
						"in": "path",
						"name": "taskId",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"description": "Message timestamp",
						"in": "path",
						"name": "timestamp",
						"required": true,
						"schema": { "type": "number" }
					}
				],
				"requestBody": {
					"description": "Digest generation options",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/DigestMessageRequest",
								"description": "Digest generation options"
							}
						}
					}
				}
			}
		},
		"/tasks/{taskId}/digest/toggle": {
			"post": {
				"operationId": "ToggleTaskDigest",
				"responses": {
					"200": {
						"description": "Task digest settings updated",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/ToggleTaskDigestResponse" }
							}
						}
					}
				},
				"description": "Toggle Agent Digest for a specific task\n\nSets task-specific digest override s...",
				"summary": "Toggle task digest",
				"security": [{ "bearer": [] }],
				"parameters": [
					{
						"description": "Task ID",
						"in": "path",
						"name": "taskId",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"description": "Digest settings for this task",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ToggleTaskDigestRequest",
								"description": "Digest settings for this task"
							}
						}
					}
				}
			}
		},
		"/tasks/{taskId}/mode": {
			"patch": {
				"operationId": "UpdateTaskMode",
				"responses": {
					"200": {
						"description": "Task mode updated",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/UpdateTaskModeResponse" } }
						}
					}
				},
				"description": "Update a task's mode permanently\n\nChanges the task's mode and optionally its...",
				"summary": "Update task mode",
				"security": [{ "bearer": [] }],
				"parameters": [
					{
						"description": "Task ID",
						"in": "path",
						"name": "taskId",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"description": "Mode update request",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpdateTaskModeRequest",
								"description": "Mode update request"
							}
						}
					}
				}
			}
		},
		"/state": {
			"get": {
				"operationId": "GetState",
				"responses": {
					"200": {
						"description": "State retrieved successfully",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/ApplicationState" } }
						}
					},
					"500": {
						"description": "Internal server error",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } }
						}
					}
				},
				"description": "Get complete application state\n\nReturns the entire extension state including...",
				"security": [{ "bearer": [] }],
				"parameters": []
			}
		},
		"/state/config": {
			"get": {
				"operationId": "GetConfig",
				"responses": {
					"200": {
						"description": "Configuration retrieved successfully",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/ConfigurationResponse" } }
						}
					},
					"500": {
						"description": "Internal server error",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } }
						}
					}
				},
				"description": "Get configuration subset\n\nReturns a lighter subset of the state focusing on u...",
				"security": [{ "bearer": [] }],
				"parameters": []
			},
			"patch": {
				"operationId": "UpdateConfig",
				"responses": {
					"200": {
						"description": "Configuration updated successfully",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/ConfigurationUpdateResponse" }
							}
						}
					},
					"400": {
						"description": "Bad request - Invalid configuration",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } }
						}
					},
					"500": {
						"description": "Internal server error",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } }
						}
					}
				},
				"description": "Update configuration\n\nAllows partial updates to mode, API configuration, and...",
				"security": [{ "bearer": [] }],
				"parameters": [],
				"requestBody": {
					"description": "Configuration update request",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ConfigurationUpdateRequest",
								"description": "Configuration update request"
							}
						}
					}
				}
			}
		},
		"/state/modes": {
			"get": {
				"operationId": "GetModes",
				"responses": {
					"200": {
						"description": "Modes retrieved successfully",
						"content": {
							"application/json": {
								"schema": { "items": { "$ref": "#/components/schemas/ModeInfo" }, "type": "array" }
							}
						}
					},
					"500": {
						"description": "Internal server error",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } }
						}
					}
				},
				"description": "List available modes\n\nReturns all modes that the user can switch to (e.",
				"security": [{ "bearer": [] }],
				"parameters": [
					{
						"description": "Include full profile configuration for each mode (default: false)",
						"in": "query",
						"name": "includeProfileConfig",
						"required": false,
						"schema": { "type": "boolean" }
					}
				]
			}
		},
		"/state/model": {
			"get": {
				"operationId": "GetCurrentModel",
				"responses": {
					"200": {
						"description": "Model information retrieved successfully",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/CurrentModelInfo" } }
						}
					},
					"500": {
						"description": "Internal server error",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } }
						}
					}
				},
				"description": "Get current model information\n\nReturns information about the currently config...",
				"security": [{ "bearer": [] }],
				"parameters": []
			}
		},
		"/settings": {
			"get": {
				"operationId": "GetSettings",
				"responses": {
					"200": {
						"description": "Settings retrieved successfully",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/ExtensionSettings" } }
						}
					},
					"500": {
						"description": "Internal server error",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } }
						}
					}
				},
				"description": "Get all settings\n\nReturns all extension settings with secrets redacted for se...",
				"security": [{ "bearer": [] }],
				"parameters": []
			},
			"patch": {
				"operationId": "UpdateSettings",
				"responses": {
					"200": {
						"description": "Settings updated successfully",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/SettingsUpdateResponse" } }
						}
					},
					"400": {
						"description": "Bad request - Invalid settings object",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } }
						}
					},
					"500": {
						"description": "Internal server error",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } }
						}
					}
				},
				"description": "Update settings\n\nAllows partial updates to extension settings.",
				"security": [{ "bearer": [] }],
				"parameters": [],
				"requestBody": {
					"description": "Settings update request with key-value pairs",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/SettingsUpdateRequest",
								"description": "Settings update request with key-value pairs"
							}
						}
					}
				}
			}
		},
		"/settings/auto-approval": {
			"get": {
				"operationId": "GetAutoApproval",
				"responses": {
					"200": {
						"description": "Auto-approval settings retrieved successfully",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/AutoApprovalSettings" } }
						}
					},
					"500": {
						"description": "Internal server error",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } }
						}
					}
				},
				"description": "Get auto-approval configuration\n\nReturns the current auto-approval settings t...",
				"security": [{ "bearer": [] }],
				"parameters": []
			},
			"put": {
				"operationId": "UpdateAutoApproval",
				"responses": {
					"200": {
						"description": "Auto-approval settings updated successfully",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/SettingsUpdateResponse" } }
						}
					},
					"400": {
						"description": "Bad request - Invalid auto-approval settings",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } }
						}
					},
					"500": {
						"description": "Internal server error",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } }
						}
					}
				},
				"description": "Update auto-approval configuration\n\nUpdates which operations can be auto-appr...",
				"security": [{ "bearer": [] }],
				"parameters": [],
				"requestBody": {
					"description": "Auto-approval settings update",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AutoApprovalSettings",
								"description": "Auto-approval settings update"
							}
						}
					}
				}
			}
		},
		"/settings/terminal": {
			"get": {
				"operationId": "GetTerminalSettings",
				"responses": {
					"200": {
						"description": "Terminal settings retrieved successfully",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/TerminalSettings" } }
						}
					},
					"500": {
						"description": "Internal server error",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } }
						}
					}
				},
				"description": "Get terminal settings\n\nReturns configuration for terminal behavior including...",
				"security": [{ "bearer": [] }],
				"parameters": []
			}
		},
		"/settings/browser": {
			"get": {
				"operationId": "GetBrowserSettings",
				"responses": {
					"200": {
						"description": "Browser settings retrieved successfully",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/BrowserSettings" } }
						}
					},
					"500": {
						"description": "Internal server error",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } }
						}
					}
				},
				"description": "Get browser settings\n\nReturns configuration for browser automation features i...",
				"security": [{ "bearer": [] }],
				"parameters": []
			}
		},
		"/settings/condense": {
			"get": {
				"operationId": "GetCondenseSettings",
				"responses": {
					"200": {
						"description": "Condense settings retrieved successfully",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/CondenseSettings" } }
						}
					},
					"500": {
						"description": "Internal server error",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } }
						}
					}
				},
				"description": "Get context condensing settings\n\nReturns configuration for automatic context...",
				"security": [{ "bearer": [] }],
				"parameters": []
			},
			"put": {
				"operationId": "UpdateCondenseSettings",
				"responses": {
					"200": {
						"description": "Condense settings updated successfully",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/SettingsUpdateResponse" } }
						}
					},
					"400": {
						"description": "Bad request - Invalid condense settings",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } }
						}
					},
					"500": {
						"description": "Internal server error",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } }
						}
					}
				},
				"description": "Update context condensing settings\n\nUpdates configuration for automatic conte...",
				"security": [{ "bearer": [] }],
				"parameters": [],
				"requestBody": {
					"description": "Condense settings update",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CondenseSettings",
								"description": "Condense settings update"
							}
						}
					}
				}
			}
		},
		"/settings/digest": {
			"get": {
				"operationId": "GetDigestSettings",
				"responses": {
					"200": {
						"description": "Digest settings retrieved successfully",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/DigestSettings" } }
						}
					},
					"500": {
						"description": "Internal server error",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } }
						}
					}
				},
				"description": "Get Agent Digest settings\n\nReturns configuration for the Agent Digest feature...",
				"security": [{ "bearer": [] }],
				"parameters": []
			},
			"put": {
				"operationId": "UpdateDigestSettings",
				"responses": {
					"200": {
						"description": "Digest settings updated successfully",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/SettingsUpdateResponse" } }
						}
					},
					"400": {
						"description": "Bad request - Invalid digest settings",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } }
						}
					},
					"500": {
						"description": "Internal server error",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } }
						}
					}
				},
				"description": "Update Agent Digest settings\n\nUpdates configuration for the Agent Digest feat...",
				"security": [{ "bearer": [] }],
				"parameters": [],
				"requestBody": {
					"description": "Digest settings update",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/DigestSettings",
								"description": "Digest settings update"
							}
						}
					}
				}
			}
		},
		"/schemas/tool-responses": {
			"get": {
				"operationId": "GetToolResponseSchemas",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/SchemaDocumentationResponse_ToolResponse_" }
							}
						}
					}
				},
				"description": "Get all possible tool response schemas (documentation only)\n\n⚠️ This endpoint...",
				"summary": "Tool response type schemas",
				"tags": ["Documentation"],
				"security": [],
				"parameters": []
			}
		},
		"/schemas/websocket-messages": {
			"get": {
				"operationId": "GetWebSocketMessageSchemas",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SchemaDocumentationResponse_WebSocketMessage_"
								}
							}
						}
					}
				},
				"description": "Get all possible WebSocket message schemas (documentation only)\n\n⚠️ This endp...",
				"summary": "WebSocket message type schemas",
				"tags": ["Documentation"],
				"security": [],
				"parameters": []
			}
		},
		"/schemas/browser-actions": {
			"get": {
				"operationId": "GetBrowserActionSchemas",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SchemaDocumentationResponse__actions-BrowserAction-Array--result-BrowserActionResult__"
								}
							}
						}
					}
				},
				"description": "Get browser automation type schemas (documentation only)\n\n⚠️ This endpoint re...",
				"summary": "Browser automation schemas",
				"tags": ["Documentation"],
				"security": [],
				"parameters": []
			}
		},
		"/schemas/command-execution-status": {
			"get": {
				"operationId": "GetCommandExecutionStatusSchema",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SchemaDocumentationResponse_CommandExecutionStatus_"
								}
							}
						}
					}
				},
				"description": "Get command execution status schema (documentation only)\n\n⚠️ This endpoint re...",
				"summary": "Command execution status schema",
				"tags": ["Documentation"],
				"security": [],
				"parameters": []
			}
		},
		"/schemas/api-request-info": {
			"get": {
				"operationId": "GetApiRequestInfoSchema",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/SchemaDocumentationResponse_ApiRequestInfo_" }
							}
						}
					}
				},
				"description": "Get API request metadata schema (documentation only)\n\n⚠️ This endpoint return...",
				"summary": "API request metadata schema",
				"tags": ["Documentation"],
				"security": [],
				"parameters": []
			}
		},
		"/schemas/tool-types": {
			"get": {
				"operationId": "GetToolTypes",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SchemaDocumentationResponse__tools-ToolType-Array__"
								}
							}
						}
					}
				},
				"description": "Get all tool type names (documentation only)\n\n⚠️ This endpoint returns HTTP 5...",
				"summary": "Available tool types",
				"tags": ["Documentation"],
				"security": [],
				"parameters": []
			}
		},
		"/schemas/websocket-message-types": {
			"get": {
				"operationId": "GetWebSocketMessageTypes",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SchemaDocumentationResponse__types-WebSocketMessageType-Array__"
								}
							}
						}
					}
				},
				"description": "Get all WebSocket message type names (documentation only)\n\n⚠️ This endpoint r...",
				"summary": "Available WebSocket message types",
				"tags": ["Documentation"],
				"security": [],
				"parameters": []
			}
		},
		"/prompts/types": {
			"get": {
				"operationId": "GetPromptTypes",
				"responses": {
					"200": {
						"description": "Prompt types retrieved",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/PromptTypesResponse" } }
						}
					}
				},
				"description": "List all available prompt types with metadata",
				"summary": "List prompt types",
				"security": [{ "bearer": [] }],
				"parameters": []
			}
		},
		"/prompts": {
			"get": {
				"operationId": "GetAllPrompts",
				"responses": {
					"200": {
						"description": "Prompts retrieved",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/PromptsListResponse" } }
						}
					}
				},
				"description": "Get all current prompt templates (custom + defaults)",
				"summary": "Get all prompts",
				"security": [{ "bearer": [] }],
				"parameters": []
			},
			"delete": {
				"operationId": "ResetAllPrompts",
				"responses": {
					"200": {
						"description": "All prompts reset to defaults",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/ResetAllPromptsResponse" } }
						}
					}
				},
				"description": "Reset all prompts to defaults",
				"summary": "Reset all prompts",
				"security": [{ "bearer": [] }],
				"parameters": []
			}
		},
		"/prompts/{type}": {
			"get": {
				"operationId": "GetPrompt",
				"responses": {
					"200": {
						"description": "Prompt retrieved",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/PromptDetailsResponse" } }
						}
					}
				},
				"description": "Get a specific prompt template",
				"summary": "Get prompt by type",
				"security": [{ "bearer": [] }],
				"parameters": [
					{
						"description": "Prompt type (e.g., ENHANCE, FIX, EXPLAIN)",
						"in": "path",
						"name": "type",
						"required": true,
						"schema": { "type": "string" }
					}
				]
			},
			"put": {
				"operationId": "UpdatePrompt",
				"responses": {
					"200": {
						"description": "Prompt updated",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/UpdatePromptResponse" } }
						}
					}
				},
				"description": "Update a specific prompt template",
				"summary": "Update prompt",
				"security": [{ "bearer": [] }],
				"parameters": [
					{
						"description": "Prompt type",
						"in": "path",
						"name": "type",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/UpdatePromptRequest" } }
					}
				}
			},
			"delete": {
				"operationId": "ResetPrompt",
				"responses": {
					"200": {
						"description": "Prompt reset to default",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/ResetPromptResponse" } }
						}
					}
				},
				"description": "Reset a specific prompt to default",
				"summary": "Reset prompt to default",
				"security": [{ "bearer": [] }],
				"parameters": [
					{
						"description": "Prompt type",
						"in": "path",
						"name": "type",
						"required": true,
						"schema": { "type": "string" }
					}
				]
			}
		},
		"/prompts/execute": {
			"post": {
				"operationId": "ExecutePrompt",
				"responses": {
					"200": {
						"description": "Prompt executed or formatted",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/ExecutePromptResponse" } }
						}
					}
				},
				"description": "Execute a prompt template with parameters",
				"summary": "Execute prompt",
				"security": [{ "bearer": [] }],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/ExecutePromptRequest" } }
					}
				}
			}
		},
		"/profiles": {
			"get": {
				"operationId": "ListProfiles",
				"responses": {
					"200": {
						"description": "Profiles retrieved successfully",
						"content": {
							"application/json": {
								"schema": {
									"items": { "$ref": "#/components/schemas/ProfileListItem" },
									"type": "array"
								}
							}
						}
					},
					"500": {
						"description": "Internal server error",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } }
						}
					}
				},
				"description": "List all configured provider profiles",
				"summary": "Get all profiles",
				"security": [{ "bearer": [] }],
				"parameters": [
					{
						"description": "Include full configuration for each profile (default: false)",
						"in": "query",
						"name": "includeConfig",
						"required": false,
						"schema": { "type": "boolean" }
					}
				]
			},
			"post": {
				"operationId": "CreateProfile",
				"responses": {
					"201": {
						"description": "Profile created successfully",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/CreateProfileResponse" } }
						}
					},
					"400": {
						"description": "Bad request - Invalid input or profile already exists",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } }
						}
					},
					"500": {
						"description": "Internal server error",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } }
						}
					}
				},
				"description": "Create a new profile",
				"summary": "Create profile",
				"security": [{ "bearer": [] }],
				"parameters": [],
				"requestBody": {
					"description": "Profile creation request with name and configuration",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateProfileRequest",
								"description": "Profile creation request with name and configuration"
							}
						}
					}
				}
			}
		},
		"/profiles/{nameOrId}": {
			"get": {
				"operationId": "GetProfile",
				"responses": {
					"200": {
						"description": "Profile retrieved successfully",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/ProfileListItem" } }
						}
					},
					"400": {
						"description": "Bad request",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } }
						}
					},
					"404": {
						"description": "Profile not found",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } }
						}
					},
					"500": {
						"description": "Internal server error",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } }
						}
					}
				},
				"description": "Get a specific profile by name or ID",
				"summary": "Get profile details",
				"security": [{ "bearer": [] }],
				"parameters": [
					{
						"description": "Profile name or ID",
						"in": "path",
						"name": "nameOrId",
						"required": true,
						"schema": { "type": "string" }
					},
					{
						"description": "Include full configuration (default: false)",
						"in": "query",
						"name": "includeConfig",
						"required": false,
						"schema": { "type": "boolean" }
					}
				]
			}
		},
		"/profiles/{name}": {
			"put": {
				"operationId": "UpdateProfile",
				"responses": {
					"200": {
						"description": "Profile updated successfully",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/UpdateProfileResponse" } }
						}
					},
					"400": {
						"description": "Bad request",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } }
						}
					},
					"404": {
						"description": "Profile not found",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } }
						}
					},
					"500": {
						"description": "Internal server error",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } }
						}
					}
				},
				"description": "Update an existing profile\n\nThis endpoint performs a **MERGE** operation - it...",
				"summary": "Update profile (merge)",
				"security": [{ "bearer": [] }],
				"parameters": [
					{
						"description": "Profile name to update",
						"in": "path",
						"name": "name",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"description": "Profile update request with new configuration",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpdateProfileRequest",
								"description": "Profile update request with new configuration"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "DeleteProfile",
				"responses": {
					"200": {
						"description": "Profile deleted successfully",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/DeleteProfileResponse" } }
						}
					},
					"400": {
						"description": "Bad request - Cannot delete last profile",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } }
						}
					},
					"404": {
						"description": "Profile not found",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } }
						}
					},
					"500": {
						"description": "Internal server error",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } }
						}
					}
				},
				"description": "Delete a profile",
				"summary": "Delete profile",
				"security": [{ "bearer": [] }],
				"parameters": [
					{
						"description": "Profile name to delete",
						"in": "path",
						"name": "name",
						"required": true,
						"schema": { "type": "string" }
					}
				]
			}
		},
		"/profiles/{nameOrId}/activate": {
			"post": {
				"operationId": "ActivateProfile",
				"responses": {
					"200": {
						"description": "Profile activated successfully",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/ActivateProfileResponse" } }
						}
					},
					"400": {
						"description": "Bad request",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } }
						}
					},
					"404": {
						"description": "Profile not found",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } }
						}
					},
					"500": {
						"description": "Internal server error",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } }
						}
					}
				},
				"description": "Activate a profile (make it the current one)",
				"summary": "Activate profile",
				"security": [{ "bearer": [] }],
				"parameters": [
					{
						"description": "Profile name or ID to activate",
						"in": "path",
						"name": "nameOrId",
						"required": true,
						"schema": { "type": "string" }
					}
				]
			}
		},
		"/profiles/modes/{mode}": {
			"get": {
				"operationId": "GetModeProfile",
				"responses": {
					"200": {
						"description": "Mode profile retrieved successfully",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/ModeProfileResponse" } }
						}
					},
					"400": {
						"description": "Bad request",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } }
						}
					},
					"404": {
						"description": "No profile assigned to mode",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } }
						}
					},
					"500": {
						"description": "Internal server error",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } }
						}
					}
				},
				"description": "Get the profile assigned to a specific mode",
				"summary": "Get mode's profile",
				"security": [{ "bearer": [] }],
				"parameters": [
					{
						"description": "Mode slug (e.g., 'code', 'architect', 'ask')",
						"in": "path",
						"name": "mode",
						"required": true,
						"schema": { "type": "string" }
					}
				]
			},
			"put": {
				"operationId": "SetModeProfile",
				"responses": {
					"200": {
						"description": "Profile assigned to mode successfully",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/SetModeProfileResponse" } }
						}
					},
					"400": {
						"description": "Bad request",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } }
						}
					},
					"404": {
						"description": "Profile or mode not found",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } }
						}
					},
					"500": {
						"description": "Internal server error",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } }
						}
					}
				},
				"description": "Assign a profile to a specific mode",
				"summary": "Set mode's profile",
				"security": [{ "bearer": [] }],
				"parameters": [
					{
						"description": "Mode slug to configure",
						"in": "path",
						"name": "mode",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"description": "Profile assignment request (profileId or profileName)",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/SetModeProfileRequest",
								"description": "Profile assignment request (profileId or profileName)"
							}
						}
					}
				}
			}
		},
		"/memory-bank": {
			"get": {
				"operationId": "ListMemories",
				"responses": {
					"200": {
						"description": "Memory entries listed",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/MemoryListResponse" } }
						}
					},
					"500": {
						"description": "Internal server error",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } }
						}
					}
				},
				"description": "List all memory entries",
				"summary": "List memory entries",
				"security": [{ "bearer": [] }],
				"parameters": [
					{
						"description": "Filter by scope (global, local, all)",
						"in": "query",
						"name": "scope",
						"required": false,
						"schema": { "type": "string", "enum": ["global", "local", "all"] }
					},
					{
						"description": "Filter by enabled status",
						"in": "query",
						"name": "enabled",
						"required": false,
						"schema": { "type": "boolean" }
					},
					{
						"description": "Filter by category",
						"in": "query",
						"name": "category",
						"required": false,
						"schema": { "type": "string" }
					}
				]
			},
			"post": {
				"operationId": "CreateMemory",
				"responses": {
					"201": {
						"description": "Memory entry created",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/CreateMemoryResponse" } }
						}
					},
					"400": {
						"description": "Bad request",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } }
						}
					},
					"409": {
						"description": "Memory entry already exists",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } }
						}
					}
				},
				"description": "Create new memory entry",
				"summary": "Create memory",
				"security": [{ "bearer": [] }],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/CreateMemoryRequest" } }
					}
				}
			}
		},
		"/memory-bank/stats": {
			"get": {
				"operationId": "GetStats",
				"responses": {
					"200": {
						"description": "Statistics retrieved",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/MemoryStatsResponse" } }
						}
					}
				},
				"description": "Get memory bank statistics",
				"summary": "Get statistics",
				"security": [{ "bearer": [] }],
				"parameters": []
			}
		},
		"/memory-bank/{id}": {
			"get": {
				"operationId": "GetMemory",
				"responses": {
					"200": {
						"description": "Memory entry retrieved",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/MemoryEntry" } } }
					},
					"404": {
						"description": "Memory entry not found",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } }
						}
					}
				},
				"description": "Get specific memory entry",
				"summary": "Get memory entry",
				"security": [{ "bearer": [] }],
				"parameters": [
					{
						"description": "Memory ID or path",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": { "type": "string" }
					}
				]
			},
			"patch": {
				"operationId": "UpdateMemory",
				"responses": {
					"200": {
						"description": "Memory entry updated",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/UpdateMemoryResponse" } }
						}
					},
					"404": {
						"description": "Memory entry not found",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } }
						}
					}
				},
				"description": "Update memory entry",
				"summary": "Update memory",
				"security": [{ "bearer": [] }],
				"parameters": [
					{
						"description": "Memory ID or path",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/UpdateMemoryRequest" } }
					}
				}
			},
			"delete": {
				"operationId": "DeleteMemory",
				"responses": {
					"204": { "description": "Memory entry deleted" },
					"404": {
						"description": "Memory entry not found",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } }
						}
					}
				},
				"description": "Delete memory entry",
				"summary": "Delete memory",
				"security": [{ "bearer": [] }],
				"parameters": [
					{
						"description": "Memory ID or path",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": { "type": "string" }
					}
				]
			}
		},
		"/memory-bank/{id}/toggle": {
			"post": {
				"operationId": "ToggleMemory",
				"responses": {
					"200": {
						"description": "Memory entry toggled",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/ToggleMemoryResponse" } }
						}
					},
					"404": {
						"description": "Memory entry not found",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } }
						}
					}
				},
				"description": "Toggle memory entry enabled status",
				"summary": "Toggle memory",
				"security": [{ "bearer": [] }],
				"parameters": [
					{
						"description": "Memory ID or path",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": { "type": "string" }
					}
				]
			}
		},
		"/memory-bank/search": {
			"post": {
				"operationId": "SearchMemories",
				"responses": {
					"200": {
						"description": "Search completed",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/MemorySearchResponse" } }
						}
					}
				},
				"description": "Search memory entries",
				"summary": "Search memories",
				"security": [{ "bearer": [] }],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"scope": { "type": "string", "enum": ["global", "local", "all"] },
									"query": { "type": "string" }
								},
								"required": ["query"],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/memory-bank/suggest": {
			"post": {
				"operationId": "GetSuggestions",
				"responses": {
					"200": {
						"description": "Suggestions generated",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/MemorySuggestionsResponse" }
							}
						}
					}
				},
				"description": "Get AI-powered memory suggestions",
				"summary": "Get suggestions",
				"security": [{ "bearer": [] }],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": { "context": { "type": "string" }, "taskId": { "type": "string" } },
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/mcp/servers": {
			"get": {
				"operationId": "ListServers",
				"responses": {
					"200": {
						"description": "Servers retrieved",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/McpServerListResponse" } }
						}
					}
				},
				"description": "List all MCP servers",
				"summary": "List MCP servers",
				"security": [{ "bearer": [] }],
				"parameters": []
			}
		},
		"/mcp/servers/{serverName}": {
			"get": {
				"operationId": "GetServer",
				"responses": {
					"200": { "description": "Server retrieved", "content": { "application/json": { "schema": {} } } }
				},
				"description": "Get specific MCP server details",
				"summary": "Get MCP server by name",
				"security": [{ "bearer": [] }],
				"parameters": [
					{
						"description": "The name of the MCP server",
						"in": "path",
						"name": "serverName",
						"required": true,
						"schema": { "type": "string" }
					}
				]
			}
		},
		"/mcp/marketplace": {
			"get": {
				"operationId": "GetMarketplace",
				"responses": {
					"200": {
						"description": "Marketplace catalog retrieved",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/McpMarketplaceResponse" } }
						}
					}
				},
				"description": "Get MCP marketplace catalog",
				"summary": "Get marketplace catalog",
				"security": [{ "bearer": [] }],
				"parameters": [
					{
						"description": "Force refresh from API (default: false)",
						"in": "query",
						"name": "refresh",
						"required": false,
						"schema": { "type": "string" }
					}
				]
			}
		},
		"/mcp/marketplace/install": {
			"post": {
				"operationId": "InstallPackage",
				"responses": {
					"200": {
						"description": "Installation initiated",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/InstallMcpResponse" } }
						}
					}
				},
				"description": "Install MCP package from marketplace",
				"summary": "Install MCP package",
				"security": [{ "bearer": [] }],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/InstallMcpRequest" } }
					}
				}
			}
		},
		"/logs": {
			"get": {
				"operationId": "GetLogs",
				"responses": {
					"200": {
						"description": "Recent log entries with timestamps",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/LogsResponse" } } }
					}
				},
				"description": "Get recent logs from the output channel",
				"tags": ["Logs"],
				"security": [],
				"parameters": []
			}
		},
		"/health": {
			"get": {
				"operationId": "HealthCheck",
				"responses": {
					"200": {
						"description": "Server is healthy",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/HealthCheckResponse" } }
						}
					}
				},
				"description": "Health check endpoint\n\nReturns server health status along with real-time proc...",
				"summary": "Check server health and resource usage",
				"security": [],
				"parameters": []
			}
		},
		"/version": {
			"get": {
				"operationId": "GetVersion",
				"responses": {
					"200": {
						"description": "Version information retrieved",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"apiVersion": { "type": "string" },
										"name": { "type": "string" },
										"version": { "type": "string" }
									},
									"required": ["apiVersion", "name", "version"],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Get API version information",
				"summary": "Get version info",
				"security": [],
				"parameters": []
			}
		},
		"/files": {
			"get": {
				"operationId": "ListFiles",
				"responses": {
					"200": {
						"description": "Files listed successfully",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/ListFilesResponse" } }
						}
					}
				},
				"description": "List files and directories within the workspace",
				"summary": "List workspace files",
				"security": [{ "bearer": [] }],
				"parameters": [
					{
						"description": "Directory path relative to workspace root (default: \".\")",
						"in": "query",
						"name": "dirPath",
						"required": false,
						"schema": { "type": "string" }
					},
					{
						"description": "If true, lists contents recursively (default: false)",
						"in": "query",
						"name": "recursive",
						"required": false,
						"schema": { "type": "string" }
					}
				]
			}
		},
		"/files/read": {
			"get": {
				"operationId": "ReadFiles",
				"responses": {
					"200": {
						"description": "Files read successfully",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/ReadFilesResponse" } }
						}
					}
				},
				"description": "Read the content of one or more files",
				"summary": "Read file contents",
				"security": [{ "bearer": [] }],
				"parameters": [
					{
						"description": "Single file path or comma-separated list of file paths",
						"in": "query",
						"name": "filePath",
						"required": true,
						"schema": { "type": "string" }
					}
				]
			}
		},
		"/workspace": {
			"get": {
				"operationId": "GetWorkspaceInfo",
				"responses": {
					"200": {
						"description": "Workspace info retrieved",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/WorkspaceInfoResponse" } }
						}
					}
				},
				"description": "Get basic information about the current workspace",
				"summary": "Get workspace info",
				"security": [{ "bearer": [] }],
				"parameters": []
			}
		},
		"/openapi/spec.json": {
			"get": {
				"operationId": "GetOpenAPISpec",
				"responses": {
					"200": {
						"description": "OpenAPI specification retrieved successfully",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/OpenAPISpec" } } }
					}
				},
				"description": "Get OpenAPI specification\n\nReturns the complete OpenAPI 3.",
				"security": [],
				"parameters": []
			}
		},
		"/openapi/spec-compressed.json": {
			"get": {
				"operationId": "GetCompressedOpenAPISpec",
				"responses": {
					"200": {
						"description": "Compressed OpenAPI specification retrieved successfully",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/OpenAPISpec" } } }
					},
					"404": { "description": "Compressed spec file not found" }
				},
				"description": "Get compressed OpenAPI specification\n\nReturns an AI-optimized, compressed ver...",
				"security": [],
				"parameters": []
			}
		},
		"/commands": {
			"get": {
				"operationId": "ListCommands",
				"responses": {
					"200": {
						"description": "Commands listed successfully",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/CommandsListResponse" } }
						}
					}
				},
				"description": "List all available slash commands from all sources",
				"summary": "List all commands",
				"security": [{ "bearer": [] }],
				"parameters": [
					{
						"description": "Filter by source (built-in | global | project)",
						"in": "query",
						"name": "source",
						"required": false,
						"schema": { "type": "string" }
					},
					{
						"description": "Include full command content (default: false)",
						"in": "query",
						"name": "includeContent",
						"required": false,
						"schema": { "type": "string" }
					}
				]
			},
			"post": {
				"operationId": "CreateCommand",
				"responses": {
					"201": {
						"description": "Command created",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/CreateCommandResponse" } }
						}
					}
				},
				"description": "Create or update a project-level slash command",
				"summary": "Create command",
				"security": [{ "bearer": [] }],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/CreateCommandRequest" } }
					}
				}
			}
		},
		"/commands/names": {
			"get": {
				"operationId": "GetCommandNames",
				"responses": {
					"200": {
						"description": "Command names retrieved",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/CommandNamesResponse" } }
						}
					}
				},
				"description": "Get list of command names for autocomplete",
				"summary": "Get command names",
				"security": [{ "bearer": [] }],
				"parameters": []
			}
		},
		"/commands/{name}": {
			"get": {
				"operationId": "GetCommand",
				"responses": {
					"200": {
						"description": "Command retrieved",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/CommandDetails" } }
						}
					}
				},
				"description": "Get a specific slash command by name",
				"summary": "Get command by name",
				"security": [{ "bearer": [] }],
				"parameters": [
					{
						"description": "Command name",
						"in": "path",
						"name": "name",
						"required": true,
						"schema": { "type": "string" }
					}
				]
			},
			"put": {
				"operationId": "UpdateCommand",
				"responses": {
					"200": {
						"description": "Command updated",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/UpdateCommandResponse" } }
						}
					}
				},
				"description": "Update an existing project-level slash command",
				"summary": "Update command",
				"security": [{ "bearer": [] }],
				"parameters": [
					{
						"description": "Command name",
						"in": "path",
						"name": "name",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/UpdateCommandRequest" } }
					}
				}
			},
			"delete": {
				"operationId": "DeleteCommand",
				"responses": {
					"200": {
						"description": "Command deleted",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/DeleteCommandResponse" } }
						}
					}
				},
				"description": "Delete a project-level slash command",
				"summary": "Delete command",
				"security": [{ "bearer": [] }],
				"parameters": [
					{
						"description": "Command name",
						"in": "path",
						"name": "name",
						"required": true,
						"schema": { "type": "string" }
					}
				]
			}
		},
		"/commands/{name}/execute": {
			"post": {
				"operationId": "ExecuteCommand",
				"responses": {
					"201": {
						"description": "Command executed",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/ExecuteSlashCommandResponse" }
							}
						}
					}
				},
				"description": "Execute a slash command by creating a task",
				"summary": "Execute command",
				"security": [{ "bearer": [] }],
				"parameters": [
					{
						"description": "Command name",
						"in": "path",
						"name": "name",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/ExecuteSlashCommandRequest" } }
					}
				}
			}
		},
		"/commands/{name}/validate": {
			"post": {
				"operationId": "ValidateCommand",
				"responses": {
					"200": {
						"description": "Command validated",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/ValidateCommandResponse" } }
						}
					}
				},
				"description": "Validate command content without executing",
				"summary": "Validate command",
				"security": [{ "bearer": [] }],
				"parameters": [
					{
						"description": "Command name",
						"in": "path",
						"name": "name",
						"required": true,
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/ValidateCommandRequest" } }
					}
				}
			}
		},
		"/codeindex/status": {
			"get": {
				"operationId": "GetStatus",
				"responses": {
					"200": {
						"description": "Index status retrieved",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/IndexStatusResponse" } }
						}
					}
				},
				"description": "Get current indexing status",
				"summary": "Get code index status",
				"security": [{ "bearer": [] }],
				"parameters": []
			}
		},
		"/codeindex/start": {
			"post": {
				"operationId": "StartIndexing",
				"responses": {
					"200": {
						"description": "Indexing started",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/IndexOperationResponse" } }
						}
					}
				},
				"description": "Start indexing the workspace",
				"summary": "Start code indexing",
				"security": [{ "bearer": [] }],
				"parameters": []
			}
		},
		"/codeindex/cancel": {
			"post": {
				"operationId": "CancelIndexing",
				"responses": {
					"200": {
						"description": "Indexing cancelled",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/IndexOperationResponse" } }
						}
					}
				},
				"description": "Cancel ongoing indexing",
				"summary": "Cancel code indexing",
				"security": [{ "bearer": [] }],
				"parameters": []
			}
		},
		"/codeindex": {
			"delete": {
				"operationId": "ClearIndex",
				"responses": {
					"200": {
						"description": "Index cleared",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/IndexOperationResponse" } }
						}
					}
				},
				"description": "Clear the code index",
				"summary": "Clear code index",
				"security": [{ "bearer": [] }],
				"parameters": []
			}
		},
		"/codeindex/config": {
			"get": {
				"operationId": "GetConfig",
				"responses": {
					"200": {
						"description": "Config retrieved",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/IndexConfigResponse" } }
						}
					}
				},
				"description": "Get code index configuration",
				"summary": "Get code index config",
				"security": [{ "bearer": [] }],
				"parameters": []
			}
		}
	},
	"servers": [{ "url": "/api/v1/agent" }],
	"tags": [
		{ "name": "Health", "description": "Server health and status endpoints" },
		{ "name": "State", "description": "Application state and configuration" },
		{ "name": "Profiles", "description": "AI provider profile management" },
		{ "name": "Modes", "description": "Mode management and configuration" },
		{ "name": "Tasks", "description": "Task creation and lifecycle management" },
		{ "name": "Files", "description": "File operations and workspace access" },
		{ "name": "MCP", "description": "Model Context Protocol server integration" },
		{ "name": "Terminal", "description": "Terminal command execution" },
		{ "name": "CodeIndex", "description": "Code search and semantic indexing" },
		{ "name": "Settings", "description": "Extension settings management" },
		{ "name": "Commands", "description": "Slash command templates" },
		{ "name": "Prompts", "description": "Support prompt templates" }
	]
}
