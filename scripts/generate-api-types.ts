#!/usr/bin/env tsx
/**
 * Generate TypeScript interfaces from Zod schemas for TSOA OpenAPI generation
 *
 * This script converts Zod schemas to TypeScript interfaces that TSOA can process.
 * It uses discriminated unions where available to generate proper OpenAPI oneOf/discriminator.
 */

import { zodToTs, printNode } from "zod-to-ts"
import { writeFileSync } from "fs"
import { resolve } from "path"
import {
	providerSettingsSchemaDiscriminated,
	providerSettingsSchema,
	globalSettingsSchema,
	experimentsSchema,
} from "../packages/types/src/index.js"
import {
	clineMessageSchema,
	clineAskSchema,
	clineSaySchema,
	toolProgressStatusSchema,
	contextCondenseSchema,
} from "../packages/types/src/message.js"

console.log("üîÑ Generating TypeScript interfaces from Zod schemas...")

// Generate interfaces using zod-to-ts
const experiments = zodToTs(experimentsSchema, "Experiments")
const providerSettingsDiscriminated = zodToTs(providerSettingsSchemaDiscriminated, "ProviderSettingsDiscriminated")
const providerSettings = zodToTs(providerSettingsSchema, "ProviderSettings")
const globalSettings = zodToTs(globalSettingsSchema, "GlobalSettings")

// Generate message types for UI message system
const clineMessage = zodToTs(clineMessageSchema, "ClineMessage")
const clineAsk = zodToTs(clineAskSchema, "ClineAsk")
const clineSay = zodToTs(clineSaySchema, "ClineSay")
const toolProgressStatus = zodToTs(toolProgressStatusSchema, "ToolProgressStatus")
const contextCondense = zodToTs(contextCondenseSchema, "ContextCondense")

// Print the AST nodes to TypeScript code
let experimentsCode = printNode(experiments.node)
let providerSettingsDiscriminatedCode = printNode(providerSettingsDiscriminated.node)
let providerSettingsCode = printNode(providerSettings.node)
let globalSettingsCode = printNode(globalSettings.node)
let clineMessageCode = printNode(clineMessage.node)
let clineAskCode = printNode(clineAsk.node)
let clineSayCode = printNode(clineSay.node)
let toolProgressStatusCode = printNode(toolProgressStatus.node)
let contextCondenseCode = printNode(contextCondense.node)

// TSOA can't handle tuple types, so we need to simplify them
// Replace the complex customModes.groups field with a simpler type
globalSettingsCode = globalSettingsCode.replace(
	/customModes\?\:\s*\{[^}]*groups:\s*\([^\]]+\]\)\[\];[^}]*\}\[\]\s*\|\s*undefined;/gs,
	'customModes?: any[] | undefined;'
)

// If the above regex doesn't match, try a simpler approach
if (globalSettingsCode.includes('TupleType') || globalSettingsCode.includes('groups: (')) {
	console.warn("‚ö†Ô∏è  Complex tuple types detected, using fallback simplification")
	globalSettingsCode = globalSettingsCode.replace(
		/groups:\s*\([^;]+\]\)\[\];/g,
		'groups?: any[];'
	)
}

// Create the output file content with proper interface declarations
const output = `/**
 * Auto-generated TypeScript interfaces from Zod schemas
 *
 * DO NOT EDIT THIS FILE MANUALLY!
 * This file is generated by scripts/generate-api-types.ts
 * Run: pnpm generate:api-types to regenerate
 *
 * These interfaces are used by TSOA to generate the OpenAPI specification.
 * They include ALL configuration fields from the Zod schemas including
 * experiments.powerSteering and 100+ other settings.
 *
 * Note: Complex types like tuples have been simplified to be TSOA-compatible.
 */

/**
 * Experimental features that can be toggled
 * Includes: powerSteering, multiFileApplyDiff, preventFocusDisruption,
 * imageGeneration, runSlashCommand, morphFastApply
 */
export interface Experiments ${experimentsCode}

/**
 * Provider Settings with Discriminated Union
 * This uses TypeScript discriminated unions to properly represent provider-specific fields.
 * TSOA will convert this to OpenAPI oneOf with discriminator on apiProvider field.
 */
export type ProviderSettingsDiscriminated = ${providerSettingsDiscriminatedCode}

/**
 * Complete Provider Settings (Flat)
 * Includes all provider-specific configuration options for 30+ AI providers
 * and base settings like diffEnabled, fuzzyMatchThreshold, rateLimitSeconds, etc.
 *
 * Note: This is the flat version used for backward compatibility.
 * Use ProviderSettingsDiscriminated for proper type discrimination.
 */
export interface ProviderSettings ${providerSettingsCode}

/**
 * Complete Global Settings
 * Includes all extension settings (100+ fields) including:
 * - experiments object (with powerSteering)
 * - autoApproval settings
 * - terminal settings
 * - browser settings
 * - MCP settings
 * - and much more
 */
export interface GlobalSettings ${globalSettingsCode}

// ============================================================================
// UI Message Types
// ============================================================================

/**
 * Ask types - Messages where the agent requests user interaction/approval
 *
 * These represent different scenarios where the assistant needs user input:
 * - followup: Clarifying question to gather more information
 * - command: Permission to execute a terminal/shell command
 * - completion_result: Task completed, awaiting feedback or new task
 * - tool: Permission to use a tool for file operations
 * - api_req_failed: API request failed, asking whether to retry
 * - resume_task: Confirmation to resume a paused task
 * - browser_action_launch: Permission to open/interact with browser
 * - use_mcp_server: Permission to use MCP server functionality
 * - and more...
 */
export type ClineAsk = ${clineAskCode}

/**
 * Say types - Informational messages from the agent
 *
 * These represent different kinds of communication from the LLM:
 * - text: General text message or assistant response
 * - api_req_started: API request has been initiated
 * - api_req_finished: API request completed successfully
 * - completion_result: Final result of task completion
 * - command_output: Output from an executed command
 * - checkpoint_saved: Checkpoint has been saved
 * - reasoning: Assistant's reasoning/thought process
 * - and more...
 */
export type ClineSay = ${clineSayCode}

/**
 * Tool progress status
 * Used to show progress indicators during tool execution
 */
export type ToolProgressStatus = ${toolProgressStatusCode}

/**
 * Context condensation result
 * Information about context summarization/compression
 */
export type ContextCondense = ${contextCondenseCode}

/**
 * ClineMessage - Complete UI message structure
 *
 * This is a discriminated union based on the 'type' field:
 * - type: "ask" ‚Üí Message requesting user interaction (uses 'ask' field)
 * - type: "say" ‚Üí Informational message (uses 'say' field)
 *
 * Common fields:
 * - ts: Message timestamp
 * - text: Message content
 * - images: Optional image attachments
 * - partial: Whether message is still streaming
 *
 * Special fields:
 * - progressStatus: Tool execution progress
 * - contextCondense: Context condensation info
 * - checkpoint: Git checkpoint metadata
 * - reasoning: Assistant's reasoning process
 */
export type ClineMessage = ${clineMessageCode}
`

// Write to output file
const outputPath = resolve(__dirname, "../src/services/api-server/generated-types.ts")
writeFileSync(outputPath, output, "utf-8")

console.log("‚úÖ Generated TypeScript interfaces:")
console.log(`   üìÑ ${outputPath}`)
console.log("\nüìä Generated types:")
console.log(`   - Experiments (${experimentsCode.split('\n').length} lines)`)
console.log(`   - ProviderSettingsDiscriminated (${providerSettingsDiscriminatedCode.split('\n').length} lines) - WITH DISCRIMINATOR`)
console.log(`   - ProviderSettings (${providerSettingsCode.split('\n').length} lines) - Flat for compatibility`)
console.log(`   - GlobalSettings (${globalSettingsCode.split('\n').length} lines)`)
console.log(`   - ClineMessage (${clineMessageCode.split('\n').length} lines) - UI message structure`)
console.log(`   - ClineAsk (${clineAskCode.split('\n').length} lines) - Ask types (16 variants)`)
console.log(`   - ClineSay (${clineSayCode.split('\n').length} lines) - Say types (26 variants)`)
console.log(`   - ToolProgressStatus (${toolProgressStatusCode.split('\n').length} lines) - Progress indicators`)
console.log(`   - ContextCondense (${contextCondenseCode.split('\n').length} lines) - Condensation info`)
console.log("\nüéØ Next step:")
console.log("   Run 'cd src && pnpm tsoa' to regenerate OpenAPI spec with full UI message types")